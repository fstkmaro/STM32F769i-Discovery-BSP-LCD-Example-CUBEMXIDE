
jim769.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000836c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cf4  08008564  08008564  00018564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a258  0800a258  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  0800a258  0800a258  0001a258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a260  0800a260  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a260  0800a260  0001a260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a264  0800a264  0001a264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  0800a268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  20000040  0800a2a8  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20000600  0800a2a8  00020600  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021189  00000000  00000000  0002006e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d78  00000000  00000000  000411f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a00  00000000  00000000  00044f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001808  00000000  00000000  00046970  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000305ef  00000000  00000000  00048178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000167db  00000000  00000000  00078767  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00122718  00000000  00000000  0008ef42  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b165a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dac  00000000  00000000  001b16d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000040 	.word	0x20000040
 8000214:	00000000 	.word	0x00000000
 8000218:	0800854c 	.word	0x0800854c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000044 	.word	0x20000044
 8000234:	0800854c 	.word	0x0800854c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	4618      	mov	r0, r3
 8000546:	f000 f90d 	bl	8000764 <ft6x06_GetInstance>
 800054a:	4603      	mov	r3, r0
 800054c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	2bff      	cmp	r3, #255	; 0xff
 8000552:	d10e      	bne.n	8000572 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8000554:	2000      	movs	r0, #0
 8000556:	f000 f905 	bl	8000764 <ft6x06_GetInstance>
 800055a:	4603      	mov	r3, r0
 800055c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 800055e:	7bbb      	ldrb	r3, [r7, #14]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d806      	bhi.n	8000572 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8000564:	7bbb      	ldrb	r3, [r7, #14]
 8000566:	88fa      	ldrh	r2, [r7, #6]
 8000568:	b2d1      	uxtb	r1, r2
 800056a:	4a04      	ldr	r2, [pc, #16]	; (800057c <ft6x06_Init+0x44>)
 800056c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 800056e:	f000 fcd5 	bl	8000f1c <TS_IO_Init>
    }
  }
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	2000005c 	.word	0x2000005c

08000580 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	4603      	mov	r3, r0
 800059e:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 80005a0:	f000 fcbc 	bl	8000f1c <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	21a8      	movs	r1, #168	; 0xa8
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fcda 	bl	8000f64 <TS_IO_Read>
 80005b0:	4603      	mov	r3, r0
 80005b2:	b29b      	uxth	r3, r3
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f8bc 	bl	8000746 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f88d 	bl	80006f0 <ft6x06_TS_DisableIT>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2102      	movs	r1, #2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fcb5 	bl	8000f64 <TS_IO_Read>
 80005fa:	4603      	mov	r3, r0
 80005fc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f003 030f 	and.w	r3, r3, #15
 8000606:	b2db      	uxtb	r3, r3
 8000608:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b02      	cmp	r3, #2
 8000610:	d901      	bls.n	8000616 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <ft6x06_TS_DetectTouch+0x50>)
 800061c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <ft6x06_TS_DetectTouch+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	b2db      	uxtb	r3, r3
}
 8000628:	4618      	mov	r0, r3
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000060 	.word	0x20000060

08000634 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
 8000640:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8000646:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <ft6x06_TS_GetXY+0x90>)
 8000648:	789a      	ldrb	r2, [r3, #2]
 800064a:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <ft6x06_TS_GetXY+0x90>)
 800064c:	785b      	ldrb	r3, [r3, #1]
 800064e:	429a      	cmp	r2, r3
 8000650:	d234      	bcs.n	80006bc <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <ft6x06_TS_GetXY+0x90>)
 8000654:	789b      	ldrb	r3, [r3, #2]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <ft6x06_TS_GetXY+0x2c>
 800065a:	2b01      	cmp	r3, #1
 800065c:	d003      	beq.n	8000666 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 800065e:	e005      	b.n	800066c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000660:	2303      	movs	r3, #3
 8000662:	75fb      	strb	r3, [r7, #23]
      break;
 8000664:	e002      	b.n	800066c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8000666:	2309      	movs	r3, #9
 8000668:	75fb      	strb	r3, [r7, #23]
      break;
 800066a:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 800066c:	89fb      	ldrh	r3, [r7, #14]
 800066e:	b2d8      	uxtb	r0, r3
 8000670:	f107 0210 	add.w	r2, r7, #16
 8000674:	7df9      	ldrb	r1, [r7, #23]
 8000676:	2304      	movs	r3, #4
 8000678:	f000 fc92 	bl	8000fa0 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 800067c:	7c3b      	ldrb	r3, [r7, #16]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21b      	sxth	r3, r3
 8000682:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000686:	b21a      	sxth	r2, r3
 8000688:	7c7b      	ldrb	r3, [r7, #17]
 800068a:	b21b      	sxth	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b21b      	sxth	r3, r3
 8000690:	b29a      	uxth	r2, r3
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8000696:	7cbb      	ldrb	r3, [r7, #18]
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	b21b      	sxth	r3, r3
 800069c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	7cfb      	ldrb	r3, [r7, #19]
 80006a4:	b21b      	sxth	r3, r3
 80006a6:	4313      	orrs	r3, r2
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <ft6x06_TS_GetXY+0x90>)
 80006b2:	789b      	ldrb	r3, [r3, #2]
 80006b4:	3301      	adds	r3, #1
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b02      	ldr	r3, [pc, #8]	; (80006c4 <ft6x06_TS_GetXY+0x90>)
 80006ba:	709a      	strb	r2, [r3, #2]
  }
}
 80006bc:	bf00      	nop
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000060 	.word	0x20000060

080006c8 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80006d6:	2301      	movs	r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	7bfa      	ldrb	r2, [r7, #15]
 80006e0:	21a4      	movs	r1, #164	; 0xa4
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fc24 	bl	8000f30 <TS_IO_Write>
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80006fe:	2300      	movs	r3, #0
 8000700:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	7bfa      	ldrb	r2, [r7, #15]
 8000708:	21a4      	movs	r1, #164	; 0xa4
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fc10 	bl	8000f30 <TS_IO_Write>
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8000722:	2300      	movs	r3, #0
}
 8000724:	4618      	mov	r0, r3
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8000746:	b480      	push	{r7}
 8000748:	b085      	sub	sp, #20
 800074a:	af00      	add	r7, sp, #0
 800074c:	4603      	mov	r3, r0
 800074e:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8000754:	68fb      	ldr	r3, [r7, #12]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000772:	2300      	movs	r3, #0
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	e00b      	b.n	8000790 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <ft6x06_GetInstance+0x40>)
 800077c:	5cd3      	ldrb	r3, [r2, r3]
 800077e:	b29b      	uxth	r3, r3
 8000780:	88fa      	ldrh	r2, [r7, #6]
 8000782:	429a      	cmp	r2, r3
 8000784:	d101      	bne.n	800078a <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	e006      	b.n	8000798 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	3301      	adds	r3, #1
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d9f0      	bls.n	8000778 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8000796:	23ff      	movs	r3, #255	; 0xff
}
 8000798:	4618      	mov	r0, r3
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	2000005c 	.word	0x2000005c

080007a8 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80007b2:	49be      	ldr	r1, [pc, #760]	; (8000aac <OTM8009A_Init+0x304>)
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 ffb9 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 80007ba:	49bd      	ldr	r1, [pc, #756]	; (8000ab0 <OTM8009A_Init+0x308>)
 80007bc:	2003      	movs	r0, #3
 80007be:	f000 ffb5 	bl	800172c <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80007c2:	49bc      	ldr	r1, [pc, #752]	; (8000ab4 <OTM8009A_Init+0x30c>)
 80007c4:	2000      	movs	r0, #0
 80007c6:	f000 ffb1 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 80007ca:	49bb      	ldr	r1, [pc, #748]	; (8000ab8 <OTM8009A_Init+0x310>)
 80007cc:	2002      	movs	r0, #2
 80007ce:	f000 ffad 	bl	800172c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80007d2:	49b8      	ldr	r1, [pc, #736]	; (8000ab4 <OTM8009A_Init+0x30c>)
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 ffa9 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80007da:	49b8      	ldr	r1, [pc, #736]	; (8000abc <OTM8009A_Init+0x314>)
 80007dc:	2000      	movs	r0, #0
 80007de:	f000 ffa5 	bl	800172c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80007e2:	200a      	movs	r0, #10
 80007e4:	f000 fbfa 	bl	8000fdc <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80007e8:	49b5      	ldr	r1, [pc, #724]	; (8000ac0 <OTM8009A_Init+0x318>)
 80007ea:	2000      	movs	r0, #0
 80007ec:	f000 ff9e 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80007f0:	49b4      	ldr	r1, [pc, #720]	; (8000ac4 <OTM8009A_Init+0x31c>)
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 ff9a 	bl	800172c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80007f8:	200a      	movs	r0, #10
 80007fa:	f000 fbef 	bl	8000fdc <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80007fe:	49b2      	ldr	r1, [pc, #712]	; (8000ac8 <OTM8009A_Init+0x320>)
 8000800:	2000      	movs	r0, #0
 8000802:	f000 ff93 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8000806:	49b1      	ldr	r1, [pc, #708]	; (8000acc <OTM8009A_Init+0x324>)
 8000808:	2000      	movs	r0, #0
 800080a:	f000 ff8f 	bl	800172c <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 800080e:	49b0      	ldr	r1, [pc, #704]	; (8000ad0 <OTM8009A_Init+0x328>)
 8000810:	2000      	movs	r0, #0
 8000812:	f000 ff8b 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000816:	49af      	ldr	r1, [pc, #700]	; (8000ad4 <OTM8009A_Init+0x32c>)
 8000818:	2000      	movs	r0, #0
 800081a:	f000 ff87 	bl	800172c <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 800081e:	49ae      	ldr	r1, [pc, #696]	; (8000ad8 <OTM8009A_Init+0x330>)
 8000820:	2000      	movs	r0, #0
 8000822:	f000 ff83 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8000826:	49ad      	ldr	r1, [pc, #692]	; (8000adc <OTM8009A_Init+0x334>)
 8000828:	2000      	movs	r0, #0
 800082a:	f000 ff7f 	bl	800172c <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800082e:	499f      	ldr	r1, [pc, #636]	; (8000aac <OTM8009A_Init+0x304>)
 8000830:	2000      	movs	r0, #0
 8000832:	f000 ff7b 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8000836:	49aa      	ldr	r1, [pc, #680]	; (8000ae0 <OTM8009A_Init+0x338>)
 8000838:	2000      	movs	r0, #0
 800083a:	f000 ff77 	bl	800172c <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800083e:	49a9      	ldr	r1, [pc, #676]	; (8000ae4 <OTM8009A_Init+0x33c>)
 8000840:	2000      	movs	r0, #0
 8000842:	f000 ff73 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8000846:	49a8      	ldr	r1, [pc, #672]	; (8000ae8 <OTM8009A_Init+0x340>)
 8000848:	2000      	movs	r0, #0
 800084a:	f000 ff6f 	bl	800172c <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800084e:	49a7      	ldr	r1, [pc, #668]	; (8000aec <OTM8009A_Init+0x344>)
 8000850:	2000      	movs	r0, #0
 8000852:	f000 ff6b 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8000856:	49a6      	ldr	r1, [pc, #664]	; (8000af0 <OTM8009A_Init+0x348>)
 8000858:	2000      	movs	r0, #0
 800085a:	f000 ff67 	bl	800172c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 800085e:	49a5      	ldr	r1, [pc, #660]	; (8000af4 <OTM8009A_Init+0x34c>)
 8000860:	2000      	movs	r0, #0
 8000862:	f000 ff63 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8000866:	49a4      	ldr	r1, [pc, #656]	; (8000af8 <OTM8009A_Init+0x350>)
 8000868:	2000      	movs	r0, #0
 800086a:	f000 ff5f 	bl	800172c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 800086e:	49a3      	ldr	r1, [pc, #652]	; (8000afc <OTM8009A_Init+0x354>)
 8000870:	2000      	movs	r0, #0
 8000872:	f000 ff5b 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000876:	4997      	ldr	r1, [pc, #604]	; (8000ad4 <OTM8009A_Init+0x32c>)
 8000878:	2000      	movs	r0, #0
 800087a:	f000 ff57 	bl	800172c <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800087e:	498b      	ldr	r1, [pc, #556]	; (8000aac <OTM8009A_Init+0x304>)
 8000880:	2000      	movs	r0, #0
 8000882:	f000 ff53 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8000886:	499e      	ldr	r1, [pc, #632]	; (8000b00 <OTM8009A_Init+0x358>)
 8000888:	2002      	movs	r0, #2
 800088a:	f000 ff4f 	bl	800172c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 800088e:	499d      	ldr	r1, [pc, #628]	; (8000b04 <OTM8009A_Init+0x35c>)
 8000890:	2000      	movs	r0, #0
 8000892:	f000 ff4b 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8000896:	499c      	ldr	r1, [pc, #624]	; (8000b08 <OTM8009A_Init+0x360>)
 8000898:	2000      	movs	r0, #0
 800089a:	f000 ff47 	bl	800172c <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 800089e:	499b      	ldr	r1, [pc, #620]	; (8000b0c <OTM8009A_Init+0x364>)
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 ff43 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80008a6:	499a      	ldr	r1, [pc, #616]	; (8000b10 <OTM8009A_Init+0x368>)
 80008a8:	2000      	movs	r0, #0
 80008aa:	f000 ff3f 	bl	800172c <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80008ae:	4999      	ldr	r1, [pc, #612]	; (8000b14 <OTM8009A_Init+0x36c>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 ff3b 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 80008b6:	4998      	ldr	r1, [pc, #608]	; (8000b18 <OTM8009A_Init+0x370>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f000 ff37 	bl	800172c <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008be:	4989      	ldr	r1, [pc, #548]	; (8000ae4 <OTM8009A_Init+0x33c>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 ff33 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 80008c6:	4995      	ldr	r1, [pc, #596]	; (8000b1c <OTM8009A_Init+0x374>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f000 ff2f 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80008ce:	4987      	ldr	r1, [pc, #540]	; (8000aec <OTM8009A_Init+0x344>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f000 ff2b 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 80008d6:	4992      	ldr	r1, [pc, #584]	; (8000b20 <OTM8009A_Init+0x378>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f000 ff27 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 80008de:	4991      	ldr	r1, [pc, #580]	; (8000b24 <OTM8009A_Init+0x37c>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f000 ff23 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 80008e6:	4990      	ldr	r1, [pc, #576]	; (8000b28 <OTM8009A_Init+0x380>)
 80008e8:	2002      	movs	r0, #2
 80008ea:	f000 ff1f 	bl	800172c <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80008ee:	4971      	ldr	r1, [pc, #452]	; (8000ab4 <OTM8009A_Init+0x30c>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f000 ff1b 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80008f6:	498d      	ldr	r1, [pc, #564]	; (8000b2c <OTM8009A_Init+0x384>)
 80008f8:	2006      	movs	r0, #6
 80008fa:	f000 ff17 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80008fe:	498c      	ldr	r1, [pc, #560]	; (8000b30 <OTM8009A_Init+0x388>)
 8000900:	2000      	movs	r0, #0
 8000902:	f000 ff13 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8000906:	498b      	ldr	r1, [pc, #556]	; (8000b34 <OTM8009A_Init+0x38c>)
 8000908:	200e      	movs	r0, #14
 800090a:	f000 ff0f 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800090e:	498a      	ldr	r1, [pc, #552]	; (8000b38 <OTM8009A_Init+0x390>)
 8000910:	2000      	movs	r0, #0
 8000912:	f000 ff0b 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8000916:	4989      	ldr	r1, [pc, #548]	; (8000b3c <OTM8009A_Init+0x394>)
 8000918:	200e      	movs	r0, #14
 800091a:	f000 ff07 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800091e:	4988      	ldr	r1, [pc, #544]	; (8000b40 <OTM8009A_Init+0x398>)
 8000920:	2000      	movs	r0, #0
 8000922:	f000 ff03 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8000926:	4987      	ldr	r1, [pc, #540]	; (8000b44 <OTM8009A_Init+0x39c>)
 8000928:	200a      	movs	r0, #10
 800092a:	f000 feff 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800092e:	4986      	ldr	r1, [pc, #536]	; (8000b48 <OTM8009A_Init+0x3a0>)
 8000930:	2000      	movs	r0, #0
 8000932:	f000 fefb 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8000936:	4985      	ldr	r1, [pc, #532]	; (8000b4c <OTM8009A_Init+0x3a4>)
 8000938:	2000      	movs	r0, #0
 800093a:	f000 fef7 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800093e:	495d      	ldr	r1, [pc, #372]	; (8000ab4 <OTM8009A_Init+0x30c>)
 8000940:	2000      	movs	r0, #0
 8000942:	f000 fef3 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8000946:	4982      	ldr	r1, [pc, #520]	; (8000b50 <OTM8009A_Init+0x3a8>)
 8000948:	200a      	movs	r0, #10
 800094a:	f000 feef 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800094e:	4981      	ldr	r1, [pc, #516]	; (8000b54 <OTM8009A_Init+0x3ac>)
 8000950:	2000      	movs	r0, #0
 8000952:	f000 feeb 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8000956:	4980      	ldr	r1, [pc, #512]	; (8000b58 <OTM8009A_Init+0x3b0>)
 8000958:	200f      	movs	r0, #15
 800095a:	f000 fee7 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800095e:	4974      	ldr	r1, [pc, #464]	; (8000b30 <OTM8009A_Init+0x388>)
 8000960:	2000      	movs	r0, #0
 8000962:	f000 fee3 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000966:	497d      	ldr	r1, [pc, #500]	; (8000b5c <OTM8009A_Init+0x3b4>)
 8000968:	200f      	movs	r0, #15
 800096a:	f000 fedf 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800096e:	4972      	ldr	r1, [pc, #456]	; (8000b38 <OTM8009A_Init+0x390>)
 8000970:	2000      	movs	r0, #0
 8000972:	f000 fedb 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000976:	497a      	ldr	r1, [pc, #488]	; (8000b60 <OTM8009A_Init+0x3b8>)
 8000978:	200a      	movs	r0, #10
 800097a:	f000 fed7 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800097e:	4970      	ldr	r1, [pc, #448]	; (8000b40 <OTM8009A_Init+0x398>)
 8000980:	2000      	movs	r0, #0
 8000982:	f000 fed3 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000986:	4977      	ldr	r1, [pc, #476]	; (8000b64 <OTM8009A_Init+0x3bc>)
 8000988:	200f      	movs	r0, #15
 800098a:	f000 fecf 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800098e:	496e      	ldr	r1, [pc, #440]	; (8000b48 <OTM8009A_Init+0x3a0>)
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fecb 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000996:	4974      	ldr	r1, [pc, #464]	; (8000b68 <OTM8009A_Init+0x3c0>)
 8000998:	200f      	movs	r0, #15
 800099a:	f000 fec7 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 800099e:	4973      	ldr	r1, [pc, #460]	; (8000b6c <OTM8009A_Init+0x3c4>)
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 fec3 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80009a6:	4972      	ldr	r1, [pc, #456]	; (8000b70 <OTM8009A_Init+0x3c8>)
 80009a8:	200a      	movs	r0, #10
 80009aa:	f000 febf 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 80009ae:	4971      	ldr	r1, [pc, #452]	; (8000b74 <OTM8009A_Init+0x3cc>)
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 febb 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 80009b6:	4970      	ldr	r1, [pc, #448]	; (8000b78 <OTM8009A_Init+0x3d0>)
 80009b8:	200a      	movs	r0, #10
 80009ba:	f000 feb7 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009be:	493d      	ldr	r1, [pc, #244]	; (8000ab4 <OTM8009A_Init+0x30c>)
 80009c0:	2000      	movs	r0, #0
 80009c2:	f000 feb3 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 80009c6:	496d      	ldr	r1, [pc, #436]	; (8000b7c <OTM8009A_Init+0x3d4>)
 80009c8:	200a      	movs	r0, #10
 80009ca:	f000 feaf 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80009ce:	4961      	ldr	r1, [pc, #388]	; (8000b54 <OTM8009A_Init+0x3ac>)
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 feab 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 80009d6:	496a      	ldr	r1, [pc, #424]	; (8000b80 <OTM8009A_Init+0x3d8>)
 80009d8:	200f      	movs	r0, #15
 80009da:	f000 fea7 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009de:	4954      	ldr	r1, [pc, #336]	; (8000b30 <OTM8009A_Init+0x388>)
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 fea3 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80009e6:	4967      	ldr	r1, [pc, #412]	; (8000b84 <OTM8009A_Init+0x3dc>)
 80009e8:	200f      	movs	r0, #15
 80009ea:	f000 fe9f 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009ee:	4952      	ldr	r1, [pc, #328]	; (8000b38 <OTM8009A_Init+0x390>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f000 fe9b 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80009f6:	4964      	ldr	r1, [pc, #400]	; (8000b88 <OTM8009A_Init+0x3e0>)
 80009f8:	200a      	movs	r0, #10
 80009fa:	f000 fe97 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009fe:	4950      	ldr	r1, [pc, #320]	; (8000b40 <OTM8009A_Init+0x398>)
 8000a00:	2000      	movs	r0, #0
 8000a02:	f000 fe93 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000a06:	4961      	ldr	r1, [pc, #388]	; (8000b8c <OTM8009A_Init+0x3e4>)
 8000a08:	200f      	movs	r0, #15
 8000a0a:	f000 fe8f 	bl	800172c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a0e:	494e      	ldr	r1, [pc, #312]	; (8000b48 <OTM8009A_Init+0x3a0>)
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 fe8b 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000a16:	495e      	ldr	r1, [pc, #376]	; (8000b90 <OTM8009A_Init+0x3e8>)
 8000a18:	200f      	movs	r0, #15
 8000a1a:	f000 fe87 	bl	800172c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000a1e:	4931      	ldr	r1, [pc, #196]	; (8000ae4 <OTM8009A_Init+0x33c>)
 8000a20:	2000      	movs	r0, #0
 8000a22:	f000 fe83 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000a26:	495b      	ldr	r1, [pc, #364]	; (8000b94 <OTM8009A_Init+0x3ec>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 fe7f 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000a2e:	495a      	ldr	r1, [pc, #360]	; (8000b98 <OTM8009A_Init+0x3f0>)
 8000a30:	2000      	movs	r0, #0
 8000a32:	f000 fe7b 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000a36:	4959      	ldr	r1, [pc, #356]	; (8000b9c <OTM8009A_Init+0x3f4>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f000 fe77 	bl	800172c <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000a3e:	4958      	ldr	r1, [pc, #352]	; (8000ba0 <OTM8009A_Init+0x3f8>)
 8000a40:	2000      	movs	r0, #0
 8000a42:	f000 fe73 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000a46:	4957      	ldr	r1, [pc, #348]	; (8000ba4 <OTM8009A_Init+0x3fc>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 fe6f 	bl	800172c <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000a4e:	4917      	ldr	r1, [pc, #92]	; (8000aac <OTM8009A_Init+0x304>)
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 fe6b 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000a56:	4954      	ldr	r1, [pc, #336]	; (8000ba8 <OTM8009A_Init+0x400>)
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 fe67 	bl	800172c <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000a5e:	4913      	ldr	r1, [pc, #76]	; (8000aac <OTM8009A_Init+0x304>)
 8000a60:	2000      	movs	r0, #0
 8000a62:	f000 fe63 	bl	800172c <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000a66:	4911      	ldr	r1, [pc, #68]	; (8000aac <OTM8009A_Init+0x304>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f000 fe5f 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000a6e:	494f      	ldr	r1, [pc, #316]	; (8000bac <OTM8009A_Init+0x404>)
 8000a70:	2010      	movs	r0, #16
 8000a72:	f000 fe5b 	bl	800172c <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000a76:	490d      	ldr	r1, [pc, #52]	; (8000aac <OTM8009A_Init+0x304>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f000 fe57 	bl	800172c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000a7e:	494c      	ldr	r1, [pc, #304]	; (8000bb0 <OTM8009A_Init+0x408>)
 8000a80:	2010      	movs	r0, #16
 8000a82:	f000 fe53 	bl	800172c <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000a86:	494b      	ldr	r1, [pc, #300]	; (8000bb4 <OTM8009A_Init+0x40c>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f000 fe4f 	bl	800172c <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000a8e:	2078      	movs	r0, #120	; 0x78
 8000a90:	f000 faa4 	bl	8000fdc <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 8090 	beq.w	8000bbc <OTM8009A_Init+0x414>
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d000      	beq.n	8000aa2 <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000aa0:	e091      	b.n	8000bc6 <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000aa2:	4945      	ldr	r1, [pc, #276]	; (8000bb8 <OTM8009A_Init+0x410>)
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 fe41 	bl	800172c <DSI_IO_WriteCmd>
    break;
 8000aaa:	e08c      	b.n	8000bc6 <OTM8009A_Init+0x41e>
 8000aac:	080086b4 	.word	0x080086b4
 8000ab0:	0800856c 	.word	0x0800856c
 8000ab4:	080086b8 	.word	0x080086b8
 8000ab8:	08008570 	.word	0x08008570
 8000abc:	080086bc 	.word	0x080086bc
 8000ac0:	080086c0 	.word	0x080086c0
 8000ac4:	080086c4 	.word	0x080086c4
 8000ac8:	080086c8 	.word	0x080086c8
 8000acc:	080086cc 	.word	0x080086cc
 8000ad0:	080086d0 	.word	0x080086d0
 8000ad4:	080086d4 	.word	0x080086d4
 8000ad8:	080086d8 	.word	0x080086d8
 8000adc:	080086dc 	.word	0x080086dc
 8000ae0:	080086e0 	.word	0x080086e0
 8000ae4:	080086e4 	.word	0x080086e4
 8000ae8:	080086e8 	.word	0x080086e8
 8000aec:	080086ec 	.word	0x080086ec
 8000af0:	080086f0 	.word	0x080086f0
 8000af4:	080086f4 	.word	0x080086f4
 8000af8:	080086f8 	.word	0x080086f8
 8000afc:	080086fc 	.word	0x080086fc
 8000b00:	0800859c 	.word	0x0800859c
 8000b04:	08008700 	.word	0x08008700
 8000b08:	08008704 	.word	0x08008704
 8000b0c:	08008708 	.word	0x08008708
 8000b10:	0800870c 	.word	0x0800870c
 8000b14:	08008710 	.word	0x08008710
 8000b18:	08008714 	.word	0x08008714
 8000b1c:	08008718 	.word	0x08008718
 8000b20:	0800871c 	.word	0x0800871c
 8000b24:	08008720 	.word	0x08008720
 8000b28:	080085a0 	.word	0x080085a0
 8000b2c:	080085a4 	.word	0x080085a4
 8000b30:	08008724 	.word	0x08008724
 8000b34:	080085ac 	.word	0x080085ac
 8000b38:	08008728 	.word	0x08008728
 8000b3c:	080085bc 	.word	0x080085bc
 8000b40:	0800872c 	.word	0x0800872c
 8000b44:	080085cc 	.word	0x080085cc
 8000b48:	08008730 	.word	0x08008730
 8000b4c:	08008768 	.word	0x08008768
 8000b50:	080085d8 	.word	0x080085d8
 8000b54:	08008734 	.word	0x08008734
 8000b58:	080085e4 	.word	0x080085e4
 8000b5c:	080085f4 	.word	0x080085f4
 8000b60:	08008604 	.word	0x08008604
 8000b64:	08008610 	.word	0x08008610
 8000b68:	08008620 	.word	0x08008620
 8000b6c:	08008738 	.word	0x08008738
 8000b70:	08008630 	.word	0x08008630
 8000b74:	0800873c 	.word	0x0800873c
 8000b78:	0800863c 	.word	0x0800863c
 8000b7c:	08008648 	.word	0x08008648
 8000b80:	08008654 	.word	0x08008654
 8000b84:	08008664 	.word	0x08008664
 8000b88:	08008674 	.word	0x08008674
 8000b8c:	08008680 	.word	0x08008680
 8000b90:	08008690 	.word	0x08008690
 8000b94:	0800876c 	.word	0x0800876c
 8000b98:	08008770 	.word	0x08008770
 8000b9c:	08008774 	.word	0x08008774
 8000ba0:	08008778 	.word	0x08008778
 8000ba4:	0800877c 	.word	0x0800877c
 8000ba8:	080086a0 	.word	0x080086a0
 8000bac:	08008574 	.word	0x08008574
 8000bb0:	08008588 	.word	0x08008588
 8000bb4:	08008740 	.word	0x08008740
 8000bb8:	08008744 	.word	0x08008744
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000bbc:	491a      	ldr	r1, [pc, #104]	; (8000c28 <OTM8009A_Init+0x480>)
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 fdb4 	bl	800172c <DSI_IO_WriteCmd>
    break;
 8000bc4:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d10b      	bne.n	8000be4 <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000bcc:	4917      	ldr	r1, [pc, #92]	; (8000c2c <OTM8009A_Init+0x484>)
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 fdac 	bl	800172c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000bd4:	4916      	ldr	r1, [pc, #88]	; (8000c30 <OTM8009A_Init+0x488>)
 8000bd6:	2004      	movs	r0, #4
 8000bd8:	f000 fda8 	bl	800172c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000bdc:	4915      	ldr	r1, [pc, #84]	; (8000c34 <OTM8009A_Init+0x48c>)
 8000bde:	2004      	movs	r0, #4
 8000be0:	f000 fda4 	bl	800172c <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000be4:	4914      	ldr	r1, [pc, #80]	; (8000c38 <OTM8009A_Init+0x490>)
 8000be6:	2000      	movs	r0, #0
 8000be8:	f000 fda0 	bl	800172c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000bec:	4913      	ldr	r1, [pc, #76]	; (8000c3c <OTM8009A_Init+0x494>)
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 fd9c 	bl	800172c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000bf4:	4912      	ldr	r1, [pc, #72]	; (8000c40 <OTM8009A_Init+0x498>)
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 fd98 	bl	800172c <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000bfc:	4911      	ldr	r1, [pc, #68]	; (8000c44 <OTM8009A_Init+0x49c>)
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 fd94 	bl	800172c <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000c04:	4910      	ldr	r1, [pc, #64]	; (8000c48 <OTM8009A_Init+0x4a0>)
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 fd90 	bl	800172c <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000c0c:	490f      	ldr	r1, [pc, #60]	; (8000c4c <OTM8009A_Init+0x4a4>)
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 fd8c 	bl	800172c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000c14:	490e      	ldr	r1, [pc, #56]	; (8000c50 <OTM8009A_Init+0x4a8>)
 8000c16:	2000      	movs	r0, #0
 8000c18:	f000 fd88 	bl	800172c <DSI_IO_WriteCmd>

  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08008748 	.word	0x08008748
 8000c2c:	0800874c 	.word	0x0800874c
 8000c30:	080086a4 	.word	0x080086a4
 8000c34:	080086ac 	.word	0x080086ac
 8000c38:	08008750 	.word	0x08008750
 8000c3c:	08008754 	.word	0x08008754
 8000c40:	08008758 	.word	0x08008758
 8000c44:	0800875c 	.word	0x0800875c
 8000c48:	08008760 	.word	0x08008760
 8000c4c:	080086b4 	.word	0x080086b4
 8000c50:	08008764 	.word	0x08008764

08000c54 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a58      	ldr	r2, [pc, #352]	; (8000dc0 <I2Cx_MspInit+0x16c>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d15b      	bne.n	8000d1c <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000c64:	4b57      	ldr	r3, [pc, #348]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	4a56      	ldr	r2, [pc, #344]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000c6a:	f043 0308 	orr.w	r3, r3, #8
 8000c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c70:	4b54      	ldr	r3, [pc, #336]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	f003 0308 	and.w	r3, r3, #8
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000c7c:	4b51      	ldr	r3, [pc, #324]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	4a50      	ldr	r2, [pc, #320]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	6313      	str	r3, [r2, #48]	; 0x30
 8000c88:	4b4e      	ldr	r3, [pc, #312]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000c9a:	2312      	movs	r3, #18
 8000c9c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4845      	ldr	r0, [pc, #276]	; (8000dc8 <I2Cx_MspInit+0x174>)
 8000cb2:	f002 fffd 	bl	8003cb0 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000cba:	230b      	movs	r3, #11
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4841      	ldr	r0, [pc, #260]	; (8000dcc <I2Cx_MspInit+0x178>)
 8000cc6:	f002 fff3 	bl	8003cb0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000cca:	4b3e      	ldr	r3, [pc, #248]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a3d      	ldr	r2, [pc, #244]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000cd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b3b      	ldr	r3, [pc, #236]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000ce2:	4b38      	ldr	r3, [pc, #224]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	4a37      	ldr	r2, [pc, #220]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000ce8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cec:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000cee:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000cf0:	6a1b      	ldr	r3, [r3, #32]
 8000cf2:	4a34      	ldr	r2, [pc, #208]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000cf8:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	210f      	movs	r1, #15
 8000cfe:	205f      	movs	r0, #95	; 0x5f
 8000d00:	f001 f9ee 	bl	80020e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000d04:	205f      	movs	r0, #95	; 0x5f
 8000d06:	f001 fa07 	bl	8002118 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	210f      	movs	r1, #15
 8000d0e:	2060      	movs	r0, #96	; 0x60
 8000d10:	f001 f9e6 	bl	80020e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000d14:	2060      	movs	r0, #96	; 0x60
 8000d16:	f001 f9ff 	bl	8002118 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000d1a:	e04d      	b.n	8000db8 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000d1c:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a28      	ldr	r2, [pc, #160]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d38:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000d3a:	2312      	movs	r3, #18
 8000d3c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000d42:	2302      	movs	r3, #2
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000d46:	2304      	movs	r3, #4
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481e      	ldr	r0, [pc, #120]	; (8000dcc <I2Cx_MspInit+0x178>)
 8000d52:	f002 ffad 	bl	8003cb0 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000d56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	481a      	ldr	r0, [pc, #104]	; (8000dcc <I2Cx_MspInit+0x178>)
 8000d64:	f002 ffa4 	bl	8003cb0 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000d6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d72:	6413      	str	r3, [r2, #64]	; 0x40
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000d82:	6a1b      	ldr	r3, [r3, #32]
 8000d84:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000d86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d8a:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000d8e:	6a1b      	ldr	r3, [r3, #32]
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <I2Cx_MspInit+0x170>)
 8000d92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000d96:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	201f      	movs	r0, #31
 8000d9e:	f001 f99f 	bl	80020e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000da2:	201f      	movs	r0, #31
 8000da4:	f001 f9b8 	bl	8002118 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	210f      	movs	r1, #15
 8000dac:	2020      	movs	r0, #32
 8000dae:	f001 f997 	bl	80020e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000db2:	2020      	movs	r0, #32
 8000db4:	f001 f9b0 	bl	8002118 <HAL_NVIC_EnableIRQ>
}
 8000db8:	bf00      	nop
 8000dba:	3730      	adds	r7, #48	; 0x30
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000064 	.word	0x20000064
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020c00 	.word	0x40020c00
 8000dcc:	40020400 	.word	0x40020400

08000dd0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f003 fd49 	bl	8004870 <HAL_I2C_GetState>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d125      	bne.n	8000e30 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <I2Cx_Init+0x68>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d103      	bne.n	8000df4 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <I2Cx_Init+0x6c>)
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e002      	b.n	8000dfa <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <I2Cx_Init+0x70>)
 8000df8:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a11      	ldr	r2, [pc, #68]	; (8000e44 <I2Cx_Init+0x74>)
 8000dfe:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff15 	bl	8000c54 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f003 fa32 	bl	8004294 <HAL_I2C_Init>
  }
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000064 	.word	0x20000064
 8000e3c:	40006000 	.word	0x40006000
 8000e40:	40005400 	.word	0x40005400
 8000e44:	40912732 	.word	0x40912732

08000e48 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af04      	add	r7, sp, #16
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	4608      	mov	r0, r1
 8000e52:	4611      	mov	r1, r2
 8000e54:	461a      	mov	r2, r3
 8000e56:	4603      	mov	r3, r0
 8000e58:	72fb      	strb	r3, [r7, #11]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	813b      	strh	r3, [r7, #8]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000e66:	7afb      	ldrb	r3, [r7, #11]
 8000e68:	b299      	uxth	r1, r3
 8000e6a:	88f8      	ldrh	r0, [r7, #6]
 8000e6c:	893a      	ldrh	r2, [r7, #8]
 8000e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e72:	9302      	str	r3, [sp, #8]
 8000e74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	6a3b      	ldr	r3, [r7, #32]
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	f003 fbdc 	bl	800463c <HAL_I2C_Mem_Read>
 8000e84:	4603      	mov	r3, r0
 8000e86:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000e88:	7dfb      	ldrb	r3, [r7, #23]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d004      	beq.n	8000e98 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8000e8e:	7afb      	ldrb	r3, [r7, #11]
 8000e90:	4619      	mov	r1, r3
 8000e92:	68f8      	ldr	r0, [r7, #12]
 8000e94:	f000 f832 	bl	8000efc <I2Cx_Error>
  }
  return status;
 8000e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b08a      	sub	sp, #40	; 0x28
 8000ea6:	af04      	add	r7, sp, #16
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	4608      	mov	r0, r1
 8000eac:	4611      	mov	r1, r2
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	72fb      	strb	r3, [r7, #11]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	813b      	strh	r3, [r7, #8]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000ec0:	7afb      	ldrb	r3, [r7, #11]
 8000ec2:	b299      	uxth	r1, r3
 8000ec4:	88f8      	ldrh	r0, [r7, #6]
 8000ec6:	893a      	ldrh	r2, [r7, #8]
 8000ec8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ecc:	9302      	str	r3, [sp, #8]
 8000ece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ed0:	9301      	str	r3, [sp, #4]
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f003 fa9b 	bl	8004414 <HAL_I2C_Mem_Write>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d004      	beq.n	8000ef2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000ee8:	7afb      	ldrb	r3, [r7, #11]
 8000eea:	4619      	mov	r1, r3
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 f805 	bl	8000efc <I2Cx_Error>
  }
  return status;
 8000ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f003 fa53 	bl	80043b4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff5e 	bl	8000dd0 <I2Cx_Init>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <TS_IO_Init+0x10>)
 8000f22:	f7ff ff55 	bl	8000dd0 <I2Cx_Init>
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000064 	.word	0x20000064

08000f30 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	79f9      	ldrb	r1, [r7, #7]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	1d7b      	adds	r3, r7, #5
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2301      	movs	r3, #1
 8000f52:	4803      	ldr	r0, [pc, #12]	; (8000f60 <TS_IO_Write+0x30>)
 8000f54:	f7ff ffa5 	bl	8000ea2 <I2Cx_WriteMultiple>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000064 	.word	0x20000064

08000f64 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af02      	add	r7, sp, #8
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	71fb      	strb	r3, [r7, #7]
 8000f70:	4613      	mov	r3, r2
 8000f72:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000f78:	79bb      	ldrb	r3, [r7, #6]
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	79f9      	ldrb	r1, [r7, #7]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	f107 030f 	add.w	r3, r7, #15
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	4804      	ldr	r0, [pc, #16]	; (8000f9c <TS_IO_Read+0x38>)
 8000f8c:	f7ff ff5c 	bl	8000e48 <I2Cx_ReadMultiple>

  return read_value;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000064 	.word	0x20000064

08000fa0 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	603a      	str	r2, [r7, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	71bb      	strb	r3, [r7, #6]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	79f9      	ldrb	r1, [r7, #7]
 8000fbc:	88bb      	ldrh	r3, [r7, #4]
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <TS_IO_ReadMultiple+0x38>)
 8000fc8:	f7ff ff3e 	bl	8000e48 <I2Cx_ReadMultiple>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	b29b      	uxth	r3, r3
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000064 	.word	0x20000064

08000fdc <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 ffa1 	bl	8001f2c <HAL_Delay>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f000 f804 	bl	8001004 <BSP_LCD_InitEx>
 8000ffc:	4603      	mov	r3, r0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b090      	sub	sp, #64	; 0x40
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 800100e:	f646 3325 	movw	r3, #27429	; 0x6b25
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 800101c:	f000 f936 	bl	800128c <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8001020:	f000 fbae 	bl	8001780 <LCD_IO_GetID>
 8001024:	4603      	mov	r3, r0
 8001026:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8001028:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800102a:	2b11      	cmp	r3, #17
 800102c:	d001      	beq.n	8001032 <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 800102e:	2301      	movs	r3, #1
 8001030:	e113      	b.n	800125a <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8001032:	f000 fbad 	bl	8001790 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8001036:	4b8b      	ldr	r3, [pc, #556]	; (8001264 <BSP_LCD_InitEx+0x260>)
 8001038:	4a8b      	ldr	r2, [pc, #556]	; (8001268 <BSP_LCD_InitEx+0x264>)
 800103a:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 800103c:	4889      	ldr	r0, [pc, #548]	; (8001264 <BSP_LCD_InitEx+0x260>)
 800103e:	f001 ff29 	bl	8002e94 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8001042:	2364      	movs	r3, #100	; 0x64
 8001044:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8001046:	2305      	movs	r3, #5
 8001048:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 800104e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001052:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001054:	4b83      	ldr	r3, [pc, #524]	; (8001264 <BSP_LCD_InitEx+0x260>)
 8001056:	2201      	movs	r2, #1
 8001058:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 800105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	4a83      	ldr	r2, [pc, #524]	; (800126c <BSP_LCD_InitEx+0x268>)
 8001060:	fba2 2303 	umull	r2, r3, r2, r3
 8001064:	0a9b      	lsrs	r3, r3, #10
 8001066:	4a7f      	ldr	r2, [pc, #508]	; (8001264 <BSP_LCD_InitEx+0x260>)
 8001068:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	4619      	mov	r1, r3
 8001070:	487c      	ldr	r0, [pc, #496]	; (8001264 <BSP_LCD_InitEx+0x260>)
 8001072:	f001 fdf5 	bl	8002c60 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d108      	bne.n	800108e <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 800107c:	4b7c      	ldr	r3, [pc, #496]	; (8001270 <BSP_LCD_InitEx+0x26c>)
 800107e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001082:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8001084:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <BSP_LCD_InitEx+0x270>)
 8001086:	f44f 7248 	mov.w	r2, #800	; 0x320
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	e007      	b.n	800109e <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 800108e:	4b78      	ldr	r3, [pc, #480]	; (8001270 <BSP_LCD_InitEx+0x26c>)
 8001090:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001094:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8001096:	4b77      	ldr	r3, [pc, #476]	; (8001274 <BSP_LCD_InitEx+0x270>)
 8001098:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800109c:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 800109e:	4b74      	ldr	r3, [pc, #464]	; (8001270 <BSP_LCD_InitEx+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 80010a4:	4b73      	ldr	r3, [pc, #460]	; (8001274 <BSP_LCD_InitEx+0x270>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 80010aa:	2301      	movs	r3, #1
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 80010ae:	230f      	movs	r3, #15
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 80010b2:	2310      	movs	r3, #16
 80010b4:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 80010b6:	2302      	movs	r3, #2
 80010b8:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 80010ba:	2322      	movs	r3, #34	; 0x22
 80010bc:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 80010be:	2322      	movs	r3, #34	; 0x22
 80010c0:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80010c2:	4b6d      	ldr	r3, [pc, #436]	; (8001278 <BSP_LCD_InitEx+0x274>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80010c8:	4b6b      	ldr	r3, [pc, #428]	; (8001278 <BSP_LCD_InitEx+0x274>)
 80010ca:	2205      	movs	r2, #5
 80010cc:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80010ce:	4b6a      	ldr	r3, [pc, #424]	; (8001278 <BSP_LCD_InitEx+0x274>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80010d4:	4b68      	ldr	r3, [pc, #416]	; (8001278 <BSP_LCD_InitEx+0x274>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80010da:	4b67      	ldr	r3, [pc, #412]	; (8001278 <BSP_LCD_InitEx+0x274>)
 80010dc:	2200      	movs	r2, #0
 80010de:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80010e0:	4b65      	ldr	r3, [pc, #404]	; (8001278 <BSP_LCD_InitEx+0x274>)
 80010e2:	2202      	movs	r2, #2
 80010e4:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80010e6:	4b64      	ldr	r3, [pc, #400]	; (8001278 <BSP_LCD_InitEx+0x274>)
 80010e8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010ec:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80010ee:	4b62      	ldr	r3, [pc, #392]	; (8001278 <BSP_LCD_InitEx+0x274>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80010f4:	4a60      	ldr	r2, [pc, #384]	; (8001278 <BSP_LCD_InitEx+0x274>)
 80010f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f8:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010fe:	fb02 f203 	mul.w	r2, r2, r3
 8001102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001104:	fbb2 f3f3 	udiv	r3, r2, r3
 8001108:	4a5b      	ldr	r2, [pc, #364]	; (8001278 <BSP_LCD_InitEx+0x274>)
 800110a:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001110:	fb02 f203 	mul.w	r2, r2, r3
 8001114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4a57      	ldr	r2, [pc, #348]	; (8001278 <BSP_LCD_InitEx+0x274>)
 800111c:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 800111e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	441a      	add	r2, r3
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	441a      	add	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	4413      	add	r3, r2
 800112c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800112e:	fb02 f203 	mul.w	r2, r2, r3
 8001132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001134:	fbb2 f3f3 	udiv	r3, r2, r3
 8001138:	4a4f      	ldr	r2, [pc, #316]	; (8001278 <BSP_LCD_InitEx+0x274>)
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 800113c:	4a4e      	ldr	r2, [pc, #312]	; (8001278 <BSP_LCD_InitEx+0x274>)
 800113e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001140:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8001142:	4a4d      	ldr	r2, [pc, #308]	; (8001278 <BSP_LCD_InitEx+0x274>)
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001148:	4a4b      	ldr	r2, [pc, #300]	; (8001278 <BSP_LCD_InitEx+0x274>)
 800114a:	6a3b      	ldr	r3, [r7, #32]
 800114c:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 800114e:	4a4a      	ldr	r2, [pc, #296]	; (8001278 <BSP_LCD_InitEx+0x274>)
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8001154:	4b48      	ldr	r3, [pc, #288]	; (8001278 <BSP_LCD_InitEx+0x274>)
 8001156:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800115a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 800115c:	4b46      	ldr	r3, [pc, #280]	; (8001278 <BSP_LCD_InitEx+0x274>)
 800115e:	2210      	movs	r2, #16
 8001160:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8001162:	4b45      	ldr	r3, [pc, #276]	; (8001278 <BSP_LCD_InitEx+0x274>)
 8001164:	2200      	movs	r2, #0
 8001166:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001168:	4b43      	ldr	r3, [pc, #268]	; (8001278 <BSP_LCD_InitEx+0x274>)
 800116a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800116e:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001170:	4b41      	ldr	r3, [pc, #260]	; (8001278 <BSP_LCD_InitEx+0x274>)
 8001172:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001176:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001178:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <BSP_LCD_InitEx+0x274>)
 800117a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800117e:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001180:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <BSP_LCD_InitEx+0x274>)
 8001182:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001186:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001188:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <BSP_LCD_InitEx+0x274>)
 800118a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800118e:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001190:	4b39      	ldr	r3, [pc, #228]	; (8001278 <BSP_LCD_InitEx+0x274>)
 8001192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001196:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001198:	4937      	ldr	r1, [pc, #220]	; (8001278 <BSP_LCD_InitEx+0x274>)
 800119a:	4832      	ldr	r0, [pc, #200]	; (8001264 <BSP_LCD_InitEx+0x260>)
 800119c:	f001 ffd2 	bl	8003144 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	4a35      	ldr	r2, [pc, #212]	; (800127c <BSP_LCD_InitEx+0x278>)
 80011a6:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80011a8:	69fa      	ldr	r2, [r7, #28]
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4413      	add	r3, r2
 80011ae:	3b01      	subs	r3, #1
 80011b0:	4a32      	ldr	r2, [pc, #200]	; (800127c <BSP_LCD_InitEx+0x278>)
 80011b2:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80011b4:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <BSP_LCD_InitEx+0x26c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	441a      	add	r2, r3
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	4413      	add	r3, r2
 80011c0:	3b01      	subs	r3, #1
 80011c2:	4a2e      	ldr	r2, [pc, #184]	; (800127c <BSP_LCD_InitEx+0x278>)
 80011c4:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <BSP_LCD_InitEx+0x26c>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	441a      	add	r2, r3
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	441a      	add	r2, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	4413      	add	r3, r2
 80011d6:	3b01      	subs	r3, #1
 80011d8:	4a28      	ldr	r2, [pc, #160]	; (800127c <BSP_LCD_InitEx+0x278>)
 80011da:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80011dc:	4b24      	ldr	r3, [pc, #144]	; (8001270 <BSP_LCD_InitEx+0x26c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a26      	ldr	r2, [pc, #152]	; (800127c <BSP_LCD_InitEx+0x278>)
 80011e2:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80011e4:	4b23      	ldr	r3, [pc, #140]	; (8001274 <BSP_LCD_InitEx+0x270>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a24      	ldr	r2, [pc, #144]	; (800127c <BSP_LCD_InitEx+0x278>)
 80011ea:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <BSP_LCD_InitEx+0x27c>)
 80011ee:	2208      	movs	r2, #8
 80011f0:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <BSP_LCD_InitEx+0x27c>)
 80011f4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80011f8:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <BSP_LCD_InitEx+0x27c>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <BSP_LCD_InitEx+0x27c>)
 8001202:	2200      	movs	r2, #0
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001206:	481e      	ldr	r0, [pc, #120]	; (8001280 <BSP_LCD_InitEx+0x27c>)
 8001208:	f004 fe6a 	bl	8005ee0 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <BSP_LCD_InitEx+0x278>)
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <BSP_LCD_InitEx+0x278>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <BSP_LCD_InitEx+0x278>)
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <BSP_LCD_InitEx+0x278>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <BSP_LCD_InitEx+0x278>)
 800122c:	4a15      	ldr	r2, [pc, #84]	; (8001284 <BSP_LCD_InitEx+0x280>)
 800122e:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8001230:	4911      	ldr	r1, [pc, #68]	; (8001278 <BSP_LCD_InitEx+0x274>)
 8001232:	4812      	ldr	r0, [pc, #72]	; (800127c <BSP_LCD_InitEx+0x278>)
 8001234:	f004 f886 	bl	8005344 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8001238:	4810      	ldr	r0, [pc, #64]	; (800127c <BSP_LCD_InitEx+0x278>)
 800123a:	f003 fddb 	bl	8004df4 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 800123e:	4809      	ldr	r0, [pc, #36]	; (8001264 <BSP_LCD_InitEx+0x260>)
 8001240:	f002 fc12 	bl	8003a68 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001244:	f000 fc24 	bl	8001a90 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001248:	480f      	ldr	r0, [pc, #60]	; (8001288 <BSP_LCD_InitEx+0x284>)
 800124a:	f000 f911 	bl	8001470 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	4619      	mov	r1, r3
 8001252:	2000      	movs	r0, #0
 8001254:	f7ff faa8 	bl	80007a8 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3740      	adds	r7, #64	; 0x40
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000360 	.word	0x20000360
 8001268:	40016c00 	.word	0x40016c00
 800126c:	43215e57 	.word	0x43215e57
 8001270:	20000030 	.word	0x20000030
 8001274:	20000034 	.word	0x20000034
 8001278:	200000b0 	.word	0x200000b0
 800127c:	200002b8 	.word	0x200002b8
 8001280:	20000138 	.word	0x20000138
 8001284:	40016800 	.word	0x40016800
 8001288:	20000028 	.word	0x20000028

0800128c <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <BSP_LCD_Reset+0x68>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <BSP_LCD_Reset+0x68>)
 8001298:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <BSP_LCD_Reset+0x68>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 80012aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012ae:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <BSP_LCD_Reset+0x6c>)
 80012c2:	f002 fcf5 	bl	8003cb0 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012cc:	480a      	ldr	r0, [pc, #40]	; (80012f8 <BSP_LCD_Reset+0x6c>)
 80012ce:	f002 ffa3 	bl	8004218 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 80012d2:	2014      	movs	r0, #20
 80012d4:	f000 fe2a 	bl	8001f2c <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <BSP_LCD_Reset+0x6c>)
 80012e0:	f002 ff9a 	bl	8004218 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80012e4:	200a      	movs	r0, #10
 80012e6:	f000 fe21 	bl	8001f2c <HAL_Delay>
}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40022400 	.word	0x40022400

080012fc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <BSP_LCD_GetXSize+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000030 	.word	0x20000030

08001314 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <BSP_LCD_GetYSize+0x14>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000034 	.word	0x20000034

0800132c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b090      	sub	sp, #64	; 0x40
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800133c:	f7ff ffde 	bl	80012fc <BSP_LCD_GetXSize>
 8001340:	4603      	mov	r3, r0
 8001342:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001348:	f7ff ffe4 	bl	8001314 <BSP_LCD_GetYSize>
 800134c:	4603      	mov	r3, r0
 800134e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001358:	23ff      	movs	r3, #255	; 0xff
 800135a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001372:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001378:	2307      	movs	r3, #7
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800137c:	f7ff ffbe 	bl	80012fc <BSP_LCD_GetXSize>
 8001380:	4603      	mov	r3, r0
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001384:	f7ff ffc6 	bl	8001314 <BSP_LCD_GetYSize>
 8001388:	4603      	mov	r3, r0
 800138a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 800138c:	88fa      	ldrh	r2, [r7, #6]
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4619      	mov	r1, r3
 8001394:	4812      	ldr	r0, [pc, #72]	; (80013e0 <BSP_LCD_LayerDefaultInit+0xb4>)
 8001396:	f003 fdfd 	bl	8004f94 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800139a:	88fa      	ldrh	r2, [r7, #6]
 800139c:	4911      	ldr	r1, [pc, #68]	; (80013e4 <BSP_LCD_LayerDefaultInit+0xb8>)
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	3304      	adds	r3, #4
 80013aa:	f04f 32ff 	mov.w	r2, #4294967295
 80013ae:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80013b0:	88fa      	ldrh	r2, [r7, #6]
 80013b2:	490c      	ldr	r1, [pc, #48]	; (80013e4 <BSP_LCD_LayerDefaultInit+0xb8>)
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	3308      	adds	r3, #8
 80013c0:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80013c2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80013c4:	88fa      	ldrh	r2, [r7, #6]
 80013c6:	4907      	ldr	r1, [pc, #28]	; (80013e4 <BSP_LCD_LayerDefaultInit+0xb8>)
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80013d6:	601a      	str	r2, [r3, #0]
}
 80013d8:	bf00      	nop
 80013da:	3740      	adds	r7, #64	; 0x40
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200002b8 	.word	0x200002b8
 80013e4:	20000120 	.word	0x20000120
 80013e8:	20000028 	.word	0x20000028

080013ec <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <BSP_LCD_SelectLayer+0x1c>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6013      	str	r3, [r2, #0]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	2000011c 	.word	0x2000011c

0800140c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <BSP_LCD_SetTextColor+0x28>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <BSP_LCD_SetTextColor+0x2c>)
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	601a      	str	r2, [r3, #0]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	2000011c 	.word	0x2000011c
 8001438:	20000120 	.word	0x20000120

0800143c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <BSP_LCD_SetBackColor+0x2c>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4908      	ldr	r1, [pc, #32]	; (800146c <BSP_LCD_SetBackColor+0x30>)
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	3304      	adds	r3, #4
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	601a      	str	r2, [r3, #0]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	2000011c 	.word	0x2000011c
 800146c:	20000120 	.word	0x20000120

08001470 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <BSP_LCD_SetFont+0x2c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4908      	ldr	r1, [pc, #32]	; (80014a0 <BSP_LCD_SetFont+0x30>)
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	3308      	adds	r3, #8
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	601a      	str	r2, [r3, #0]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	2000011c 	.word	0x2000011c
 80014a0:	20000120 	.word	0x20000120

080014a4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <BSP_LCD_Clear+0x48>)
 80014ae:	681c      	ldr	r4, [r3, #0]
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <BSP_LCD_Clear+0x48>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <BSP_LCD_Clear+0x4c>)
 80014b6:	2134      	movs	r1, #52	; 0x34
 80014b8:	fb01 f303 	mul.w	r3, r1, r3
 80014bc:	4413      	add	r3, r2
 80014be:	335c      	adds	r3, #92	; 0x5c
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	461d      	mov	r5, r3
 80014c4:	f7ff ff1a 	bl	80012fc <BSP_LCD_GetXSize>
 80014c8:	4606      	mov	r6, r0
 80014ca:	f7ff ff23 	bl	8001314 <BSP_LCD_GetYSize>
 80014ce:	4602      	mov	r2, r0
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	2300      	movs	r3, #0
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	4613      	mov	r3, r2
 80014da:	4632      	mov	r2, r6
 80014dc:	4629      	mov	r1, r5
 80014de:	4620      	mov	r0, r4
 80014e0:	f000 fa9e 	bl	8001a20 <LL_FillBuffer>
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ec:	2000011c 	.word	0x2000011c
 80014f0:	200002b8 	.word	0x200002b8

080014f4 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
 80014fe:	460b      	mov	r3, r1
 8001500:	80bb      	strh	r3, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001506:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <BSP_LCD_DisplayChar+0x80>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	491b      	ldr	r1, [pc, #108]	; (8001578 <BSP_LCD_DisplayChar+0x84>)
 800150c:	4613      	mov	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	3308      	adds	r3, #8
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6819      	ldr	r1, [r3, #0]
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <BSP_LCD_DisplayChar+0x80>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4c14      	ldr	r4, [pc, #80]	; (8001578 <BSP_LCD_DisplayChar+0x84>)
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4423      	add	r3, r4
 8001532:	3308      	adds	r3, #8
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001538:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <BSP_LCD_DisplayChar+0x80>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4c0d      	ldr	r4, [pc, #52]	; (8001578 <BSP_LCD_DisplayChar+0x84>)
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4423      	add	r3, r4
 800154c:	3308      	adds	r3, #8
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	889b      	ldrh	r3, [r3, #4]
 8001552:	3307      	adds	r3, #7
 8001554:	2b00      	cmp	r3, #0
 8001556:	da00      	bge.n	800155a <BSP_LCD_DisplayChar+0x66>
 8001558:	3307      	adds	r3, #7
 800155a:	10db      	asrs	r3, r3, #3
 800155c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001560:	18ca      	adds	r2, r1, r3
 8001562:	88b9      	ldrh	r1, [r7, #4]
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f9a2 	bl	80018b0 <DrawChar>
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bd90      	pop	{r4, r7, pc}
 8001574:	2000011c 	.word	0x2000011c
 8001578:	20000120 	.word	0x20000120

0800157c <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800157c:	b5b0      	push	{r4, r5, r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	60ba      	str	r2, [r7, #8]
 8001584:	461a      	mov	r2, r3
 8001586:	4603      	mov	r3, r0
 8001588:	81fb      	strh	r3, [r7, #14]
 800158a:	460b      	mov	r3, r1
 800158c:	81bb      	strh	r3, [r7, #12]
 800158e:	4613      	mov	r3, r2
 8001590:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001592:	2301      	movs	r3, #1
 8001594:	83fb      	strh	r3, [r7, #30]
 8001596:	2300      	movs	r3, #0
 8001598:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80015a6:	e002      	b.n	80015ae <BSP_LCD_DisplayStringAt+0x32>
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	3301      	adds	r3, #1
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	617a      	str	r2, [r7, #20]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f6      	bne.n	80015a8 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80015ba:	f7ff fe9f 	bl	80012fc <BSP_LCD_GetXSize>
 80015be:	4b4f      	ldr	r3, [pc, #316]	; (80016fc <BSP_LCD_DisplayStringAt+0x180>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	494f      	ldr	r1, [pc, #316]	; (8001700 <BSP_LCD_DisplayStringAt+0x184>)
 80015c4:	4613      	mov	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	3308      	adds	r3, #8
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	889b      	ldrh	r3, [r3, #4]
 80015d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d8:	613b      	str	r3, [r7, #16]

  switch (Mode)
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d01c      	beq.n	800161a <BSP_LCD_DisplayStringAt+0x9e>
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d017      	beq.n	8001614 <BSP_LCD_DisplayStringAt+0x98>
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d12e      	bne.n	8001646 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	1ad1      	subs	r1, r2, r3
 80015ee:	4b43      	ldr	r3, [pc, #268]	; (80016fc <BSP_LCD_DisplayStringAt+0x180>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4843      	ldr	r0, [pc, #268]	; (8001700 <BSP_LCD_DisplayStringAt+0x184>)
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4403      	add	r3, r0
 80015fe:	3308      	adds	r3, #8
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	889b      	ldrh	r3, [r3, #4]
 8001604:	fb03 f301 	mul.w	r3, r3, r1
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	b29a      	uxth	r2, r3
 800160c:	89fb      	ldrh	r3, [r7, #14]
 800160e:	4413      	add	r3, r2
 8001610:	83fb      	strh	r3, [r7, #30]
      break;
 8001612:	e01b      	b.n	800164c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001614:	89fb      	ldrh	r3, [r7, #14]
 8001616:	83fb      	strh	r3, [r7, #30]
      break;
 8001618:	e018      	b.n	800164c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	b299      	uxth	r1, r3
 8001622:	4b36      	ldr	r3, [pc, #216]	; (80016fc <BSP_LCD_DisplayStringAt+0x180>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4836      	ldr	r0, [pc, #216]	; (8001700 <BSP_LCD_DisplayStringAt+0x184>)
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4403      	add	r3, r0
 8001632:	3308      	adds	r3, #8
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	889b      	ldrh	r3, [r3, #4]
 8001638:	fb11 f303 	smulbb	r3, r1, r3
 800163c:	b29a      	uxth	r2, r3
 800163e:	89fb      	ldrh	r3, [r7, #14]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	83fb      	strh	r3, [r7, #30]
      break;
 8001644:	e002      	b.n	800164c <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	83fb      	strh	r3, [r7, #30]
      break;
 800164a:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800164c:	8bfb      	ldrh	r3, [r7, #30]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <BSP_LCD_DisplayStringAt+0xde>
 8001652:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001656:	2b00      	cmp	r3, #0
 8001658:	da1d      	bge.n	8001696 <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 800165a:	2301      	movs	r3, #1
 800165c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800165e:	e01a      	b.n	8001696 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	781a      	ldrb	r2, [r3, #0]
 8001664:	89b9      	ldrh	r1, [r7, #12]
 8001666:	8bfb      	ldrh	r3, [r7, #30]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff43 	bl	80014f4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800166e:	4b23      	ldr	r3, [pc, #140]	; (80016fc <BSP_LCD_DisplayStringAt+0x180>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4923      	ldr	r1, [pc, #140]	; (8001700 <BSP_LCD_DisplayStringAt+0x184>)
 8001674:	4613      	mov	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	3308      	adds	r3, #8
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	889a      	ldrh	r2, [r3, #4]
 8001684:	8bfb      	ldrh	r3, [r7, #30]
 8001686:	4413      	add	r3, r2
 8001688:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	3301      	adds	r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
    i++;
 8001690:	8bbb      	ldrh	r3, [r7, #28]
 8001692:	3301      	adds	r3, #1
 8001694:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	bf14      	ite	ne
 800169e:	2301      	movne	r3, #1
 80016a0:	2300      	moveq	r3, #0
 80016a2:	b2dc      	uxtb	r4, r3
 80016a4:	f7ff fe2a 	bl	80012fc <BSP_LCD_GetXSize>
 80016a8:	4605      	mov	r5, r0
 80016aa:	8bb9      	ldrh	r1, [r7, #28]
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <BSP_LCD_DisplayStringAt+0x180>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4813      	ldr	r0, [pc, #76]	; (8001700 <BSP_LCD_DisplayStringAt+0x184>)
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4403      	add	r3, r0
 80016bc:	3308      	adds	r3, #8
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	889b      	ldrh	r3, [r3, #4]
 80016c2:	fb03 f301 	mul.w	r3, r3, r1
 80016c6:	1aeb      	subs	r3, r5, r3
 80016c8:	b299      	uxth	r1, r3
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <BSP_LCD_DisplayStringAt+0x180>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	480c      	ldr	r0, [pc, #48]	; (8001700 <BSP_LCD_DisplayStringAt+0x184>)
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4403      	add	r3, r0
 80016da:	3308      	adds	r3, #8
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	889b      	ldrh	r3, [r3, #4]
 80016e0:	4299      	cmp	r1, r3
 80016e2:	bf2c      	ite	cs
 80016e4:	2301      	movcs	r3, #1
 80016e6:	2300      	movcc	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	4023      	ands	r3, r4
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1b6      	bne.n	8001660 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 80016f2:	bf00      	nop
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bdb0      	pop	{r4, r5, r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000011c 	.word	0x2000011c
 8001700:	20000120 	.word	0x20000120

08001704 <BSP_LCD_DisplayOn>:
/**
  * @brief  Switch back on the display if was switched off by previous call of BSP_LCD_DisplayOff().
  *         Exit DSI ULPM mode if was allowed and configured in Dsi Configuration.
  */
void BSP_LCD_DisplayOn(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af02      	add	r7, sp, #8
  }
  else
#endif /* USE_LCD_HDMI */    
  {  
    /* Send Display on DCS command to display */
    HAL_DSI_ShortWrite(&(hdsi_discovery),
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <BSP_LCD_DisplayOn+0x20>)
 800170c:	6819      	ldr	r1, [r3, #0]
 800170e:	2300      	movs	r3, #0
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2329      	movs	r3, #41	; 0x29
 8001714:	2215      	movs	r2, #21
 8001716:	4804      	ldr	r0, [pc, #16]	; (8001728 <BSP_LCD_DisplayOn+0x24>)
 8001718:	f002 f9e2 	bl	8003ae0 <HAL_DSI_ShortWrite>
                       hdsivideo_handle.VirtualChannelID,
                       DSI_DCS_SHORT_PKT_WRITE_P1,
                       OTM8009A_CMD_DISPON,
                       0x00);
  }  
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200000b0 	.word	0x200000b0
 8001728:	20000360 	.word	0x20000360

0800172c <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af02      	add	r7, sp, #8
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d80d      	bhi.n	8001758 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	3301      	adds	r3, #1
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	4613      	mov	r3, r2
 800174c:	2215      	movs	r2, #21
 800174e:	2100      	movs	r1, #0
 8001750:	480a      	ldr	r0, [pc, #40]	; (800177c <DSI_IO_WriteCmd+0x50>)
 8001752:	f002 f9c5 	bl	8003ae0 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001756:	e00d      	b.n	8001774 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	9200      	str	r2, [sp, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2239      	movs	r2, #57	; 0x39
 800176c:	2100      	movs	r1, #0
 800176e:	4803      	ldr	r0, [pc, #12]	; (800177c <DSI_IO_WriteCmd+0x50>)
 8001770:	f002 f9d8 	bl	8003b24 <HAL_DSI_LongWrite>
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000360 	.word	0x20000360

08001780 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001784:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001796:	4b32      	ldr	r3, [pc, #200]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	4a31      	ldr	r2, [pc, #196]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 800179c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017a0:	6453      	str	r3, [r2, #68]	; 0x44
 80017a2:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 80017ae:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	4a2b      	ldr	r2, [pc, #172]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 80017b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017b8:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 80017ba:	4b29      	ldr	r3, [pc, #164]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	4a28      	ldr	r2, [pc, #160]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 80017c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80017c4:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a25      	ldr	r2, [pc, #148]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 80017cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	4a1f      	ldr	r2, [pc, #124]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 80017e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017e8:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	4a1c      	ldr	r2, [pc, #112]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 80017f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017f4:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	4a19      	ldr	r2, [pc, #100]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 80017fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001800:	6453      	str	r3, [r2, #68]	; 0x44
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	4a13      	ldr	r2, [pc, #76]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 8001814:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001818:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <BSP_LCD_MspInit+0xd0>)
 8001820:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001824:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2103      	movs	r1, #3
 800182a:	2058      	movs	r0, #88	; 0x58
 800182c:	f000 fc58 	bl	80020e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001830:	2058      	movs	r0, #88	; 0x58
 8001832:	f000 fc71 	bl	8002118 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2103      	movs	r1, #3
 800183a:	205a      	movs	r0, #90	; 0x5a
 800183c:	f000 fc50 	bl	80020e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001840:	205a      	movs	r0, #90	; 0x5a
 8001842:	f000 fc69 	bl	8002118 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2103      	movs	r1, #3
 800184a:	2062      	movs	r0, #98	; 0x62
 800184c:	f000 fc48 	bl	80020e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001850:	2062      	movs	r0, #98	; 0x62
 8001852:	f000 fc61 	bl	8002118 <HAL_NVIC_EnableIRQ>
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001864:	b5b0      	push	{r4, r5, r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	603a      	str	r2, [r7, #0]
 800186e:	80fb      	strh	r3, [r7, #6]
 8001870:	460b      	mov	r3, r1
 8001872:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <BSP_LCD_DrawPixel+0x44>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0c      	ldr	r2, [pc, #48]	; (80018ac <BSP_LCD_DrawPixel+0x48>)
 800187a:	2134      	movs	r1, #52	; 0x34
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	335c      	adds	r3, #92	; 0x5c
 8001884:	681c      	ldr	r4, [r3, #0]
 8001886:	88bd      	ldrh	r5, [r7, #4]
 8001888:	f7ff fd38 	bl	80012fc <BSP_LCD_GetXSize>
 800188c:	4603      	mov	r3, r0
 800188e:	fb03 f205 	mul.w	r2, r3, r5
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4423      	add	r3, r4
 800189a:	461a      	mov	r2, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bdb0      	pop	{r4, r5, r7, pc}
 80018a8:	2000011c 	.word	0x2000011c
 80018ac:	200002b8 	.word	0x200002b8

080018b0 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	603a      	str	r2, [r7, #0]
 80018ba:	80fb      	strh	r3, [r7, #6]
 80018bc:	460b      	mov	r3, r1
 80018be:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	2300      	movs	r3, #0
 80018c6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 80018c8:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <DrawChar+0x168>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4953      	ldr	r1, [pc, #332]	; (8001a1c <DrawChar+0x16c>)
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	3308      	adds	r3, #8
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	88db      	ldrh	r3, [r3, #6]
 80018de:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80018e0:	4b4d      	ldr	r3, [pc, #308]	; (8001a18 <DrawChar+0x168>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	494d      	ldr	r1, [pc, #308]	; (8001a1c <DrawChar+0x16c>)
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	3308      	adds	r3, #8
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	889b      	ldrh	r3, [r3, #4]
 80018f6:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 80018f8:	8a3b      	ldrh	r3, [r7, #16]
 80018fa:	3307      	adds	r3, #7
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	da00      	bge.n	8001902 <DrawChar+0x52>
 8001900:	3307      	adds	r3, #7
 8001902:	10db      	asrs	r3, r3, #3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	b2da      	uxtb	r2, r3
 800190a:	8a3b      	ldrh	r3, [r7, #16]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	e076      	b.n	8001a06 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001918:	8a3b      	ldrh	r3, [r7, #16]
 800191a:	3307      	adds	r3, #7
 800191c:	2b00      	cmp	r3, #0
 800191e:	da00      	bge.n	8001922 <DrawChar+0x72>
 8001920:	3307      	adds	r3, #7
 8001922:	10db      	asrs	r3, r3, #3
 8001924:	461a      	mov	r2, r3
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fb03 f302 	mul.w	r3, r3, r2
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	4413      	add	r3, r2
 8001930:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001932:	8a3b      	ldrh	r3, [r7, #16]
 8001934:	3307      	adds	r3, #7
 8001936:	2b00      	cmp	r3, #0
 8001938:	da00      	bge.n	800193c <DrawChar+0x8c>
 800193a:	3307      	adds	r3, #7
 800193c:	10db      	asrs	r3, r3, #3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d002      	beq.n	8001948 <DrawChar+0x98>
 8001942:	2b02      	cmp	r3, #2
 8001944:	d004      	beq.n	8001950 <DrawChar+0xa0>
 8001946:	e00c      	b.n	8001962 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	617b      	str	r3, [r7, #20]
      break;
 800194e:	e016      	b.n	800197e <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	3201      	adds	r2, #1
 800195a:	7812      	ldrb	r2, [r2, #0]
 800195c:	4313      	orrs	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
      break;
 8001960:	e00d      	b.n	800197e <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	041a      	lsls	r2, r3, #16
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	3301      	adds	r3, #1
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	4313      	orrs	r3, r2
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	3202      	adds	r2, #2
 8001976:	7812      	ldrb	r2, [r2, #0]
 8001978:	4313      	orrs	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
      break;
 800197c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	e036      	b.n	80019f2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8001984:	8a3a      	ldrh	r2, [r7, #16]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	1ad2      	subs	r2, r2, r3
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	4413      	add	r3, r2
 800198e:	3b01      	subs	r3, #1
 8001990:	2201      	movs	r2, #1
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	461a      	mov	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d012      	beq.n	80019c6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	4413      	add	r3, r2
 80019a8:	b298      	uxth	r0, r3
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <DrawChar+0x168>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	491b      	ldr	r1, [pc, #108]	; (8001a1c <DrawChar+0x16c>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	88bb      	ldrh	r3, [r7, #4]
 80019be:	4619      	mov	r1, r3
 80019c0:	f7ff ff50 	bl	8001864 <BSP_LCD_DrawPixel>
 80019c4:	e012      	b.n	80019ec <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	4413      	add	r3, r2
 80019ce:	b298      	uxth	r0, r3
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <DrawChar+0x168>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4911      	ldr	r1, [pc, #68]	; (8001a1c <DrawChar+0x16c>)
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	3304      	adds	r3, #4
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff ff3c 	bl	8001864 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	3301      	adds	r3, #1
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	8a3b      	ldrh	r3, [r7, #16]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d3c4      	bcc.n	8001984 <DrawChar+0xd4>
      }
    }
    Ypos++;
 80019fa:	88bb      	ldrh	r3, [r7, #4]
 80019fc:	3301      	adds	r3, #1
 80019fe:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	3301      	adds	r3, #1
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	8a7b      	ldrh	r3, [r7, #18]
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d384      	bcc.n	8001918 <DrawChar+0x68>
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3720      	adds	r7, #32
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000011c 	.word	0x2000011c
 8001a1c:	20000120 	.word	0x20000120

08001a20 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <LL_FillBuffer+0x68>)
 8001a30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a34:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <LL_FillBuffer+0x68>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8001a3c:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <LL_FillBuffer+0x68>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <LL_FillBuffer+0x68>)
 8001a44:	4a11      	ldr	r2, [pc, #68]	; (8001a8c <LL_FillBuffer+0x6c>)
 8001a46:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8001a48:	480f      	ldr	r0, [pc, #60]	; (8001a88 <LL_FillBuffer+0x68>)
 8001a4a:	f000 fe19 	bl	8002680 <HAL_DMA2D_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d115      	bne.n	8001a80 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8001a54:	68f9      	ldr	r1, [r7, #12]
 8001a56:	480c      	ldr	r0, [pc, #48]	; (8001a88 <LL_FillBuffer+0x68>)
 8001a58:	f000 ff80 	bl	800295c <HAL_DMA2D_ConfigLayer>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10e      	bne.n	8001a80 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69f9      	ldr	r1, [r7, #28]
 8001a6c:	4806      	ldr	r0, [pc, #24]	; (8001a88 <LL_FillBuffer+0x68>)
 8001a6e:	f000 fe61 	bl	8002734 <HAL_DMA2D_Start>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d103      	bne.n	8001a80 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8001a78:	210a      	movs	r1, #10
 8001a7a:	4803      	ldr	r0, [pc, #12]	; (8001a88 <LL_FillBuffer+0x68>)
 8001a7c:	f000 fe85 	bl	800278a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000260 	.word	0x20000260
 8001a8c:	4002b000 	.word	0x4002b000

08001a90 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001a94:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <BSP_SDRAM_Init+0xac>)
 8001a96:	4a2a      	ldr	r2, [pc, #168]	; (8001b40 <BSP_SDRAM_Init+0xb0>)
 8001a98:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8001a9a:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <BSP_SDRAM_Init+0xb4>)
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001aa0:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <BSP_SDRAM_Init+0xb4>)
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8001aa6:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <BSP_SDRAM_Init+0xb4>)
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <BSP_SDRAM_Init+0xb4>)
 8001aae:	2207      	movs	r2, #7
 8001ab0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8001ab2:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <BSP_SDRAM_Init+0xb4>)
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <BSP_SDRAM_Init+0xb4>)
 8001aba:	2202      	movs	r2, #2
 8001abc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <BSP_SDRAM_Init+0xb4>)
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <BSP_SDRAM_Init+0xac>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <BSP_SDRAM_Init+0xac>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <BSP_SDRAM_Init+0xac>)
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <BSP_SDRAM_Init+0xac>)
 8001ad8:	2220      	movs	r2, #32
 8001ada:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001adc:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <BSP_SDRAM_Init+0xac>)
 8001ade:	2240      	movs	r2, #64	; 0x40
 8001ae0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <BSP_SDRAM_Init+0xac>)
 8001ae4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001ae8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <BSP_SDRAM_Init+0xac>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <BSP_SDRAM_Init+0xac>)
 8001af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001af6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <BSP_SDRAM_Init+0xac>)
 8001afa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <BSP_SDRAM_Init+0xac>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001b06:	2100      	movs	r1, #0
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <BSP_SDRAM_Init+0xac>)
 8001b0a:	f000 f87f 	bl	8001c0c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001b0e:	490d      	ldr	r1, [pc, #52]	; (8001b44 <BSP_SDRAM_Init+0xb4>)
 8001b10:	480a      	ldr	r0, [pc, #40]	; (8001b3c <BSP_SDRAM_Init+0xac>)
 8001b12:	f004 fe0b 	bl	800672c <HAL_SDRAM_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <BSP_SDRAM_Init+0xb8>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	e002      	b.n	8001b2a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <BSP_SDRAM_Init+0xb8>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001b2a:	f240 6003 	movw	r0, #1539	; 0x603
 8001b2e:	f000 f80d 	bl	8001b4c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <BSP_SDRAM_Init+0xb8>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000037c 	.word	0x2000037c
 8001b40:	a0000140 	.word	0xa0000140
 8001b44:	200001c8 	.word	0x200001c8
 8001b48:	20000038 	.word	0x20000038

08001b4c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001b58:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b5e:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b60:	2210      	movs	r2, #16
 8001b62:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001b6a:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b74:	4923      	ldr	r1, [pc, #140]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b76:	4824      	ldr	r0, [pc, #144]	; (8001c08 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b78:	f004 fe0c 	bl	8006794 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f000 f9d5 	bl	8001f2c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b84:	2202      	movs	r2, #2
 8001b86:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b8a:	2210      	movs	r2, #16
 8001b8c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b9e:	4919      	ldr	r1, [pc, #100]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ba0:	4819      	ldr	r0, [pc, #100]	; (8001c08 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001ba2:	f004 fdf7 	bl	8006794 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ba8:	2203      	movs	r2, #3
 8001baa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bae:	2210      	movs	r2, #16
 8001bb0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc2:	4910      	ldr	r1, [pc, #64]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bc4:	4810      	ldr	r0, [pc, #64]	; (8001c08 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001bc6:	f004 fde5 	bl	8006794 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001bca:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001bce:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bd8:	2210      	movs	r2, #16
 8001bda:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001be6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001be8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bec:	4905      	ldr	r1, [pc, #20]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bee:	4806      	ldr	r0, [pc, #24]	; (8001c08 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001bf0:	f004 fdd0 	bl	8006794 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4804      	ldr	r0, [pc, #16]	; (8001c08 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001bf8:	f004 fdf7 	bl	80067ea <HAL_SDRAM_ProgramRefreshRate>
}
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200001e4 	.word	0x200001e4
 8001c08:	2000037c 	.word	0x2000037c

08001c0c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b090      	sub	sp, #64	; 0x40
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c16:	4b71      	ldr	r3, [pc, #452]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1a:	4a70      	ldr	r2, [pc, #448]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6393      	str	r3, [r2, #56]	; 0x38
 8001c22:	4b6e      	ldr	r3, [pc, #440]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001c2e:	4b6b      	ldr	r3, [pc, #428]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a6a      	ldr	r2, [pc, #424]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b68      	ldr	r3, [pc, #416]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c46:	4b65      	ldr	r3, [pc, #404]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a64      	ldr	r2, [pc, #400]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b62      	ldr	r3, [pc, #392]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c5e:	4b5f      	ldr	r3, [pc, #380]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a5e      	ldr	r2, [pc, #376]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c64:	f043 0310 	orr.w	r3, r3, #16
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b5c      	ldr	r3, [pc, #368]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c76:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c7c:	f043 0320 	orr.w	r3, r3, #32
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b56      	ldr	r3, [pc, #344]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	61bb      	str	r3, [r7, #24]
 8001c8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c8e:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a52      	ldr	r2, [pc, #328]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ca6:	4b4d      	ldr	r3, [pc, #308]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a4c      	ldr	r2, [pc, #304]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b4a      	ldr	r3, [pc, #296]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a46      	ldr	r2, [pc, #280]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b44      	ldr	r3, [pc, #272]	; (8001ddc <BSP_SDRAM_MspInit+0x1d0>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001ce2:	230c      	movs	r3, #12
 8001ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001ce6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	483b      	ldr	r0, [pc, #236]	; (8001de0 <BSP_SDRAM_MspInit+0x1d4>)
 8001cf4:	f001 ffdc 	bl	8003cb0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001cf8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d02:	4619      	mov	r1, r3
 8001d04:	4837      	ldr	r0, [pc, #220]	; (8001de4 <BSP_SDRAM_MspInit+0x1d8>)
 8001d06:	f001 ffd3 	bl	8003cb0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001d0a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d14:	4619      	mov	r1, r3
 8001d16:	4834      	ldr	r0, [pc, #208]	; (8001de8 <BSP_SDRAM_MspInit+0x1dc>)
 8001d18:	f001 ffca 	bl	8003cb0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8001d1c:	f248 1337 	movw	r3, #33079	; 0x8137
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d26:	4619      	mov	r1, r3
 8001d28:	4830      	ldr	r0, [pc, #192]	; (8001dec <BSP_SDRAM_MspInit+0x1e0>)
 8001d2a:	f001 ffc1 	bl	8003cb0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8001d2e:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d38:	4619      	mov	r1, r3
 8001d3a:	482d      	ldr	r0, [pc, #180]	; (8001df0 <BSP_SDRAM_MspInit+0x1e4>)
 8001d3c:	f001 ffb8 	bl	8003cb0 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001d40:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8001d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4829      	ldr	r0, [pc, #164]	; (8001df4 <BSP_SDRAM_MspInit+0x1e8>)
 8001d4e:	f001 ffaf 	bl	8003cb0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001d52:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001d58:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001d5a:	2280      	movs	r2, #128	; 0x80
 8001d5c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001d5e:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d64:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001d68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d6c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d6e:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001d70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d74:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001d78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d7c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001d84:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001d86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d8a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001d94:	2203      	movs	r2, #3
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001da6:	4a15      	ldr	r2, [pc, #84]	; (8001dfc <BSP_SDRAM_MspInit+0x1f0>)
 8001da8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001dae:	631a      	str	r2, [r3, #48]	; 0x30
 8001db0:	4a11      	ldr	r2, [pc, #68]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001db6:	4810      	ldr	r0, [pc, #64]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001db8:	f000 fb54 	bl	8002464 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001dbc:	480e      	ldr	r0, [pc, #56]	; (8001df8 <BSP_SDRAM_MspInit+0x1ec>)
 8001dbe:	f000 faa3 	bl	8002308 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	210f      	movs	r1, #15
 8001dc6:	2038      	movs	r0, #56	; 0x38
 8001dc8:	f000 f98a 	bl	80020e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001dcc:	2038      	movs	r0, #56	; 0x38
 8001dce:	f000 f9a3 	bl	8002118 <HAL_NVIC_EnableIRQ>
}
 8001dd2:	bf00      	nop
 8001dd4:	3740      	adds	r7, #64	; 0x40
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020c00 	.word	0x40020c00
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40021400 	.word	0x40021400
 8001dec:	40021800 	.word	0x40021800
 8001df0:	40021c00 	.word	0x40021c00
 8001df4:	40022000 	.word	0x40022000
 8001df8:	200001f4 	.word	0x200001f4
 8001dfc:	40026410 	.word	0x40026410

08001e00 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	460a      	mov	r2, r1
 8001e0a:	80fb      	strh	r3, [r7, #6]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8001e18:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <BSP_TS_Init+0xb0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a25      	ldr	r2, [pc, #148]	; (8001eb4 <BSP_TS_Init+0xb4>)
 8001e1e:	7812      	ldrb	r2, [r2, #0]
 8001e20:	b292      	uxth	r2, r2
 8001e22:	4610      	mov	r0, r2
 8001e24:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <BSP_TS_Init+0xb0>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2054      	movs	r0, #84	; 0x54
 8001e2c:	4798      	blx	r3
 8001e2e:	4603      	mov	r3, r0
 8001e30:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8001e32:	7b7b      	ldrb	r3, [r7, #13]
 8001e34:	2b11      	cmp	r3, #17
 8001e36:	d009      	beq.n	8001e4c <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8001e38:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <BSP_TS_Init+0xb0>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2070      	movs	r0, #112	; 0x70
 8001e3e:	4798      	blx	r3
 8001e40:	4603      	mov	r3, r0
 8001e42:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <BSP_TS_Init+0xb4>)
 8001e46:	2270      	movs	r2, #112	; 0x70
 8001e48:	701a      	strb	r2, [r3, #0]
 8001e4a:	e002      	b.n	8001e52 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8001e4c:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <BSP_TS_Init+0xb4>)
 8001e4e:	2254      	movs	r2, #84	; 0x54
 8001e50:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8001e52:	7b7b      	ldrb	r3, [r7, #13]
 8001e54:	2b11      	cmp	r3, #17
 8001e56:	d002      	beq.n	8001e5e <BSP_TS_Init+0x5e>
 8001e58:	7bbb      	ldrb	r3, [r7, #14]
 8001e5a:	2b11      	cmp	r3, #17
 8001e5c:	d121      	bne.n	8001ea2 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <BSP_TS_Init+0xb8>)
 8001e60:	4a13      	ldr	r2, [pc, #76]	; (8001eb0 <BSP_TS_Init+0xb0>)
 8001e62:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8001e64:	88fa      	ldrh	r2, [r7, #6]
 8001e66:	88bb      	ldrh	r3, [r7, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d203      	bcs.n	8001e74 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <BSP_TS_Init+0xbc>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e002      	b.n	8001e7a <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <BSP_TS_Init+0xbc>)
 8001e76:	220c      	movs	r2, #12
 8001e78:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d112      	bne.n	8001ea6 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <BSP_TS_Init+0xb8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <BSP_TS_Init+0xb4>)
 8001e88:	7812      	ldrb	r2, [r2, #0]
 8001e8a:	b292      	uxth	r2, r2
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <BSP_TS_Init+0xb8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <BSP_TS_Init+0xb4>)
 8001e98:	7812      	ldrb	r2, [r2, #0]
 8001e9a:	b292      	uxth	r2, r2
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4798      	blx	r3
    if(ts_status == TS_OK)
 8001ea0:	e001      	b.n	8001ea6 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	20000259 	.word	0x20000259
 8001eb8:	20000254 	.word	0x20000254
 8001ebc:	20000258 	.word	0x20000258

08001ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_Init+0x28>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <HAL_Init+0x28>)
 8001eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ece:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f000 f8fa 	bl	80020ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f006 fa14 	bl	8008304 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001edc:	f005 ff7e 	bl	8007ddc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023c00 	.word	0x40023c00

08001eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_IncTick+0x20>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_IncTick+0x24>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <HAL_IncTick+0x24>)
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000039 	.word	0x20000039
 8001f10:	200003b0 	.word	0x200003b0

08001f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return uwTick;
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <HAL_GetTick+0x14>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	200003b0 	.word	0x200003b0

08001f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff ffee 	bl	8001f14 <HAL_GetTick>
 8001f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d005      	beq.n	8001f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_Delay+0x40>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f52:	bf00      	nop
 8001f54:	f7ff ffde 	bl	8001f14 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d8f7      	bhi.n	8001f54 <HAL_Delay+0x28>
  {
  }
}
 8001f64:	bf00      	nop
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000039 	.word	0x20000039

08001f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00
 8001fb4:	05fa0000 	.word	0x05fa0000

08001fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 0307 	and.w	r3, r3, #7
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	db0b      	blt.n	8001ffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	f003 021f 	and.w	r2, r3, #31
 8001fec:	4907      	ldr	r1, [pc, #28]	; (800200c <__NVIC_EnableIRQ+0x38>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000e100 	.word	0xe000e100

08002010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	2b00      	cmp	r3, #0
 8002022:	db0a      	blt.n	800203a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	490c      	ldr	r1, [pc, #48]	; (800205c <__NVIC_SetPriority+0x4c>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	0112      	lsls	r2, r2, #4
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	440b      	add	r3, r1
 8002034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002038:	e00a      	b.n	8002050 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4908      	ldr	r1, [pc, #32]	; (8002060 <__NVIC_SetPriority+0x50>)
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	3b04      	subs	r3, #4
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	440b      	add	r3, r1
 800204e:	761a      	strb	r2, [r3, #24]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f1c3 0307 	rsb	r3, r3, #7
 800207e:	2b04      	cmp	r3, #4
 8002080:	bf28      	it	cs
 8002082:	2304      	movcs	r3, #4
 8002084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3304      	adds	r3, #4
 800208a:	2b06      	cmp	r3, #6
 800208c:	d902      	bls.n	8002094 <NVIC_EncodePriority+0x30>
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3b03      	subs	r3, #3
 8002092:	e000      	b.n	8002096 <NVIC_EncodePriority+0x32>
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	401a      	ands	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ac:	f04f 31ff 	mov.w	r1, #4294967295
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43d9      	mvns	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	4313      	orrs	r3, r2
         );
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3724      	adds	r7, #36	; 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ff4c 	bl	8001f70 <__NVIC_SetPriorityGrouping>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f2:	f7ff ff61 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 80020f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68b9      	ldr	r1, [r7, #8]
 80020fc:	6978      	ldr	r0, [r7, #20]
 80020fe:	f7ff ffb1 	bl	8002064 <NVIC_EncodePriority>
 8002102:	4602      	mov	r2, r0
 8002104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff80 	bl	8002010 <__NVIC_SetPriority>
}
 8002110:	bf00      	nop
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ff54 	bl	8001fd4 <__NVIC_EnableIRQ>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e054      	b.n	80021f0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7f5b      	ldrb	r3, [r3, #29]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d105      	bne.n	800215c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f005 fe64 	bl	8007e24 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	791b      	ldrb	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a22      	ldr	r2, [pc, #136]	; (80021f8 <HAL_CRC_Init+0xc4>)
 8002170:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0218 	bic.w	r2, r2, #24
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	e00c      	b.n	800219e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6899      	ldr	r1, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	461a      	mov	r2, r3
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f834 	bl	80021fc <HAL_CRCEx_Polynomial_Set>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e028      	b.n	80021f0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	795b      	ldrb	r3, [r3, #5]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d105      	bne.n	80021b2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f04f 32ff 	mov.w	r2, #4294967295
 80021ae:	611a      	str	r2, [r3, #16]
 80021b0:	e004      	b.n	80021bc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6912      	ldr	r2, [r2, #16]
 80021ba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699a      	ldr	r2, [r3, #24]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	04c11db7 	.word	0x04c11db7

080021fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800220c:	231f      	movs	r3, #31
 800220e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002210:	bf00      	nop
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1e5a      	subs	r2, r3, #1
 8002216:	613a      	str	r2, [r7, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d009      	beq.n	8002230 <HAL_CRCEx_Polynomial_Set+0x34>
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b18      	cmp	r3, #24
 8002234:	d846      	bhi.n	80022c4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002236:	a201      	add	r2, pc, #4	; (adr r2, 800223c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223c:	080022cb 	.word	0x080022cb
 8002240:	080022c5 	.word	0x080022c5
 8002244:	080022c5 	.word	0x080022c5
 8002248:	080022c5 	.word	0x080022c5
 800224c:	080022c5 	.word	0x080022c5
 8002250:	080022c5 	.word	0x080022c5
 8002254:	080022c5 	.word	0x080022c5
 8002258:	080022c5 	.word	0x080022c5
 800225c:	080022b9 	.word	0x080022b9
 8002260:	080022c5 	.word	0x080022c5
 8002264:	080022c5 	.word	0x080022c5
 8002268:	080022c5 	.word	0x080022c5
 800226c:	080022c5 	.word	0x080022c5
 8002270:	080022c5 	.word	0x080022c5
 8002274:	080022c5 	.word	0x080022c5
 8002278:	080022c5 	.word	0x080022c5
 800227c:	080022ad 	.word	0x080022ad
 8002280:	080022c5 	.word	0x080022c5
 8002284:	080022c5 	.word	0x080022c5
 8002288:	080022c5 	.word	0x080022c5
 800228c:	080022c5 	.word	0x080022c5
 8002290:	080022c5 	.word	0x080022c5
 8002294:	080022c5 	.word	0x080022c5
 8002298:	080022c5 	.word	0x080022c5
 800229c:	080022a1 	.word	0x080022a1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b06      	cmp	r3, #6
 80022a4:	d913      	bls.n	80022ce <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80022aa:	e010      	b.n	80022ce <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b07      	cmp	r3, #7
 80022b0:	d90f      	bls.n	80022d2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80022b6:	e00c      	b.n	80022d2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b0f      	cmp	r3, #15
 80022bc:	d90b      	bls.n	80022d6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80022c2:	e008      	b.n	80022d6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	75fb      	strb	r3, [r7, #23]
      break;
 80022c8:	e006      	b.n	80022d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022ca:	bf00      	nop
 80022cc:	e004      	b.n	80022d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022ce:	bf00      	nop
 80022d0:	e002      	b.n	80022d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022d2:	bf00      	nop
 80022d4:	e000      	b.n	80022d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022d6:	bf00      	nop
  }
  if (status == HAL_OK)
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10d      	bne.n	80022fa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f023 0118 	bic.w	r1, r3, #24
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	371c      	adds	r7, #28
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002314:	f7ff fdfe 	bl	8001f14 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e099      	b.n	8002458 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002344:	e00f      	b.n	8002366 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002346:	f7ff fde5 	bl	8001f14 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b05      	cmp	r3, #5
 8002352:	d908      	bls.n	8002366 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2220      	movs	r2, #32
 8002358:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2203      	movs	r2, #3
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e078      	b.n	8002458 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1e8      	bne.n	8002346 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	4b38      	ldr	r3, [pc, #224]	; (8002460 <HAL_DMA_Init+0x158>)
 8002380:	4013      	ands	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002392:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d107      	bne.n	80023d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	4313      	orrs	r3, r2
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f023 0307 	bic.w	r3, r3, #7
 80023e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d117      	bne.n	800242a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00e      	beq.n	800242a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f8bd 	bl	800258c <DMA_CheckFifoParam>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2240      	movs	r2, #64	; 0x40
 800241c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002426:	2301      	movs	r3, #1
 8002428:	e016      	b.n	8002458 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f874 	bl	8002520 <DMA_CalcBaseAndBitshift>
 8002438:	4603      	mov	r3, r0
 800243a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	223f      	movs	r2, #63	; 0x3f
 8002442:	409a      	lsls	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	e010803f 	.word	0xe010803f

08002464 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e050      	b.n	8002518 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d101      	bne.n	8002486 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002482:	2302      	movs	r3, #2
 8002484:	e048      	b.n	8002518 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0201 	bic.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2200      	movs	r2, #0
 80024a4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2200      	movs	r2, #0
 80024b4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2221      	movs	r2, #33	; 0x21
 80024c4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f82a 	bl	8002520 <DMA_CalcBaseAndBitshift>
 80024cc:	4603      	mov	r3, r0
 80024ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	223f      	movs	r2, #63	; 0x3f
 80024d6:	409a      	lsls	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	3b10      	subs	r3, #16
 8002530:	4a13      	ldr	r2, [pc, #76]	; (8002580 <DMA_CalcBaseAndBitshift+0x60>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <DMA_CalcBaseAndBitshift+0x64>)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b03      	cmp	r3, #3
 800254c:	d908      	bls.n	8002560 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <DMA_CalcBaseAndBitshift+0x68>)
 8002556:	4013      	ands	r3, r2
 8002558:	1d1a      	adds	r2, r3, #4
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	659a      	str	r2, [r3, #88]	; 0x58
 800255e:	e006      	b.n	800256e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <DMA_CalcBaseAndBitshift+0x68>)
 8002568:	4013      	ands	r3, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	aaaaaaab 	.word	0xaaaaaaab
 8002584:	0800a238 	.word	0x0800a238
 8002588:	fffffc00 	.word	0xfffffc00

0800258c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11f      	bne.n	80025e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d855      	bhi.n	8002658 <DMA_CheckFifoParam+0xcc>
 80025ac:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <DMA_CheckFifoParam+0x28>)
 80025ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b2:	bf00      	nop
 80025b4:	080025c5 	.word	0x080025c5
 80025b8:	080025d7 	.word	0x080025d7
 80025bc:	080025c5 	.word	0x080025c5
 80025c0:	08002659 	.word	0x08002659
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d045      	beq.n	800265c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d4:	e042      	b.n	800265c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025de:	d13f      	bne.n	8002660 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e4:	e03c      	b.n	8002660 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ee:	d121      	bne.n	8002634 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d836      	bhi.n	8002664 <DMA_CheckFifoParam+0xd8>
 80025f6:	a201      	add	r2, pc, #4	; (adr r2, 80025fc <DMA_CheckFifoParam+0x70>)
 80025f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fc:	0800260d 	.word	0x0800260d
 8002600:	08002613 	.word	0x08002613
 8002604:	0800260d 	.word	0x0800260d
 8002608:	08002625 	.word	0x08002625
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
      break;
 8002610:	e02f      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d024      	beq.n	8002668 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002622:	e021      	b.n	8002668 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800262c:	d11e      	bne.n	800266c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002632:	e01b      	b.n	800266c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d902      	bls.n	8002640 <DMA_CheckFifoParam+0xb4>
 800263a:	2b03      	cmp	r3, #3
 800263c:	d003      	beq.n	8002646 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800263e:	e018      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
      break;
 8002644:	e015      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00e      	beq.n	8002670 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
      break;
 8002656:	e00b      	b.n	8002670 <DMA_CheckFifoParam+0xe4>
      break;
 8002658:	bf00      	nop
 800265a:	e00a      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      break;
 800265c:	bf00      	nop
 800265e:	e008      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      break;
 8002660:	bf00      	nop
 8002662:	e006      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      break;
 8002664:	bf00      	nop
 8002666:	e004      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      break;
 8002668:	bf00      	nop
 800266a:	e002      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      break;   
 800266c:	bf00      	nop
 800266e:	e000      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      break;
 8002670:	bf00      	nop
    }
  } 
  
  return status; 
 8002672:	7bfb      	ldrb	r3, [r7, #15]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e049      	b.n	8002726 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f005 fbdc 	bl	8007e64 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d0:	f023 0107 	bic.w	r1, r3, #7
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_DMA2D_Init+0xb0>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68d1      	ldr	r1, [r2, #12]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	430b      	orrs	r3, r1
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	051a      	lsls	r2, r3, #20
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	055b      	lsls	r3, r3, #21
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	ffffc000 	.word	0xffffc000

08002734 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_DMA2D_Start+0x1c>
 800274c:	2302      	movs	r3, #2
 800274e:	e018      	b.n	8002782 <HAL_DMA2D_Start+0x4e>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f994 	bl	8002a98 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d056      	beq.n	8002854 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80027a6:	f7ff fbb5 	bl	8001f14 <HAL_GetTick>
 80027aa:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80027ac:	e04b      	b.n	8002846 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d023      	beq.n	8002808 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ce:	f043 0202 	orr.w	r2, r3, #2
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2221      	movs	r2, #33	; 0x21
 80027f2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2204      	movs	r2, #4
 80027f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0a5      	b.n	8002954 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280e:	d01a      	beq.n	8002846 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002810:	f7ff fb80 	bl	8001f14 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d302      	bcc.n	8002826 <HAL_DMA2D_PollForTransfer+0x9c>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10f      	bne.n	8002846 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f043 0220 	orr.w	r2, r3, #32
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2203      	movs	r2, #3
 8002836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e086      	b.n	8002954 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0ac      	beq.n	80027ae <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d061      	beq.n	800293a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002876:	f7ff fb4d 	bl	8001f14 <HAL_GetTick>
 800287a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800287c:	e056      	b.n	800292c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800288c:	2b00      	cmp	r3, #0
 800288e:	d02e      	beq.n	80028ee <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f043 0204 	orr.w	r2, r3, #4
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b4:	f043 0202 	orr.w	r2, r3, #2
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ca:	f043 0201 	orr.w	r2, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2229      	movs	r2, #41	; 0x29
 80028d8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2204      	movs	r2, #4
 80028de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e032      	b.n	8002954 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f4:	d01a      	beq.n	800292c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80028f6:	f7ff fb0d 	bl	8001f14 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d302      	bcc.n	800290c <HAL_DMA2D_PollForTransfer+0x182>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10f      	bne.n	800292c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002910:	f043 0220 	orr.w	r2, r3, #32
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2203      	movs	r2, #3
 800291c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e013      	b.n	8002954 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0a1      	beq.n	800287e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2212      	movs	r2, #18
 8002940:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_DMA2D_ConfigLayer+0x20>
 8002978:	2302      	movs	r3, #2
 800297a:	e084      	b.n	8002a86 <HAL_DMA2D_ConfigLayer+0x12a>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	3320      	adds	r3, #32
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	4413      	add	r3, r2
 800299c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	041b      	lsls	r3, r3, #16
 80029a8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80029b0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80029bc:	4b35      	ldr	r3, [pc, #212]	; (8002a94 <HAL_DMA2D_ConfigLayer+0x138>)
 80029be:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b0a      	cmp	r3, #10
 80029c6:	d003      	beq.n	80029d0 <HAL_DMA2D_ConfigLayer+0x74>
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b09      	cmp	r3, #9
 80029ce:	d107      	bne.n	80029e0 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	e005      	b.n	80029ec <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	061b      	lsls	r3, r3, #24
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d120      	bne.n	8002a34 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	ea02 0103 	and.w	r1, r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b0a      	cmp	r3, #10
 8002a1a:	d003      	beq.n	8002a24 <HAL_DMA2D_ConfigLayer+0xc8>
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b09      	cmp	r3, #9
 8002a22:	d127      	bne.n	8002a74 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002a30:	629a      	str	r2, [r3, #40]	; 0x28
 8002a32:	e01f      	b.n	8002a74 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	69da      	ldr	r2, [r3, #28]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	ea02 0103 	and.w	r1, r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b0a      	cmp	r3, #10
 8002a5c:	d003      	beq.n	8002a66 <HAL_DMA2D_ConfigLayer+0x10a>
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b09      	cmp	r3, #9
 8002a64:	d106      	bne.n	8002a74 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002a72:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	ff33000f 	.word	0xff33000f

08002a98 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b08b      	sub	sp, #44	; 0x2c
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	041a      	lsls	r2, r3, #16
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ad0:	d174      	bne.n	8002bbc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ad8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ae0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ae8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d108      	bne.n	8002b0a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	e053      	b.n	8002bb2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d106      	bne.n	8002b20 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	e048      	b.n	8002bb2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d111      	bne.n	8002b4c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	0cdb      	lsrs	r3, r3, #19
 8002b2c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	0a9b      	lsrs	r3, r3, #10
 8002b32:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	08db      	lsrs	r3, r3, #3
 8002b38:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	02db      	lsls	r3, r3, #11
 8002b42:	4313      	orrs	r3, r2
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4a:	e032      	b.n	8002bb2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d117      	bne.n	8002b84 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	0fdb      	lsrs	r3, r3, #31
 8002b58:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	0cdb      	lsrs	r3, r3, #19
 8002b5e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	0adb      	lsrs	r3, r3, #11
 8002b64:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	08db      	lsrs	r3, r3, #3
 8002b6a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	029b      	lsls	r3, r3, #10
 8002b74:	431a      	orrs	r2, r3
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	03db      	lsls	r3, r3, #15
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
 8002b82:	e016      	b.n	8002bb2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	0f1b      	lsrs	r3, r3, #28
 8002b88:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	0d1b      	lsrs	r3, r3, #20
 8002b8e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	0b1b      	lsrs	r3, r3, #12
 8002b94:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	011a      	lsls	r2, r3, #4
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	031b      	lsls	r3, r3, #12
 8002baa:	4313      	orrs	r3, r2
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002bba:	e003      	b.n	8002bc4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
}
 8002bc4:	bf00      	nop
 8002bc6:	372c      	adds	r7, #44	; 0x2c
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	019a      	lsls	r2, r3, #6
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	431a      	orrs	r2, r3
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	041b      	lsls	r3, r3, #16
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c10:	f7ff f980 	bl	8001f14 <HAL_GetTick>
 8002c14:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002c16:	e009      	b.n	8002c2c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8002c18:	f7ff f97c 	bl	8001f14 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c26:	d901      	bls.n	8002c2c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e015      	b.n	8002c58 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0ee      	beq.n	8002c18 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	019a      	lsls	r2, r3, #6
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	ea42 0103 	orr.w	r1, r2, r3
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	041a      	lsls	r2, r3, #16
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e106      	b.n	8002e82 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	7c5b      	ldrb	r3, [r3, #17]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f005 f910 	bl	8007ea4 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2203      	movs	r2, #3
 8002c88:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002c9e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb2:	f7ff f92f 	bl	8001f14 <HAL_GetTick>
 8002cb6:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002cb8:	e009      	b.n	8002cce <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002cba:	f7ff f92b 	bl	8001f14 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cc8:	d901      	bls.n	8002cce <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e0d9      	b.n	8002e82 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0ed      	beq.n	8002cba <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b68      	ldr	r3, [pc, #416]	; (8002e8c <HAL_DSI_Init+0x22c>)
 8002cec:	400b      	ands	r3, r1
 8002cee:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	009a      	lsls	r2, r3, #2
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	02db      	lsls	r3, r3, #11
 8002d06:	431a      	orrs	r2, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	041b      	lsls	r3, r3, #16
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d42:	f7ff f8e7 	bl	8001f14 <HAL_GetTick>
 8002d46:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002d48:	e009      	b.n	8002d5e <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002d4a:	f7ff f8e3 	bl	8001f14 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d58:	d901      	bls.n	8002d5e <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e091      	b.n	8002e82 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0ed      	beq.n	8002d4a <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0206 	orr.w	r2, r2, #6
 8002d7e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0203 	bic.w	r2, r2, #3
 8002d92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0201 	orr.w	r2, r2, #1
 8002dac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0203 	bic.w	r2, r2, #3
 8002dc0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002de8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6899      	ldr	r1, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <HAL_DSI_Init+0x1aa>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	e000      	b.n	8002e0c <HAL_DSI_Init+0x1ac>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	4a1f      	ldr	r2, [pc, #124]	; (8002e90 <HAL_DSI_Init+0x230>)
 8002e12:	fb02 f203 	mul.w	r2, r2, r3
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002e42:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	fffc8603 	.word	0xfffc8603
 8002e90:	003d0900 	.word	0x003d0900

08002e94 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e066      	b.n	8002f74 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0208 	bic.w	r2, r2, #8
 8002ec0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0206 	bic.w	r2, r2, #6
 8002f06:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002f46:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002f52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f004 ffe6 	bl	8007f2c <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7c1b      	ldrb	r3, [r3, #16]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_DSI_ConfigErrorMonitor+0x16>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e0aa      	b.n	80030e8 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d009      	beq.n	8002ff0 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8002fec:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d009      	beq.n	800302c <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0202 	orr.w	r2, r2, #2
 8003028:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 020c 	orr.w	r2, r2, #12
 8003046:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0210 	orr.w	r2, r2, #16
 8003064:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0220 	orr.w	r2, r2, #32
 8003082:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308c:	2b00      	cmp	r3, #0
 800308e:	d009      	beq.n	80030a4 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030be:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d009      	beq.n	80030e0 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80030dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	7c1b      	ldrb	r3, [r3, #16]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_DSI_SetGenericVCID+0x16>
 8003106:	2302      	movs	r3, #2
 8003108:	e016      	b.n	8003138 <HAL_DSI_SetGenericVCID+0x44>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0203 	bic.w	r2, r2, #3
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	7c1b      	ldrb	r3, [r3, #16]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_DSI_ConfigVideoMode+0x16>
 8003156:	2302      	movs	r3, #2
 8003158:	e1ee      	b.n	8003538 <HAL_DSI_ConfigVideoMode+0x3f4>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0201 	bic.w	r2, r2, #1
 800316e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0203 	bic.w	r2, r2, #3
 8003192:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b8b      	ldr	r3, [pc, #556]	; (80033e0 <HAL_DSI_ConfigVideoMode+0x29c>)
 80031b2:	400b      	ands	r3, r1
 80031b4:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b84      	ldr	r3, [pc, #528]	; (80033e4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80031d4:	400b      	ands	r3, r1
 80031d6:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b7b      	ldr	r3, [pc, #492]	; (80033e4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80031f6:	400b      	ands	r3, r1
 80031f8:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	699a      	ldr	r2, [r3, #24]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0203 	bic.w	r2, r2, #3
 800321a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68d9      	ldr	r1, [r3, #12]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0207 	bic.w	r2, r2, #7
 800323c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6959      	ldr	r1, [r3, #20]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	431a      	orrs	r2, r3
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 020f 	bic.w	r2, r2, #15
 800326a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6919      	ldr	r1, [r3, #16]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 020e 	bic.w	r2, r2, #14
 800328e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	005a      	lsls	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d110      	bne.n	80032d4 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032c0:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6919      	ldr	r1, [r3, #16]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b42      	ldr	r3, [pc, #264]	; (80033e8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80032e0:	400b      	ands	r3, r1
 80032e2:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8003302:	400b      	ands	r3, r1
 8003304:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4b32      	ldr	r3, [pc, #200]	; (80033ec <HAL_DSI_ConfigVideoMode+0x2a8>)
 8003324:	400b      	ands	r3, r1
 8003326:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b2a      	ldr	r3, [pc, #168]	; (80033f0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003346:	400b      	ands	r3, r1
 8003348:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b22      	ldr	r3, [pc, #136]	; (80033f0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003368:	400b      	ands	r3, r1
 800336a:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800338a:	400b      	ands	r3, r1
 800338c:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <HAL_DSI_ConfigVideoMode+0x29c>)
 80033ac:	400b      	ands	r3, r1
 80033ae:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033d0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033dc:	e00a      	b.n	80033f4 <HAL_DSI_ConfigVideoMode+0x2b0>
 80033de:	bf00      	nop
 80033e0:	ffffc000 	.word	0xffffc000
 80033e4:	ffffe000 	.word	0xffffe000
 80033e8:	fffff000 	.word	0xfffff000
 80033ec:	ffff8000 	.word	0xffff8000
 80033f0:	fffffc00 	.word	0xfffffc00
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800340a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6999      	ldr	r1, [r3, #24]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003416:	041a      	lsls	r2, r3, #16
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800342e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6999      	ldr	r1, [r3, #24]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003472:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034d8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034fa:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800351c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	7c1b      	ldrb	r3, [r3, #16]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8003556:	2302      	movs	r3, #2
 8003558:	e0c5      	b.n	80036e6 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0201 	bic.w	r2, r2, #1
 8003580:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0203 	bic.w	r2, r2, #3
 80035a6:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68d9      	ldr	r1, [r3, #12]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0207 	bic.w	r2, r2, #7
 80035c8:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6959      	ldr	r1, [r3, #20]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	431a      	orrs	r2, r3
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 020f 	bic.w	r2, r2, #15
 80035f6:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6919      	ldr	r1, [r3, #16]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 020e 	bic.w	r2, r2, #14
 800361a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	005a      	lsls	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	4b2c      	ldr	r3, [pc, #176]	; (80036f4 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 8003642:	400b      	ands	r3, r1
 8003644:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003668:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	431a      	orrs	r2, r3
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0202 	orr.w	r2, r2, #2
 80036da:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	ffff0000 	.word	0xffff0000

080036f8 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7c1b      	ldrb	r3, [r3, #16]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_DSI_ConfigCommand+0x16>
 800370a:	2302      	movs	r3, #2
 800370c:	e049      	b.n	80037a2 <HAL_DSI_ConfigCommand+0xaa>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <HAL_DSI_ConfigCommand+0xb8>)
 8003720:	400b      	ands	r3, r1
 8003722:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003732:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8003738:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800373e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8003744:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800374a:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8003750:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8003756:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 800375c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8003762:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8003768:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800376e:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0202 	bic.w	r2, r2, #2
 8003786:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	fef080ff 	.word	0xfef080ff

080037b4 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7c1b      	ldrb	r3, [r3, #16]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_DSI_ConfigFlowControl+0x16>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e016      	b.n	80037f8 <HAL_DSI_ConfigFlowControl+0x44>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 021f 	bic.w	r2, r2, #31
 80037de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7c1b      	ldrb	r3, [r3, #16]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_DSI_ConfigPhyTimer+0x16>
 8003816:	2302      	movs	r3, #2
 8003818:	e058      	b.n	80038cc <HAL_DSI_ConfigPhyTimer+0xc8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	4293      	cmp	r3, r2
 800382a:	bf38      	it	cc
 800382c:	4613      	movcc	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8003840:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	041a      	lsls	r2, r3, #16
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800386e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	041b      	lsls	r3, r3, #16
 8003884:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80038a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	021a      	lsls	r2, r3, #8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	7c1b      	ldrb	r3, [r3, #16]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_DSI_ConfigHostTimeouts+0x16>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e0b4      	b.n	8003a58 <HAL_DSI_ConfigHostTimeouts+0x180>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003902:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6899      	ldr	r1, [r3, #8]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	021a      	lsls	r2, r3, #8
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	b292      	uxth	r2, r2
 8003924:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	041a      	lsls	r2, r3, #16
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003946:	400b      	ands	r3, r1
 8003948:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003968:	400b      	ands	r3, r1
 800396a:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800398c:	400b      	ands	r3, r1
 800398e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80039b6:	400b      	ands	r3, r1
 80039b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80039e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003a0a:	400b      	ands	r3, r1
 8003a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003a34:	400b      	ands	r3, r1
 8003a36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6a1a      	ldr	r2, [r3, #32]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	ffff0000 	.word	0xffff0000

08003a68 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	7c1b      	ldrb	r3, [r3, #16]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_DSI_Start+0x14>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e02b      	b.n	8003ad4 <HAL_DSI_Start+0x6c>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60bb      	str	r3, [r7, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0208 	orr.w	r2, r2, #8
 8003ab8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	7c1b      	ldrb	r3, [r3, #16]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_DSI_ShortWrite+0x1a>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e010      	b.n	8003b1c <HAL_DSI_ShortWrite+0x3c>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f7ff f879 	bl	8002c02 <DSI_ShortWrite>
 8003b10:	4603      	mov	r3, r0
 8003b12:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	741a      	strb	r2, [r3, #16]

  return status;
 8003b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08c      	sub	sp, #48	; 0x30
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b34:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	7c1b      	ldrb	r3, [r3, #16]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_DSI_LongWrite+0x1e>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e084      	b.n	8003c4c <HAL_DSI_LongWrite+0x128>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b48:	f7fe f9e4 	bl	8001f14 <HAL_GetTick>
 8003b4c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003b4e:	e00c      	b.n	8003b6a <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003b50:	f7fe f9e0 	bl	8001f14 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b5e:	d904      	bls.n	8003b6a <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e070      	b.n	8003c4c <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0eb      	beq.n	8003b50 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	bf28      	it	cs
 8003b82:	2303      	movcs	r3, #3
 8003b84:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003b86:	2300      	movs	r3, #0
 8003b88:	623b      	str	r3, [r7, #32]
 8003b8a:	e00f      	b.n	8003bac <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	4413      	add	r3, r2
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	461a      	mov	r2, r3
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	623b      	str	r3, [r7, #32]
 8003bac:	6a3a      	ldr	r2, [r7, #32]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d3eb      	bcc.n	8003b8c <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4413      	add	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003bcc:	e028      	b.n	8003c20 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	bf28      	it	cs
 8003bd4:	2304      	movcs	r3, #4
 8003bd6:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	623b      	str	r3, [r7, #32]
 8003be0:	e00e      	b.n	8003c00 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	4413      	add	r3, r2
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	623b      	str	r3, [r7, #32]
 8003c00:	6a3a      	ldr	r2, [r7, #32]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d3ec      	bcc.n	8003be2 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1d3      	bne.n	8003bce <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003c2e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	3301      	adds	r3, #1
 8003c34:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	f7fe ffc6 	bl	8002bd0 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3728      	adds	r7, #40	; 0x28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	7c1b      	ldrb	r3, [r3, #16]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e01b      	b.n	8003ca2 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003c80:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	065a      	lsls	r2, r3, #25
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	; 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	e175      	b.n	8003fbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	f040 8164 	bne.w	8003fb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d003      	beq.n	8003cfe <HAL_GPIO_Init+0x4e>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b12      	cmp	r3, #18
 8003cfc:	d123      	bne.n	8003d46 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	08da      	lsrs	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3208      	adds	r2, #8
 8003d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	220f      	movs	r2, #15
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	691a      	ldr	r2, [r3, #16]
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	08da      	lsrs	r2, r3, #3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3208      	adds	r2, #8
 8003d40:	69b9      	ldr	r1, [r7, #24]
 8003d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	2203      	movs	r2, #3
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 0203 	and.w	r2, r3, #3
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d00b      	beq.n	8003d9a <HAL_GPIO_Init+0xea>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d007      	beq.n	8003d9a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d8e:	2b11      	cmp	r3, #17
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b12      	cmp	r3, #18
 8003d98:	d130      	bne.n	8003dfc <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	2203      	movs	r2, #3
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43db      	mvns	r3, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4013      	ands	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	f003 0201 	and.w	r2, r3, #1
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	2203      	movs	r2, #3
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 80be 	beq.w	8003fb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e3a:	4b65      	ldr	r3, [pc, #404]	; (8003fd0 <HAL_GPIO_Init+0x320>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	4a64      	ldr	r2, [pc, #400]	; (8003fd0 <HAL_GPIO_Init+0x320>)
 8003e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e44:	6453      	str	r3, [r2, #68]	; 0x44
 8003e46:	4b62      	ldr	r3, [pc, #392]	; (8003fd0 <HAL_GPIO_Init+0x320>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e52:	4a60      	ldr	r2, [pc, #384]	; (8003fd4 <HAL_GPIO_Init+0x324>)
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	3302      	adds	r3, #2
 8003e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	220f      	movs	r2, #15
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4013      	ands	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a57      	ldr	r2, [pc, #348]	; (8003fd8 <HAL_GPIO_Init+0x328>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d037      	beq.n	8003eee <HAL_GPIO_Init+0x23e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a56      	ldr	r2, [pc, #344]	; (8003fdc <HAL_GPIO_Init+0x32c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d031      	beq.n	8003eea <HAL_GPIO_Init+0x23a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a55      	ldr	r2, [pc, #340]	; (8003fe0 <HAL_GPIO_Init+0x330>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d02b      	beq.n	8003ee6 <HAL_GPIO_Init+0x236>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a54      	ldr	r2, [pc, #336]	; (8003fe4 <HAL_GPIO_Init+0x334>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d025      	beq.n	8003ee2 <HAL_GPIO_Init+0x232>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a53      	ldr	r2, [pc, #332]	; (8003fe8 <HAL_GPIO_Init+0x338>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01f      	beq.n	8003ede <HAL_GPIO_Init+0x22e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a52      	ldr	r2, [pc, #328]	; (8003fec <HAL_GPIO_Init+0x33c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d019      	beq.n	8003eda <HAL_GPIO_Init+0x22a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a51      	ldr	r2, [pc, #324]	; (8003ff0 <HAL_GPIO_Init+0x340>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <HAL_GPIO_Init+0x226>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a50      	ldr	r2, [pc, #320]	; (8003ff4 <HAL_GPIO_Init+0x344>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00d      	beq.n	8003ed2 <HAL_GPIO_Init+0x222>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a4f      	ldr	r2, [pc, #316]	; (8003ff8 <HAL_GPIO_Init+0x348>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d007      	beq.n	8003ece <HAL_GPIO_Init+0x21e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a4e      	ldr	r2, [pc, #312]	; (8003ffc <HAL_GPIO_Init+0x34c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d101      	bne.n	8003eca <HAL_GPIO_Init+0x21a>
 8003ec6:	2309      	movs	r3, #9
 8003ec8:	e012      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003eca:	230a      	movs	r3, #10
 8003ecc:	e010      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003ece:	2308      	movs	r3, #8
 8003ed0:	e00e      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003ed2:	2307      	movs	r3, #7
 8003ed4:	e00c      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003ed6:	2306      	movs	r3, #6
 8003ed8:	e00a      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003eda:	2305      	movs	r3, #5
 8003edc:	e008      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003ede:	2304      	movs	r3, #4
 8003ee0:	e006      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e004      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e002      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <HAL_GPIO_Init+0x240>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	f002 0203 	and.w	r2, r2, #3
 8003ef6:	0092      	lsls	r2, r2, #2
 8003ef8:	4093      	lsls	r3, r2
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f00:	4934      	ldr	r1, [pc, #208]	; (8003fd4 <HAL_GPIO_Init+0x324>)
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	089b      	lsrs	r3, r3, #2
 8003f06:	3302      	adds	r3, #2
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f0e:	4b3c      	ldr	r3, [pc, #240]	; (8004000 <HAL_GPIO_Init+0x350>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f32:	4a33      	ldr	r2, [pc, #204]	; (8004000 <HAL_GPIO_Init+0x350>)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f38:	4b31      	ldr	r3, [pc, #196]	; (8004000 <HAL_GPIO_Init+0x350>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f5c:	4a28      	ldr	r2, [pc, #160]	; (8004000 <HAL_GPIO_Init+0x350>)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f62:	4b27      	ldr	r3, [pc, #156]	; (8004000 <HAL_GPIO_Init+0x350>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f86:	4a1e      	ldr	r2, [pc, #120]	; (8004000 <HAL_GPIO_Init+0x350>)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f8c:	4b1c      	ldr	r3, [pc, #112]	; (8004000 <HAL_GPIO_Init+0x350>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fb0:	4a13      	ldr	r2, [pc, #76]	; (8004000 <HAL_GPIO_Init+0x350>)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	61fb      	str	r3, [r7, #28]
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2b0f      	cmp	r3, #15
 8003fc0:	f67f ae86 	bls.w	8003cd0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	3724      	adds	r7, #36	; 0x24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	40013800 	.word	0x40013800
 8003fd8:	40020000 	.word	0x40020000
 8003fdc:	40020400 	.word	0x40020400
 8003fe0:	40020800 	.word	0x40020800
 8003fe4:	40020c00 	.word	0x40020c00
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40021400 	.word	0x40021400
 8003ff0:	40021800 	.word	0x40021800
 8003ff4:	40021c00 	.word	0x40021c00
 8003ff8:	40022000 	.word	0x40022000
 8003ffc:	40022400 	.word	0x40022400
 8004000:	40013c00 	.word	0x40013c00

08004004 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	e0d9      	b.n	80041d4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004020:	2201      	movs	r2, #1
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4013      	ands	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	429a      	cmp	r2, r3
 8004038:	f040 80c9 	bne.w	80041ce <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800403c:	4a6a      	ldr	r2, [pc, #424]	; (80041e8 <HAL_GPIO_DeInit+0x1e4>)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	089b      	lsrs	r3, r3, #2
 8004042:	3302      	adds	r3, #2
 8004044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004048:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	220f      	movs	r2, #15
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	4013      	ands	r3, r2
 800405c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a62      	ldr	r2, [pc, #392]	; (80041ec <HAL_GPIO_DeInit+0x1e8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d037      	beq.n	80040d6 <HAL_GPIO_DeInit+0xd2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a61      	ldr	r2, [pc, #388]	; (80041f0 <HAL_GPIO_DeInit+0x1ec>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d031      	beq.n	80040d2 <HAL_GPIO_DeInit+0xce>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a60      	ldr	r2, [pc, #384]	; (80041f4 <HAL_GPIO_DeInit+0x1f0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d02b      	beq.n	80040ce <HAL_GPIO_DeInit+0xca>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a5f      	ldr	r2, [pc, #380]	; (80041f8 <HAL_GPIO_DeInit+0x1f4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d025      	beq.n	80040ca <HAL_GPIO_DeInit+0xc6>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a5e      	ldr	r2, [pc, #376]	; (80041fc <HAL_GPIO_DeInit+0x1f8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d01f      	beq.n	80040c6 <HAL_GPIO_DeInit+0xc2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a5d      	ldr	r2, [pc, #372]	; (8004200 <HAL_GPIO_DeInit+0x1fc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d019      	beq.n	80040c2 <HAL_GPIO_DeInit+0xbe>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a5c      	ldr	r2, [pc, #368]	; (8004204 <HAL_GPIO_DeInit+0x200>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <HAL_GPIO_DeInit+0xba>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a5b      	ldr	r2, [pc, #364]	; (8004208 <HAL_GPIO_DeInit+0x204>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00d      	beq.n	80040ba <HAL_GPIO_DeInit+0xb6>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a5a      	ldr	r2, [pc, #360]	; (800420c <HAL_GPIO_DeInit+0x208>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d007      	beq.n	80040b6 <HAL_GPIO_DeInit+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a59      	ldr	r2, [pc, #356]	; (8004210 <HAL_GPIO_DeInit+0x20c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d101      	bne.n	80040b2 <HAL_GPIO_DeInit+0xae>
 80040ae:	2309      	movs	r3, #9
 80040b0:	e012      	b.n	80040d8 <HAL_GPIO_DeInit+0xd4>
 80040b2:	230a      	movs	r3, #10
 80040b4:	e010      	b.n	80040d8 <HAL_GPIO_DeInit+0xd4>
 80040b6:	2308      	movs	r3, #8
 80040b8:	e00e      	b.n	80040d8 <HAL_GPIO_DeInit+0xd4>
 80040ba:	2307      	movs	r3, #7
 80040bc:	e00c      	b.n	80040d8 <HAL_GPIO_DeInit+0xd4>
 80040be:	2306      	movs	r3, #6
 80040c0:	e00a      	b.n	80040d8 <HAL_GPIO_DeInit+0xd4>
 80040c2:	2305      	movs	r3, #5
 80040c4:	e008      	b.n	80040d8 <HAL_GPIO_DeInit+0xd4>
 80040c6:	2304      	movs	r3, #4
 80040c8:	e006      	b.n	80040d8 <HAL_GPIO_DeInit+0xd4>
 80040ca:	2303      	movs	r3, #3
 80040cc:	e004      	b.n	80040d8 <HAL_GPIO_DeInit+0xd4>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e002      	b.n	80040d8 <HAL_GPIO_DeInit+0xd4>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <HAL_GPIO_DeInit+0xd4>
 80040d6:	2300      	movs	r3, #0
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	f002 0203 	and.w	r2, r2, #3
 80040de:	0092      	lsls	r2, r2, #2
 80040e0:	4093      	lsls	r3, r2
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d132      	bne.n	800414e <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	220f      	movs	r2, #15
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80040f8:	4a3b      	ldr	r2, [pc, #236]	; (80041e8 <HAL_GPIO_DeInit+0x1e4>)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	089b      	lsrs	r3, r3, #2
 80040fe:	3302      	adds	r3, #2
 8004100:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	43da      	mvns	r2, r3
 8004108:	4837      	ldr	r0, [pc, #220]	; (80041e8 <HAL_GPIO_DeInit+0x1e4>)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	089b      	lsrs	r3, r3, #2
 800410e:	400a      	ands	r2, r1
 8004110:	3302      	adds	r3, #2
 8004112:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004116:	4b3f      	ldr	r3, [pc, #252]	; (8004214 <HAL_GPIO_DeInit+0x210>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	43db      	mvns	r3, r3
 800411e:	493d      	ldr	r1, [pc, #244]	; (8004214 <HAL_GPIO_DeInit+0x210>)
 8004120:	4013      	ands	r3, r2
 8004122:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004124:	4b3b      	ldr	r3, [pc, #236]	; (8004214 <HAL_GPIO_DeInit+0x210>)
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	43db      	mvns	r3, r3
 800412c:	4939      	ldr	r1, [pc, #228]	; (8004214 <HAL_GPIO_DeInit+0x210>)
 800412e:	4013      	ands	r3, r2
 8004130:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004132:	4b38      	ldr	r3, [pc, #224]	; (8004214 <HAL_GPIO_DeInit+0x210>)
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	43db      	mvns	r3, r3
 800413a:	4936      	ldr	r1, [pc, #216]	; (8004214 <HAL_GPIO_DeInit+0x210>)
 800413c:	4013      	ands	r3, r2
 800413e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004140:	4b34      	ldr	r3, [pc, #208]	; (8004214 <HAL_GPIO_DeInit+0x210>)
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	43db      	mvns	r3, r3
 8004148:	4932      	ldr	r1, [pc, #200]	; (8004214 <HAL_GPIO_DeInit+0x210>)
 800414a:	4013      	ands	r3, r2
 800414c:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	2103      	movs	r1, #3
 8004158:	fa01 f303 	lsl.w	r3, r1, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	401a      	ands	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	08da      	lsrs	r2, r3, #3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3208      	adds	r2, #8
 800416c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	220f      	movs	r2, #15
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43db      	mvns	r3, r3
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	08d2      	lsrs	r2, r2, #3
 8004184:	4019      	ands	r1, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3208      	adds	r2, #8
 800418a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	2103      	movs	r1, #3
 8004198:	fa01 f303 	lsl.w	r3, r1, r3
 800419c:	43db      	mvns	r3, r3
 800419e:	401a      	ands	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	2101      	movs	r1, #1
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	fa01 f303 	lsl.w	r3, r1, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	401a      	ands	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	2103      	movs	r1, #3
 80041c2:	fa01 f303 	lsl.w	r3, r1, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	401a      	ands	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	3301      	adds	r3, #1
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2b0f      	cmp	r3, #15
 80041d8:	f67f af22 	bls.w	8004020 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80041dc:	bf00      	nop
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	40013800 	.word	0x40013800
 80041ec:	40020000 	.word	0x40020000
 80041f0:	40020400 	.word	0x40020400
 80041f4:	40020800 	.word	0x40020800
 80041f8:	40020c00 	.word	0x40020c00
 80041fc:	40021000 	.word	0x40021000
 8004200:	40021400 	.word	0x40021400
 8004204:	40021800 	.word	0x40021800
 8004208:	40021c00 	.word	0x40021c00
 800420c:	40022000 	.word	0x40022000
 8004210:	40022400 	.word	0x40022400
 8004214:	40013c00 	.word	0x40013c00

08004218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	807b      	strh	r3, [r7, #2]
 8004224:	4613      	mov	r3, r2
 8004226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004228:	787b      	ldrb	r3, [r7, #1]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004234:	e003      	b.n	800423e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004236:	887b      	ldrh	r3, [r7, #2]
 8004238:	041a      	lsls	r2, r3, #16
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	619a      	str	r2, [r3, #24]
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
	...

0800424c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004256:	4b08      	ldr	r3, [pc, #32]	; (8004278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	4013      	ands	r3, r2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d006      	beq.n	8004270 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004262:	4a05      	ldr	r2, [pc, #20]	; (8004278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004264:	88fb      	ldrh	r3, [r7, #6]
 8004266:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f806 	bl	800427c <HAL_GPIO_EXTI_Callback>
  }
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40013c00 	.word	0x40013c00

0800427c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e07f      	b.n	80043a6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f003 fe54 	bl	8007f68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0201 	bic.w	r2, r2, #1
 80042d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d107      	bne.n	800430e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800430a:	609a      	str	r2, [r3, #8]
 800430c:	e006      	b.n	800431c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800431a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d104      	bne.n	800432e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800432c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6859      	ldr	r1, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4b1d      	ldr	r3, [pc, #116]	; (80043b0 <HAL_I2C_Init+0x11c>)
 800433a:	430b      	orrs	r3, r1
 800433c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800434c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	ea42 0103 	orr.w	r1, r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	021a      	lsls	r2, r3, #8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69d9      	ldr	r1, [r3, #28]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1a      	ldr	r2, [r3, #32]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	02008000 	.word	0x02008000

080043b4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e021      	b.n	800440a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2224      	movs	r2, #36	; 0x24
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0201 	bic.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f003 fe06 	bl	8007ff0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	4608      	mov	r0, r1
 800441e:	4611      	mov	r1, r2
 8004420:	461a      	mov	r2, r3
 8004422:	4603      	mov	r3, r0
 8004424:	817b      	strh	r3, [r7, #10]
 8004426:	460b      	mov	r3, r1
 8004428:	813b      	strh	r3, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b20      	cmp	r3, #32
 8004438:	f040 80f9 	bne.w	800462e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_I2C_Mem_Write+0x34>
 8004442:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004444:	2b00      	cmp	r3, #0
 8004446:	d105      	bne.n	8004454 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800444e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0ed      	b.n	8004630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_I2C_Mem_Write+0x4e>
 800445e:	2302      	movs	r3, #2
 8004460:	e0e6      	b.n	8004630 <HAL_I2C_Mem_Write+0x21c>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800446a:	f7fd fd53 	bl	8001f14 <HAL_GetTick>
 800446e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	2319      	movs	r3, #25
 8004476:	2201      	movs	r2, #1
 8004478:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fad1 	bl	8004a24 <I2C_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0d1      	b.n	8004630 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2221      	movs	r2, #33	; 0x21
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2240      	movs	r2, #64	; 0x40
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a3a      	ldr	r2, [r7, #32]
 80044a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044b4:	88f8      	ldrh	r0, [r7, #6]
 80044b6:	893a      	ldrh	r2, [r7, #8]
 80044b8:	8979      	ldrh	r1, [r7, #10]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	4603      	mov	r3, r0
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f9e1 	bl	800488c <I2C_RequestMemoryWrite>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0a9      	b.n	8004630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2bff      	cmp	r3, #255	; 0xff
 80044e4:	d90e      	bls.n	8004504 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	22ff      	movs	r2, #255	; 0xff
 80044ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	8979      	ldrh	r1, [r7, #10]
 80044f4:	2300      	movs	r3, #0
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 fbb3 	bl	8004c68 <I2C_TransferConfig>
 8004502:	e00f      	b.n	8004524 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004512:	b2da      	uxtb	r2, r3
 8004514:	8979      	ldrh	r1, [r7, #10]
 8004516:	2300      	movs	r3, #0
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 fba2 	bl	8004c68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 fabb 	bl	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e07b      	b.n	8004630 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	781a      	ldrb	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d034      	beq.n	80045dc <HAL_I2C_Mem_Write+0x1c8>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004576:	2b00      	cmp	r3, #0
 8004578:	d130      	bne.n	80045dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	2200      	movs	r2, #0
 8004582:	2180      	movs	r1, #128	; 0x80
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fa4d 	bl	8004a24 <I2C_WaitOnFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e04d      	b.n	8004630 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	2bff      	cmp	r3, #255	; 0xff
 800459c:	d90e      	bls.n	80045bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	22ff      	movs	r2, #255	; 0xff
 80045a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	8979      	ldrh	r1, [r7, #10]
 80045ac:	2300      	movs	r3, #0
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 fb57 	bl	8004c68 <I2C_TransferConfig>
 80045ba:	e00f      	b.n	80045dc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	8979      	ldrh	r1, [r7, #10]
 80045ce:	2300      	movs	r3, #0
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 fb46 	bl	8004c68 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d19e      	bne.n	8004524 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 fa9a 	bl	8004b24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e01a      	b.n	8004630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2220      	movs	r2, #32
 8004600:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6859      	ldr	r1, [r3, #4]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <HAL_I2C_Mem_Write+0x224>)
 800460e:	400b      	ands	r3, r1
 8004610:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	e000      	b.n	8004630 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800462e:	2302      	movs	r3, #2
  }
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	fe00e800 	.word	0xfe00e800

0800463c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b088      	sub	sp, #32
 8004640:	af02      	add	r7, sp, #8
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	4608      	mov	r0, r1
 8004646:	4611      	mov	r1, r2
 8004648:	461a      	mov	r2, r3
 800464a:	4603      	mov	r3, r0
 800464c:	817b      	strh	r3, [r7, #10]
 800464e:	460b      	mov	r3, r1
 8004650:	813b      	strh	r3, [r7, #8]
 8004652:	4613      	mov	r3, r2
 8004654:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b20      	cmp	r3, #32
 8004660:	f040 80fd 	bne.w	800485e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <HAL_I2C_Mem_Read+0x34>
 800466a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800466c:	2b00      	cmp	r3, #0
 800466e:	d105      	bne.n	800467c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004676:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e0f1      	b.n	8004860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_I2C_Mem_Read+0x4e>
 8004686:	2302      	movs	r3, #2
 8004688:	e0ea      	b.n	8004860 <HAL_I2C_Mem_Read+0x224>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004692:	f7fd fc3f 	bl	8001f14 <HAL_GetTick>
 8004696:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	2319      	movs	r3, #25
 800469e:	2201      	movs	r2, #1
 80046a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f9bd 	bl	8004a24 <I2C_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0d5      	b.n	8004860 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2222      	movs	r2, #34	; 0x22
 80046b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2240      	movs	r2, #64	; 0x40
 80046c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a3a      	ldr	r2, [r7, #32]
 80046ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046dc:	88f8      	ldrh	r0, [r7, #6]
 80046de:	893a      	ldrh	r2, [r7, #8]
 80046e0:	8979      	ldrh	r1, [r7, #10]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	4603      	mov	r3, r0
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 f921 	bl	8004934 <I2C_RequestMemoryRead>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0ad      	b.n	8004860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	2bff      	cmp	r3, #255	; 0xff
 800470c:	d90e      	bls.n	800472c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	22ff      	movs	r2, #255	; 0xff
 8004712:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004718:	b2da      	uxtb	r2, r3
 800471a:	8979      	ldrh	r1, [r7, #10]
 800471c:	4b52      	ldr	r3, [pc, #328]	; (8004868 <HAL_I2C_Mem_Read+0x22c>)
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 fa9f 	bl	8004c68 <I2C_TransferConfig>
 800472a:	e00f      	b.n	800474c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473a:	b2da      	uxtb	r2, r3
 800473c:	8979      	ldrh	r1, [r7, #10]
 800473e:	4b4a      	ldr	r3, [pc, #296]	; (8004868 <HAL_I2C_Mem_Read+0x22c>)
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fa8e 	bl	8004c68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	2200      	movs	r2, #0
 8004754:	2104      	movs	r1, #4
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f964 	bl	8004a24 <I2C_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e07c      	b.n	8004860 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d034      	beq.n	800480c <HAL_I2C_Mem_Read+0x1d0>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d130      	bne.n	800480c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	2200      	movs	r2, #0
 80047b2:	2180      	movs	r1, #128	; 0x80
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f935 	bl	8004a24 <I2C_WaitOnFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e04d      	b.n	8004860 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2bff      	cmp	r3, #255	; 0xff
 80047cc:	d90e      	bls.n	80047ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	22ff      	movs	r2, #255	; 0xff
 80047d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	8979      	ldrh	r1, [r7, #10]
 80047dc:	2300      	movs	r3, #0
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fa3f 	bl	8004c68 <I2C_TransferConfig>
 80047ea:	e00f      	b.n	800480c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	8979      	ldrh	r1, [r7, #10]
 80047fe:	2300      	movs	r3, #0
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fa2e 	bl	8004c68 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d19a      	bne.n	800474c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f982 	bl	8004b24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e01a      	b.n	8004860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2220      	movs	r2, #32
 8004830:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6859      	ldr	r1, [r3, #4]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_I2C_Mem_Read+0x230>)
 800483e:	400b      	ands	r3, r1
 8004840:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	e000      	b.n	8004860 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800485e:	2302      	movs	r3, #2
  }
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	80002400 	.word	0x80002400
 800486c:	fe00e800 	.word	0xfe00e800

08004870 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800487e:	b2db      	uxtb	r3, r3
}
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	4608      	mov	r0, r1
 8004896:	4611      	mov	r1, r2
 8004898:	461a      	mov	r2, r3
 800489a:	4603      	mov	r3, r0
 800489c:	817b      	strh	r3, [r7, #10]
 800489e:	460b      	mov	r3, r1
 80048a0:	813b      	strh	r3, [r7, #8]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	8979      	ldrh	r1, [r7, #10]
 80048ac:	4b20      	ldr	r3, [pc, #128]	; (8004930 <I2C_RequestMemoryWrite+0xa4>)
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f9d7 	bl	8004c68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	69b9      	ldr	r1, [r7, #24]
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f8f0 	bl	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e02c      	b.n	8004928 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d105      	bne.n	80048e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048d4:	893b      	ldrh	r3, [r7, #8]
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	629a      	str	r2, [r3, #40]	; 0x28
 80048de:	e015      	b.n	800490c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048e0:	893b      	ldrh	r3, [r7, #8]
 80048e2:	0a1b      	lsrs	r3, r3, #8
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	69b9      	ldr	r1, [r7, #24]
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f8d6 	bl	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e012      	b.n	8004928 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004902:	893b      	ldrh	r3, [r7, #8]
 8004904:	b2da      	uxtb	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2200      	movs	r2, #0
 8004914:	2180      	movs	r1, #128	; 0x80
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f884 	bl	8004a24 <I2C_WaitOnFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	80002000 	.word	0x80002000

08004934 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	4608      	mov	r0, r1
 800493e:	4611      	mov	r1, r2
 8004940:	461a      	mov	r2, r3
 8004942:	4603      	mov	r3, r0
 8004944:	817b      	strh	r3, [r7, #10]
 8004946:	460b      	mov	r3, r1
 8004948:	813b      	strh	r3, [r7, #8]
 800494a:	4613      	mov	r3, r2
 800494c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	b2da      	uxtb	r2, r3
 8004952:	8979      	ldrh	r1, [r7, #10]
 8004954:	4b20      	ldr	r3, [pc, #128]	; (80049d8 <I2C_RequestMemoryRead+0xa4>)
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	2300      	movs	r3, #0
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f984 	bl	8004c68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	69b9      	ldr	r1, [r7, #24]
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f89d 	bl	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e02c      	b.n	80049ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004974:	88fb      	ldrh	r3, [r7, #6]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d105      	bne.n	8004986 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800497a:	893b      	ldrh	r3, [r7, #8]
 800497c:	b2da      	uxtb	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28
 8004984:	e015      	b.n	80049b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004986:	893b      	ldrh	r3, [r7, #8]
 8004988:	0a1b      	lsrs	r3, r3, #8
 800498a:	b29b      	uxth	r3, r3
 800498c:	b2da      	uxtb	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004994:	69fa      	ldr	r2, [r7, #28]
 8004996:	69b9      	ldr	r1, [r7, #24]
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f883 	bl	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e012      	b.n	80049ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049a8:	893b      	ldrh	r3, [r7, #8]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2200      	movs	r2, #0
 80049ba:	2140      	movs	r1, #64	; 0x40
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f831 	bl	8004a24 <I2C_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	80002000 	.word	0x80002000

080049dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d103      	bne.n	80049fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d007      	beq.n	8004a18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	619a      	str	r2, [r3, #24]
  }
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a34:	e022      	b.n	8004a7c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3c:	d01e      	beq.n	8004a7c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3e:	f7fd fa69 	bl	8001f14 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d302      	bcc.n	8004a54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d113      	bne.n	8004a7c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a58:	f043 0220 	orr.w	r2, r3, #32
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e00f      	b.n	8004a9c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4013      	ands	r3, r2
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2301      	moveq	r3, #1
 8004a8e:	2300      	movne	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d0cd      	beq.n	8004a36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ab0:	e02c      	b.n	8004b0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f870 	bl	8004b9c <I2C_IsAcknowledgeFailed>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e02a      	b.n	8004b1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d01e      	beq.n	8004b0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ace:	f7fd fa21 	bl	8001f14 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d302      	bcc.n	8004ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d113      	bne.n	8004b0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae8:	f043 0220 	orr.w	r2, r3, #32
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e007      	b.n	8004b1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d1cb      	bne.n	8004ab2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b30:	e028      	b.n	8004b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f830 	bl	8004b9c <I2C_IsAcknowledgeFailed>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e026      	b.n	8004b94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b46:	f7fd f9e5 	bl	8001f14 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d302      	bcc.n	8004b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d113      	bne.n	8004b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b60:	f043 0220 	orr.w	r2, r3, #32
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e007      	b.n	8004b94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d1cf      	bne.n	8004b32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f003 0310 	and.w	r3, r3, #16
 8004bb2:	2b10      	cmp	r3, #16
 8004bb4:	d151      	bne.n	8004c5a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bb6:	e022      	b.n	8004bfe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbe:	d01e      	beq.n	8004bfe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc0:	f7fd f9a8 	bl	8001f14 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d302      	bcc.n	8004bd6 <I2C_IsAcknowledgeFailed+0x3a>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d113      	bne.n	8004bfe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	f043 0220 	orr.w	r2, r3, #32
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e02e      	b.n	8004c5c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d1d5      	bne.n	8004bb8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2210      	movs	r2, #16
 8004c12:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f7ff fedd 	bl	80049dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6859      	ldr	r1, [r3, #4]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <I2C_IsAcknowledgeFailed+0xc8>)
 8004c2e:	400b      	ands	r3, r1
 8004c30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	f043 0204 	orr.w	r2, r3, #4
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	fe00e800 	.word	0xfe00e800

08004c68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	607b      	str	r3, [r7, #4]
 8004c72:	460b      	mov	r3, r1
 8004c74:	817b      	strh	r3, [r7, #10]
 8004c76:	4613      	mov	r3, r2
 8004c78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	0d5b      	lsrs	r3, r3, #21
 8004c84:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004c88:	4b0d      	ldr	r3, [pc, #52]	; (8004cc0 <I2C_TransferConfig+0x58>)
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	ea02 0103 	and.w	r1, r2, r3
 8004c92:	897b      	ldrh	r3, [r7, #10]
 8004c94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c98:	7a7b      	ldrb	r3, [r7, #9]
 8004c9a:	041b      	lsls	r3, r3, #16
 8004c9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004cb2:	bf00      	nop
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	03ff63ff 	.word	0x03ff63ff

08004cc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d138      	bne.n	8004d4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e032      	b.n	8004d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2224      	movs	r2, #36	; 0x24
 8004cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0201 	bic.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6819      	ldr	r1, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e000      	b.n	8004d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
  }
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b085      	sub	sp, #20
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d139      	bne.n	8004de4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e033      	b.n	8004de6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2224      	movs	r2, #36	; 0x24
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0201 	bic.w	r2, r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004dac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	e000      	b.n	8004de6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004de4:	2302      	movs	r3, #2
  }
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e0bf      	b.n	8004f86 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f003 f906 	bl	800802c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699a      	ldr	r2, [r3, #24]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004e36:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6999      	ldr	r1, [r3, #24]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e4c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6899      	ldr	r1, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4b4a      	ldr	r3, [pc, #296]	; (8004f90 <HAL_LTDC_Init+0x19c>)
 8004e68:	400b      	ands	r3, r1
 8004e6a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	041b      	lsls	r3, r3, #16
 8004e72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6899      	ldr	r1, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68d9      	ldr	r1, [r3, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	4b3e      	ldr	r3, [pc, #248]	; (8004f90 <HAL_LTDC_Init+0x19c>)
 8004e96:	400b      	ands	r3, r1
 8004e98:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	041b      	lsls	r3, r3, #16
 8004ea0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68d9      	ldr	r1, [r3, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1a      	ldr	r2, [r3, #32]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6919      	ldr	r1, [r3, #16]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	4b33      	ldr	r3, [pc, #204]	; (8004f90 <HAL_LTDC_Init+0x19c>)
 8004ec4:	400b      	ands	r3, r1
 8004ec6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	041b      	lsls	r3, r3, #16
 8004ece:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6919      	ldr	r1, [r3, #16]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6959      	ldr	r1, [r3, #20]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	4b27      	ldr	r3, [pc, #156]	; (8004f90 <HAL_LTDC_Init+0x19c>)
 8004ef2:	400b      	ands	r3, r1
 8004ef4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	041b      	lsls	r3, r3, #16
 8004efc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6959      	ldr	r1, [r3, #20]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f1a:	021b      	lsls	r3, r3, #8
 8004f1c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004f24:	041b      	lsls	r3, r3, #16
 8004f26:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0206 	orr.w	r2, r2, #6
 8004f62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0201 	orr.w	r2, r2, #1
 8004f72:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	f000f800 	.word	0xf000f800

08004f94 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004f94:	b5b0      	push	{r4, r5, r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_LTDC_ConfigLayer+0x1a>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e02c      	b.n	8005008 <HAL_LTDC_ConfigLayer+0x74>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2134      	movs	r1, #52	; 0x34
 8004fc4:	fb01 f303 	mul.w	r3, r1, r3
 8004fc8:	4413      	add	r3, r2
 8004fca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	4614      	mov	r4, r2
 8004fd2:	461d      	mov	r5, r3
 8004fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f811 	bl	8005010 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bdb0      	pop	{r4, r5, r7, pc}

08005010 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005010:	b480      	push	{r7}
 8005012:	b089      	sub	sp, #36	; 0x24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	0c1b      	lsrs	r3, r3, #16
 8005028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800502c:	4413      	add	r3, r2
 800502e:	041b      	lsls	r3, r3, #16
 8005030:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	01db      	lsls	r3, r3, #7
 800503c:	4413      	add	r3, r2
 800503e:	3384      	adds	r3, #132	; 0x84
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	6812      	ldr	r2, [r2, #0]
 8005046:	4611      	mov	r1, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	01d2      	lsls	r2, r2, #7
 800504c:	440a      	add	r2, r1
 800504e:	3284      	adds	r2, #132	; 0x84
 8005050:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005054:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	0c1b      	lsrs	r3, r3, #16
 8005062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005066:	4413      	add	r3, r2
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4619      	mov	r1, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	01db      	lsls	r3, r3, #7
 8005074:	440b      	add	r3, r1
 8005076:	3384      	adds	r3, #132	; 0x84
 8005078:	4619      	mov	r1, r3
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	4313      	orrs	r3, r2
 800507e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800508e:	4413      	add	r3, r2
 8005090:	041b      	lsls	r3, r3, #16
 8005092:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	461a      	mov	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	01db      	lsls	r3, r3, #7
 800509e:	4413      	add	r3, r2
 80050a0:	3384      	adds	r3, #132	; 0x84
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	4611      	mov	r1, r2
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	01d2      	lsls	r2, r2, #7
 80050ae:	440a      	add	r2, r1
 80050b0:	3284      	adds	r2, #132	; 0x84
 80050b2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80050b6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050c6:	4413      	add	r3, r2
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4619      	mov	r1, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	01db      	lsls	r3, r3, #7
 80050d4:	440b      	add	r3, r1
 80050d6:	3384      	adds	r3, #132	; 0x84
 80050d8:	4619      	mov	r1, r3
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	4313      	orrs	r3, r2
 80050de:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	01db      	lsls	r3, r3, #7
 80050ea:	4413      	add	r3, r2
 80050ec:	3384      	adds	r3, #132	; 0x84
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	4611      	mov	r1, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	01d2      	lsls	r2, r2, #7
 80050fa:	440a      	add	r2, r1
 80050fc:	3284      	adds	r2, #132	; 0x84
 80050fe:	f023 0307 	bic.w	r3, r3, #7
 8005102:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	01db      	lsls	r3, r3, #7
 800510e:	4413      	add	r3, r2
 8005110:	3384      	adds	r3, #132	; 0x84
 8005112:	461a      	mov	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005120:	021b      	lsls	r3, r3, #8
 8005122:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800512a:	041b      	lsls	r3, r3, #16
 800512c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	061b      	lsls	r3, r3, #24
 8005134:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	01db      	lsls	r3, r3, #7
 8005140:	4413      	add	r3, r2
 8005142:	3384      	adds	r3, #132	; 0x84
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	01db      	lsls	r3, r3, #7
 8005150:	4413      	add	r3, r2
 8005152:	3384      	adds	r3, #132	; 0x84
 8005154:	461a      	mov	r2, r3
 8005156:	2300      	movs	r3, #0
 8005158:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005160:	461a      	mov	r2, r3
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	431a      	orrs	r2, r3
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	431a      	orrs	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4619      	mov	r1, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	01db      	lsls	r3, r3, #7
 8005174:	440b      	add	r3, r1
 8005176:	3384      	adds	r3, #132	; 0x84
 8005178:	4619      	mov	r1, r3
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	4313      	orrs	r3, r2
 800517e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	01db      	lsls	r3, r3, #7
 800518a:	4413      	add	r3, r2
 800518c:	3384      	adds	r3, #132	; 0x84
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	4611      	mov	r1, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	01d2      	lsls	r2, r2, #7
 800519a:	440a      	add	r2, r1
 800519c:	3284      	adds	r2, #132	; 0x84
 800519e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051a2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	01db      	lsls	r3, r3, #7
 80051ae:	4413      	add	r3, r2
 80051b0:	3384      	adds	r3, #132	; 0x84
 80051b2:	461a      	mov	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	01db      	lsls	r3, r3, #7
 80051c4:	4413      	add	r3, r2
 80051c6:	3384      	adds	r3, #132	; 0x84
 80051c8:	69da      	ldr	r2, [r3, #28]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4619      	mov	r1, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	01db      	lsls	r3, r3, #7
 80051d4:	440b      	add	r3, r1
 80051d6:	3384      	adds	r3, #132	; 0x84
 80051d8:	4619      	mov	r1, r3
 80051da:	4b58      	ldr	r3, [pc, #352]	; (800533c <LTDC_SetConfig+0x32c>)
 80051dc:	4013      	ands	r3, r2
 80051de:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	68f9      	ldr	r1, [r7, #12]
 80051ea:	6809      	ldr	r1, [r1, #0]
 80051ec:	4608      	mov	r0, r1
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	01c9      	lsls	r1, r1, #7
 80051f2:	4401      	add	r1, r0
 80051f4:	3184      	adds	r1, #132	; 0x84
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	01db      	lsls	r3, r3, #7
 8005204:	4413      	add	r3, r2
 8005206:	3384      	adds	r3, #132	; 0x84
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	01db      	lsls	r3, r3, #7
 8005214:	4413      	add	r3, r2
 8005216:	3384      	adds	r3, #132	; 0x84
 8005218:	461a      	mov	r2, r3
 800521a:	2300      	movs	r3, #0
 800521c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	461a      	mov	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	01db      	lsls	r3, r3, #7
 8005228:	4413      	add	r3, r2
 800522a:	3384      	adds	r3, #132	; 0x84
 800522c:	461a      	mov	r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d102      	bne.n	8005242 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800523c:	2304      	movs	r3, #4
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	e01b      	b.n	800527a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d102      	bne.n	8005250 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800524a:	2303      	movs	r3, #3
 800524c:	61fb      	str	r3, [r7, #28]
 800524e:	e014      	b.n	800527a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	2b04      	cmp	r3, #4
 8005256:	d00b      	beq.n	8005270 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800525c:	2b02      	cmp	r3, #2
 800525e:	d007      	beq.n	8005270 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005264:	2b03      	cmp	r3, #3
 8005266:	d003      	beq.n	8005270 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800526c:	2b07      	cmp	r3, #7
 800526e:	d102      	bne.n	8005276 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005270:	2302      	movs	r3, #2
 8005272:	61fb      	str	r3, [r7, #28]
 8005274:	e001      	b.n	800527a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005276:	2301      	movs	r3, #1
 8005278:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	01db      	lsls	r3, r3, #7
 8005284:	4413      	add	r3, r2
 8005286:	3384      	adds	r3, #132	; 0x84
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	6812      	ldr	r2, [r2, #0]
 800528e:	4611      	mov	r1, r2
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	01d2      	lsls	r2, r2, #7
 8005294:	440a      	add	r2, r1
 8005296:	3284      	adds	r2, #132	; 0x84
 8005298:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800529c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	fb02 f303 	mul.w	r3, r2, r3
 80052a8:	041a      	lsls	r2, r3, #16
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	6859      	ldr	r1, [r3, #4]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	1acb      	subs	r3, r1, r3
 80052b4:	69f9      	ldr	r1, [r7, #28]
 80052b6:	fb01 f303 	mul.w	r3, r1, r3
 80052ba:	3303      	adds	r3, #3
 80052bc:	68f9      	ldr	r1, [r7, #12]
 80052be:	6809      	ldr	r1, [r1, #0]
 80052c0:	4608      	mov	r0, r1
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	01c9      	lsls	r1, r1, #7
 80052c6:	4401      	add	r1, r0
 80052c8:	3184      	adds	r1, #132	; 0x84
 80052ca:	4313      	orrs	r3, r2
 80052cc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	01db      	lsls	r3, r3, #7
 80052d8:	4413      	add	r3, r2
 80052da:	3384      	adds	r3, #132	; 0x84
 80052dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4619      	mov	r1, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	01db      	lsls	r3, r3, #7
 80052e8:	440b      	add	r3, r1
 80052ea:	3384      	adds	r3, #132	; 0x84
 80052ec:	4619      	mov	r1, r3
 80052ee:	4b14      	ldr	r3, [pc, #80]	; (8005340 <LTDC_SetConfig+0x330>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	01db      	lsls	r3, r3, #7
 80052fe:	4413      	add	r3, r2
 8005300:	3384      	adds	r3, #132	; 0x84
 8005302:	461a      	mov	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	01db      	lsls	r3, r3, #7
 8005314:	4413      	add	r3, r2
 8005316:	3384      	adds	r3, #132	; 0x84
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	4611      	mov	r1, r2
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	01d2      	lsls	r2, r2, #7
 8005324:	440a      	add	r2, r1
 8005326:	3284      	adds	r2, #132	; 0x84
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	6013      	str	r3, [r2, #0]
}
 800532e:	bf00      	nop
 8005330:	3724      	adds	r7, #36	; 0x24
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	fffff8f8 	.word	0xfffff8f8
 8005340:	fffff800 	.word	0xfffff800

08005344 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8005356:	2200      	movs	r2, #0
 8005358:	e001      	b.n	800535e <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800535a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d102      	bne.n	8005370 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800536a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800536e:	e000      	b.n	8005372 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8005370:	2200      	movs	r2, #0
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d102      	bne.n	8005384 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800537e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005382:	e000      	b.n	8005386 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8005384:	2200      	movs	r2, #0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538e:	1e5a      	subs	r2, r3, #1
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	4413      	add	r3, r2
 800539e:	1e5a      	subs	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	441a      	add	r2, r3
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	4413      	add	r3, r2
 80053b4:	1e5a      	subs	r2, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	441a      	add	r2, r3
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	441a      	add	r2, r3
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ce:	4413      	add	r3, r2
 80053d0:	1e5a      	subs	r2, r3, #1
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80053ee:	4b23      	ldr	r3, [pc, #140]	; (800547c <HAL_PWREx_EnableOverDrive+0x98>)
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	4a22      	ldr	r2, [pc, #136]	; (800547c <HAL_PWREx_EnableOverDrive+0x98>)
 80053f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f8:	6413      	str	r3, [r2, #64]	; 0x40
 80053fa:	4b20      	ldr	r3, [pc, #128]	; (800547c <HAL_PWREx_EnableOverDrive+0x98>)
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005406:	4b1e      	ldr	r3, [pc, #120]	; (8005480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1d      	ldr	r2, [pc, #116]	; (8005480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800540c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005410:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005412:	f7fc fd7f 	bl	8001f14 <HAL_GetTick>
 8005416:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005418:	e009      	b.n	800542e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800541a:	f7fc fd7b 	bl	8001f14 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005428:	d901      	bls.n	800542e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e022      	b.n	8005474 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800542e:	4b14      	ldr	r3, [pc, #80]	; (8005480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543a:	d1ee      	bne.n	800541a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800543c:	4b10      	ldr	r3, [pc, #64]	; (8005480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a0f      	ldr	r2, [pc, #60]	; (8005480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005446:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005448:	f7fc fd64 	bl	8001f14 <HAL_GetTick>
 800544c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800544e:	e009      	b.n	8005464 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005450:	f7fc fd60 	bl	8001f14 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800545e:	d901      	bls.n	8005464 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e007      	b.n	8005474 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005464:	4b06      	ldr	r3, [pc, #24]	; (8005480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005470:	d1ee      	bne.n	8005450 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40023800 	.word	0x40023800
 8005480:	40007000 	.word	0x40007000

08005484 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af02      	add	r7, sp, #8
 800548a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005490:	f7fc fd40 	bl	8001f14 <HAL_GetTick>
 8005494:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e073      	b.n	8005588 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_QSPI_Init+0x2c>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e06b      	b.n	8005588 <HAL_QSPI_Init+0x104>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10b      	bne.n	80054dc <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f002 fdcd 	bl	800806c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80054d2:	f241 3188 	movw	r1, #5000	; 0x1388
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f85e 	bl	8005598 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	021a      	lsls	r2, r3, #8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2200      	movs	r2, #0
 8005500:	2120      	movs	r1, #32
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f856 	bl	80055b4 <QSPI_WaitFlagStateUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d135      	bne.n	800557e <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <HAL_QSPI_Init+0x10c>)
 800551a:	4013      	ands	r3, r2
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6852      	ldr	r2, [r2, #4]
 8005520:	0611      	lsls	r1, r2, #24
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	68d2      	ldr	r2, [r2, #12]
 8005526:	4311      	orrs	r1, r2
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	69d2      	ldr	r2, [r2, #28]
 800552c:	4311      	orrs	r1, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6a12      	ldr	r2, [r2, #32]
 8005532:	4311      	orrs	r1, r2
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	430b      	orrs	r3, r1
 800553a:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	4b14      	ldr	r3, [pc, #80]	; (8005594 <HAL_QSPI_Init+0x110>)
 8005544:	4013      	ands	r3, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6912      	ldr	r2, [r2, #16]
 800554a:	0411      	lsls	r1, r2, #16
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6952      	ldr	r2, [r2, #20]
 8005550:	4311      	orrs	r1, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6992      	ldr	r2, [r2, #24]
 8005556:	4311      	orrs	r1, r2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	430b      	orrs	r3, r1
 800555e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	00ffff2f 	.word	0x00ffff2f
 8005594:	ffe0f8fe 	.word	0xffe0f8fe

08005598 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	4613      	mov	r3, r2
 80055c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80055c4:	e01a      	b.n	80055fc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055cc:	d016      	beq.n	80055fc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d007      	beq.n	80055e4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80055d4:	f7fc fc9e 	bl	8001f14 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d20b      	bcs.n	80055fc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2204      	movs	r2, #4
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f0:	f043 0201 	orr.w	r2, r3, #1
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e00e      	b.n	800561a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689a      	ldr	r2, [r3, #8]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	4013      	ands	r3, r2
 8005606:	2b00      	cmp	r3, #0
 8005608:	bf14      	ite	ne
 800560a:	2301      	movne	r3, #1
 800560c:	2300      	moveq	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	429a      	cmp	r2, r3
 8005616:	d1d6      	bne.n	80055c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
	...

08005624 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800562c:	2300      	movs	r3, #0
 800562e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e25e      	b.n	8005af8 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 8087 	beq.w	8005756 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005648:	4b96      	ldr	r3, [pc, #600]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 030c 	and.w	r3, r3, #12
 8005650:	2b04      	cmp	r3, #4
 8005652:	d00c      	beq.n	800566e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005654:	4b93      	ldr	r3, [pc, #588]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 030c 	and.w	r3, r3, #12
 800565c:	2b08      	cmp	r3, #8
 800565e:	d112      	bne.n	8005686 <HAL_RCC_OscConfig+0x62>
 8005660:	4b90      	ldr	r3, [pc, #576]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800566c:	d10b      	bne.n	8005686 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800566e:	4b8d      	ldr	r3, [pc, #564]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d06c      	beq.n	8005754 <HAL_RCC_OscConfig+0x130>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d168      	bne.n	8005754 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e238      	b.n	8005af8 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800568e:	d106      	bne.n	800569e <HAL_RCC_OscConfig+0x7a>
 8005690:	4b84      	ldr	r3, [pc, #528]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a83      	ldr	r2, [pc, #524]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 8005696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	e02e      	b.n	80056fc <HAL_RCC_OscConfig+0xd8>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10c      	bne.n	80056c0 <HAL_RCC_OscConfig+0x9c>
 80056a6:	4b7f      	ldr	r3, [pc, #508]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a7e      	ldr	r2, [pc, #504]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80056ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	4b7c      	ldr	r3, [pc, #496]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a7b      	ldr	r2, [pc, #492]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80056b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	e01d      	b.n	80056fc <HAL_RCC_OscConfig+0xd8>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056c8:	d10c      	bne.n	80056e4 <HAL_RCC_OscConfig+0xc0>
 80056ca:	4b76      	ldr	r3, [pc, #472]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a75      	ldr	r2, [pc, #468]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80056d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	4b73      	ldr	r3, [pc, #460]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a72      	ldr	r2, [pc, #456]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80056dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	e00b      	b.n	80056fc <HAL_RCC_OscConfig+0xd8>
 80056e4:	4b6f      	ldr	r3, [pc, #444]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a6e      	ldr	r2, [pc, #440]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80056ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	4b6c      	ldr	r3, [pc, #432]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a6b      	ldr	r2, [pc, #428]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80056f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d013      	beq.n	800572c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005704:	f7fc fc06 	bl	8001f14 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800570c:	f7fc fc02 	bl	8001f14 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b64      	cmp	r3, #100	; 0x64
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e1ec      	b.n	8005af8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800571e:	4b61      	ldr	r3, [pc, #388]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f0      	beq.n	800570c <HAL_RCC_OscConfig+0xe8>
 800572a:	e014      	b.n	8005756 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572c:	f7fc fbf2 	bl	8001f14 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005734:	f7fc fbee 	bl	8001f14 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b64      	cmp	r3, #100	; 0x64
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e1d8      	b.n	8005af8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005746:	4b57      	ldr	r3, [pc, #348]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f0      	bne.n	8005734 <HAL_RCC_OscConfig+0x110>
 8005752:	e000      	b.n	8005756 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d069      	beq.n	8005836 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005762:	4b50      	ldr	r3, [pc, #320]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 030c 	and.w	r3, r3, #12
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00b      	beq.n	8005786 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800576e:	4b4d      	ldr	r3, [pc, #308]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 030c 	and.w	r3, r3, #12
 8005776:	2b08      	cmp	r3, #8
 8005778:	d11c      	bne.n	80057b4 <HAL_RCC_OscConfig+0x190>
 800577a:	4b4a      	ldr	r3, [pc, #296]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d116      	bne.n	80057b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005786:	4b47      	ldr	r3, [pc, #284]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d005      	beq.n	800579e <HAL_RCC_OscConfig+0x17a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d001      	beq.n	800579e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e1ac      	b.n	8005af8 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800579e:	4b41      	ldr	r3, [pc, #260]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	493d      	ldr	r1, [pc, #244]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057b2:	e040      	b.n	8005836 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d023      	beq.n	8005804 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057bc:	4b39      	ldr	r3, [pc, #228]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a38      	ldr	r2, [pc, #224]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c8:	f7fc fba4 	bl	8001f14 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057d0:	f7fc fba0 	bl	8001f14 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e18a      	b.n	8005af8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e2:	4b30      	ldr	r3, [pc, #192]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0f0      	beq.n	80057d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ee:	4b2d      	ldr	r3, [pc, #180]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4929      	ldr	r1, [pc, #164]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	600b      	str	r3, [r1, #0]
 8005802:	e018      	b.n	8005836 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005804:	4b27      	ldr	r3, [pc, #156]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a26      	ldr	r2, [pc, #152]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 800580a:	f023 0301 	bic.w	r3, r3, #1
 800580e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005810:	f7fc fb80 	bl	8001f14 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005818:	f7fc fb7c 	bl	8001f14 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e166      	b.n	8005af8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800582a:	4b1e      	ldr	r3, [pc, #120]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f0      	bne.n	8005818 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d038      	beq.n	80058b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d019      	beq.n	800587e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800584a:	4b16      	ldr	r3, [pc, #88]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 800584c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584e:	4a15      	ldr	r2, [pc, #84]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 8005850:	f043 0301 	orr.w	r3, r3, #1
 8005854:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005856:	f7fc fb5d 	bl	8001f14 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800585e:	f7fc fb59 	bl	8001f14 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e143      	b.n	8005af8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005870:	4b0c      	ldr	r3, [pc, #48]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 8005872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0f0      	beq.n	800585e <HAL_RCC_OscConfig+0x23a>
 800587c:	e01a      	b.n	80058b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 8005880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005882:	4a08      	ldr	r2, [pc, #32]	; (80058a4 <HAL_RCC_OscConfig+0x280>)
 8005884:	f023 0301 	bic.w	r3, r3, #1
 8005888:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588a:	f7fc fb43 	bl	8001f14 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005890:	e00a      	b.n	80058a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005892:	f7fc fb3f 	bl	8001f14 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d903      	bls.n	80058a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e129      	b.n	8005af8 <HAL_RCC_OscConfig+0x4d4>
 80058a4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058a8:	4b95      	ldr	r3, [pc, #596]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 80058aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1ee      	bne.n	8005892 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 80a4 	beq.w	8005a0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058c2:	4b8f      	ldr	r3, [pc, #572]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10d      	bne.n	80058ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ce:	4b8c      	ldr	r3, [pc, #560]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	4a8b      	ldr	r2, [pc, #556]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 80058d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d8:	6413      	str	r3, [r2, #64]	; 0x40
 80058da:	4b89      	ldr	r3, [pc, #548]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80058e6:	2301      	movs	r3, #1
 80058e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058ea:	4b86      	ldr	r3, [pc, #536]	; (8005b04 <HAL_RCC_OscConfig+0x4e0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d118      	bne.n	8005928 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80058f6:	4b83      	ldr	r3, [pc, #524]	; (8005b04 <HAL_RCC_OscConfig+0x4e0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a82      	ldr	r2, [pc, #520]	; (8005b04 <HAL_RCC_OscConfig+0x4e0>)
 80058fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005902:	f7fc fb07 	bl	8001f14 <HAL_GetTick>
 8005906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005908:	e008      	b.n	800591c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800590a:	f7fc fb03 	bl	8001f14 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b64      	cmp	r3, #100	; 0x64
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e0ed      	b.n	8005af8 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800591c:	4b79      	ldr	r3, [pc, #484]	; (8005b04 <HAL_RCC_OscConfig+0x4e0>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0f0      	beq.n	800590a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d106      	bne.n	800593e <HAL_RCC_OscConfig+0x31a>
 8005930:	4b73      	ldr	r3, [pc, #460]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005934:	4a72      	ldr	r2, [pc, #456]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	6713      	str	r3, [r2, #112]	; 0x70
 800593c:	e02d      	b.n	800599a <HAL_RCC_OscConfig+0x376>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10c      	bne.n	8005960 <HAL_RCC_OscConfig+0x33c>
 8005946:	4b6e      	ldr	r3, [pc, #440]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594a:	4a6d      	ldr	r2, [pc, #436]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 800594c:	f023 0301 	bic.w	r3, r3, #1
 8005950:	6713      	str	r3, [r2, #112]	; 0x70
 8005952:	4b6b      	ldr	r3, [pc, #428]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005956:	4a6a      	ldr	r2, [pc, #424]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005958:	f023 0304 	bic.w	r3, r3, #4
 800595c:	6713      	str	r3, [r2, #112]	; 0x70
 800595e:	e01c      	b.n	800599a <HAL_RCC_OscConfig+0x376>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b05      	cmp	r3, #5
 8005966:	d10c      	bne.n	8005982 <HAL_RCC_OscConfig+0x35e>
 8005968:	4b65      	ldr	r3, [pc, #404]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 800596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596c:	4a64      	ldr	r2, [pc, #400]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 800596e:	f043 0304 	orr.w	r3, r3, #4
 8005972:	6713      	str	r3, [r2, #112]	; 0x70
 8005974:	4b62      	ldr	r3, [pc, #392]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005978:	4a61      	ldr	r2, [pc, #388]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 800597a:	f043 0301 	orr.w	r3, r3, #1
 800597e:	6713      	str	r3, [r2, #112]	; 0x70
 8005980:	e00b      	b.n	800599a <HAL_RCC_OscConfig+0x376>
 8005982:	4b5f      	ldr	r3, [pc, #380]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005986:	4a5e      	ldr	r2, [pc, #376]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005988:	f023 0301 	bic.w	r3, r3, #1
 800598c:	6713      	str	r3, [r2, #112]	; 0x70
 800598e:	4b5c      	ldr	r3, [pc, #368]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005992:	4a5b      	ldr	r2, [pc, #364]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005994:	f023 0304 	bic.w	r3, r3, #4
 8005998:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d015      	beq.n	80059ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a2:	f7fc fab7 	bl	8001f14 <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a8:	e00a      	b.n	80059c0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059aa:	f7fc fab3 	bl	8001f14 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e09b      	b.n	8005af8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059c0:	4b4f      	ldr	r3, [pc, #316]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 80059c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0ee      	beq.n	80059aa <HAL_RCC_OscConfig+0x386>
 80059cc:	e014      	b.n	80059f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ce:	f7fc faa1 	bl	8001f14 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059d4:	e00a      	b.n	80059ec <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059d6:	f7fc fa9d 	bl	8001f14 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e085      	b.n	8005af8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ec:	4b44      	ldr	r3, [pc, #272]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 80059ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1ee      	bne.n	80059d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059f8:	7dfb      	ldrb	r3, [r7, #23]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d105      	bne.n	8005a0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059fe:	4b40      	ldr	r3, [pc, #256]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	4a3f      	ldr	r2, [pc, #252]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d071      	beq.n	8005af6 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a12:	4b3b      	ldr	r3, [pc, #236]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 030c 	and.w	r3, r3, #12
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d069      	beq.n	8005af2 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d14b      	bne.n	8005abe <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a26:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a35      	ldr	r2, [pc, #212]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a32:	f7fc fa6f 	bl	8001f14 <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a3a:	f7fc fa6b 	bl	8001f14 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e055      	b.n	8005af8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a4c:	4b2c      	ldr	r3, [pc, #176]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1f0      	bne.n	8005a3a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	019b      	lsls	r3, r3, #6
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	3b01      	subs	r3, #1
 8005a72:	041b      	lsls	r3, r3, #16
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7a:	061b      	lsls	r3, r3, #24
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	071b      	lsls	r3, r3, #28
 8005a84:	491e      	ldr	r1, [pc, #120]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a8a:	4b1d      	ldr	r3, [pc, #116]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1c      	ldr	r2, [pc, #112]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005a90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a96:	f7fc fa3d 	bl	8001f14 <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a9e:	f7fc fa39 	bl	8001f14 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e023      	b.n	8005af8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ab0:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f0      	beq.n	8005a9e <HAL_RCC_OscConfig+0x47a>
 8005abc:	e01b      	b.n	8005af6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005abe:	4b10      	ldr	r3, [pc, #64]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a0f      	ldr	r2, [pc, #60]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005ac4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aca:	f7fc fa23 	bl	8001f14 <HAL_GetTick>
 8005ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad2:	f7fc fa1f 	bl	8001f14 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e009      	b.n	8005af8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae4:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <HAL_RCC_OscConfig+0x4dc>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1f0      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x4ae>
 8005af0:	e001      	b.n	8005af6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40023800 	.word	0x40023800
 8005b04:	40007000 	.word	0x40007000

08005b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0ce      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b20:	4b69      	ldr	r3, [pc, #420]	; (8005cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 030f 	and.w	r3, r3, #15
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d910      	bls.n	8005b50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2e:	4b66      	ldr	r3, [pc, #408]	; (8005cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f023 020f 	bic.w	r2, r3, #15
 8005b36:	4964      	ldr	r1, [pc, #400]	; (8005cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3e:	4b62      	ldr	r3, [pc, #392]	; (8005cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d001      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e0b6      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d020      	beq.n	8005b9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d005      	beq.n	8005b74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b68:	4b58      	ldr	r3, [pc, #352]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	4a57      	ldr	r2, [pc, #348]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005b6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b80:	4b52      	ldr	r3, [pc, #328]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	4a51      	ldr	r2, [pc, #324]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005b86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b8c:	4b4f      	ldr	r3, [pc, #316]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	494c      	ldr	r1, [pc, #304]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d040      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d107      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bb2:	4b46      	ldr	r3, [pc, #280]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d115      	bne.n	8005bea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e07d      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d107      	bne.n	8005bda <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bca:	4b40      	ldr	r3, [pc, #256]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d109      	bne.n	8005bea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e071      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bda:	4b3c      	ldr	r3, [pc, #240]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e069      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bea:	4b38      	ldr	r3, [pc, #224]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f023 0203 	bic.w	r2, r3, #3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	4935      	ldr	r1, [pc, #212]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bfc:	f7fc f98a 	bl	8001f14 <HAL_GetTick>
 8005c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c02:	e00a      	b.n	8005c1a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c04:	f7fc f986 	bl	8001f14 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e051      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c1a:	4b2c      	ldr	r3, [pc, #176]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 020c 	and.w	r2, r3, #12
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d1eb      	bne.n	8005c04 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c2c:	4b26      	ldr	r3, [pc, #152]	; (8005cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d210      	bcs.n	8005c5c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3a:	4b23      	ldr	r3, [pc, #140]	; (8005cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f023 020f 	bic.w	r2, r3, #15
 8005c42:	4921      	ldr	r1, [pc, #132]	; (8005cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c4a:	4b1f      	ldr	r3, [pc, #124]	; (8005cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d001      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e030      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d008      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c68:	4b18      	ldr	r3, [pc, #96]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4915      	ldr	r1, [pc, #84]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d009      	beq.n	8005c9a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c86:	4b11      	ldr	r3, [pc, #68]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	490d      	ldr	r1, [pc, #52]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c9a:	f000 f81d 	bl	8005cd8 <HAL_RCC_GetSysClockFreq>
 8005c9e:	4601      	mov	r1, r0
 8005ca0:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	091b      	lsrs	r3, r3, #4
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8005cac:	5cd3      	ldrb	r3, [r2, r3]
 8005cae:	fa21 f303 	lsr.w	r3, r1, r3
 8005cb2:	4a08      	ldr	r2, [pc, #32]	; (8005cd4 <HAL_RCC_ClockConfig+0x1cc>)
 8005cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	f002 fb24 	bl	8008304 <HAL_InitTick>

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	40023c00 	.word	0x40023c00
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	0800a240 	.word	0x0800a240
 8005cd4:	2000003c 	.word	0x2000003c

08005cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	607b      	str	r3, [r7, #4]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cee:	4b50      	ldr	r3, [pc, #320]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x158>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 030c 	and.w	r3, r3, #12
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d007      	beq.n	8005d0a <HAL_RCC_GetSysClockFreq+0x32>
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d008      	beq.n	8005d10 <HAL_RCC_GetSysClockFreq+0x38>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f040 808d 	bne.w	8005e1e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d04:	4b4b      	ldr	r3, [pc, #300]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005d06:	60bb      	str	r3, [r7, #8]
       break;
 8005d08:	e08c      	b.n	8005e24 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d0a:	4b4b      	ldr	r3, [pc, #300]	; (8005e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d0c:	60bb      	str	r3, [r7, #8]
      break;
 8005d0e:	e089      	b.n	8005e24 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d10:	4b47      	ldr	r3, [pc, #284]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x158>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d18:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005d1a:	4b45      	ldr	r3, [pc, #276]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x158>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d023      	beq.n	8005d6e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d26:	4b42      	ldr	r3, [pc, #264]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x158>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	099b      	lsrs	r3, r3, #6
 8005d2c:	f04f 0400 	mov.w	r4, #0
 8005d30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	ea03 0501 	and.w	r5, r3, r1
 8005d3c:	ea04 0602 	and.w	r6, r4, r2
 8005d40:	4a3d      	ldr	r2, [pc, #244]	; (8005e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d42:	fb02 f106 	mul.w	r1, r2, r6
 8005d46:	2200      	movs	r2, #0
 8005d48:	fb02 f205 	mul.w	r2, r2, r5
 8005d4c:	440a      	add	r2, r1
 8005d4e:	493a      	ldr	r1, [pc, #232]	; (8005e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d50:	fba5 0101 	umull	r0, r1, r5, r1
 8005d54:	1853      	adds	r3, r2, r1
 8005d56:	4619      	mov	r1, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f04f 0400 	mov.w	r4, #0
 8005d5e:	461a      	mov	r2, r3
 8005d60:	4623      	mov	r3, r4
 8005d62:	f7fa fa69 	bl	8000238 <__aeabi_uldivmod>
 8005d66:	4603      	mov	r3, r0
 8005d68:	460c      	mov	r4, r1
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e049      	b.n	8005e02 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d6e:	4b30      	ldr	r3, [pc, #192]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x158>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	099b      	lsrs	r3, r3, #6
 8005d74:	f04f 0400 	mov.w	r4, #0
 8005d78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	ea03 0501 	and.w	r5, r3, r1
 8005d84:	ea04 0602 	and.w	r6, r4, r2
 8005d88:	4629      	mov	r1, r5
 8005d8a:	4632      	mov	r2, r6
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	f04f 0400 	mov.w	r4, #0
 8005d94:	0154      	lsls	r4, r2, #5
 8005d96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005d9a:	014b      	lsls	r3, r1, #5
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4622      	mov	r2, r4
 8005da0:	1b49      	subs	r1, r1, r5
 8005da2:	eb62 0206 	sbc.w	r2, r2, r6
 8005da6:	f04f 0300 	mov.w	r3, #0
 8005daa:	f04f 0400 	mov.w	r4, #0
 8005dae:	0194      	lsls	r4, r2, #6
 8005db0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005db4:	018b      	lsls	r3, r1, #6
 8005db6:	1a5b      	subs	r3, r3, r1
 8005db8:	eb64 0402 	sbc.w	r4, r4, r2
 8005dbc:	f04f 0100 	mov.w	r1, #0
 8005dc0:	f04f 0200 	mov.w	r2, #0
 8005dc4:	00e2      	lsls	r2, r4, #3
 8005dc6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005dca:	00d9      	lsls	r1, r3, #3
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4614      	mov	r4, r2
 8005dd0:	195b      	adds	r3, r3, r5
 8005dd2:	eb44 0406 	adc.w	r4, r4, r6
 8005dd6:	f04f 0100 	mov.w	r1, #0
 8005dda:	f04f 0200 	mov.w	r2, #0
 8005dde:	02a2      	lsls	r2, r4, #10
 8005de0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005de4:	0299      	lsls	r1, r3, #10
 8005de6:	460b      	mov	r3, r1
 8005de8:	4614      	mov	r4, r2
 8005dea:	4618      	mov	r0, r3
 8005dec:	4621      	mov	r1, r4
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f04f 0400 	mov.w	r4, #0
 8005df4:	461a      	mov	r2, r3
 8005df6:	4623      	mov	r3, r4
 8005df8:	f7fa fa1e 	bl	8000238 <__aeabi_uldivmod>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	460c      	mov	r4, r1
 8005e00:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005e02:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x158>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	0c1b      	lsrs	r3, r3, #16
 8005e08:	f003 0303 	and.w	r3, r3, #3
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1a:	60bb      	str	r3, [r7, #8]
      break;
 8005e1c:	e002      	b.n	8005e24 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e1e:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005e20:	60bb      	str	r3, [r7, #8]
      break;
 8005e22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e24:	68bb      	ldr	r3, [r7, #8]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40023800 	.word	0x40023800
 8005e34:	00f42400 	.word	0x00f42400
 8005e38:	017d7840 	.word	0x017d7840

08005e3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e40:	4b03      	ldr	r3, [pc, #12]	; (8005e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e42:	681b      	ldr	r3, [r3, #0]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	2000003c 	.word	0x2000003c

08005e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e58:	f7ff fff0 	bl	8005e3c <HAL_RCC_GetHCLKFreq>
 8005e5c:	4601      	mov	r1, r0
 8005e5e:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	0a9b      	lsrs	r3, r3, #10
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	4a03      	ldr	r2, [pc, #12]	; (8005e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e6a:	5cd3      	ldrb	r3, [r2, r3]
 8005e6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40023800 	.word	0x40023800
 8005e78:	0800a250 	.word	0x0800a250

08005e7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	220f      	movs	r2, #15
 8005e8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e8c:	4b12      	ldr	r3, [pc, #72]	; (8005ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 0203 	and.w	r2, r3, #3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e98:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005eb0:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	08db      	lsrs	r3, r3, #3
 8005eb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ebe:	4b07      	ldr	r3, [pc, #28]	; (8005edc <HAL_RCC_GetClockConfig+0x60>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 020f 	and.w	r2, r3, #15
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	601a      	str	r2, [r3, #0]
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	40023c00 	.word	0x40023c00

08005ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d012      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f08:	4b69      	ldr	r3, [pc, #420]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	4a68      	ldr	r2, [pc, #416]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f12:	6093      	str	r3, [r2, #8]
 8005f14:	4b66      	ldr	r3, [pc, #408]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1c:	4964      	ldr	r1, [pc, #400]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d017      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f3a:	4b5d      	ldr	r3, [pc, #372]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f48:	4959      	ldr	r1, [pc, #356]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f58:	d101      	bne.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005f66:	2301      	movs	r3, #1
 8005f68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d017      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f76:	4b4e      	ldr	r3, [pc, #312]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	494a      	ldr	r1, [pc, #296]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f94:	d101      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005f96:	2301      	movs	r3, #1
 8005f98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 808b 	beq.w	80060da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fc4:	4b3a      	ldr	r3, [pc, #232]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	4a39      	ldr	r2, [pc, #228]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fce:	6413      	str	r3, [r2, #64]	; 0x40
 8005fd0:	4b37      	ldr	r3, [pc, #220]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	60bb      	str	r3, [r7, #8]
 8005fda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005fdc:	4b35      	ldr	r3, [pc, #212]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a34      	ldr	r2, [pc, #208]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fe8:	f7fb ff94 	bl	8001f14 <HAL_GetTick>
 8005fec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff0:	f7fb ff90 	bl	8001f14 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b64      	cmp	r3, #100	; 0x64
 8005ffc:	d901      	bls.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e38d      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006002:	4b2c      	ldr	r3, [pc, #176]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800600e:	4b28      	ldr	r3, [pc, #160]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006016:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d035      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	429a      	cmp	r2, r3
 800602a:	d02e      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800602c:	4b20      	ldr	r3, [pc, #128]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006034:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006036:	4b1e      	ldr	r3, [pc, #120]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603a:	4a1d      	ldr	r2, [pc, #116]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800603c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006040:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006042:	4b1b      	ldr	r3, [pc, #108]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006046:	4a1a      	ldr	r2, [pc, #104]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800604c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800604e:	4a18      	ldr	r2, [pc, #96]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006054:	4b16      	ldr	r3, [pc, #88]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b01      	cmp	r3, #1
 800605e:	d114      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006060:	f7fb ff58 	bl	8001f14 <HAL_GetTick>
 8006064:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006066:	e00a      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006068:	f7fb ff54 	bl	8001f14 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	f241 3288 	movw	r2, #5000	; 0x1388
 8006076:	4293      	cmp	r3, r2
 8006078:	d901      	bls.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e34f      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800607e:	4b0c      	ldr	r3, [pc, #48]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0ee      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006096:	d111      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006098:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80060a4:	4b04      	ldr	r3, [pc, #16]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060a6:	400b      	ands	r3, r1
 80060a8:	4901      	ldr	r1, [pc, #4]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	608b      	str	r3, [r1, #8]
 80060ae:	e00b      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80060b0:	40023800 	.word	0x40023800
 80060b4:	40007000 	.word	0x40007000
 80060b8:	0ffffcff 	.word	0x0ffffcff
 80060bc:	4bb3      	ldr	r3, [pc, #716]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	4ab2      	ldr	r2, [pc, #712]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80060c6:	6093      	str	r3, [r2, #8]
 80060c8:	4bb0      	ldr	r3, [pc, #704]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d4:	49ad      	ldr	r1, [pc, #692]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d010      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060e6:	4ba9      	ldr	r3, [pc, #676]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ec:	4aa7      	ldr	r2, [pc, #668]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80060f6:	4ba5      	ldr	r3, [pc, #660]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	49a2      	ldr	r1, [pc, #648]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006102:	4313      	orrs	r3, r2
 8006104:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006114:	4b9d      	ldr	r3, [pc, #628]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006122:	499a      	ldr	r1, [pc, #616]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006124:	4313      	orrs	r3, r2
 8006126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006136:	4b95      	ldr	r3, [pc, #596]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006144:	4991      	ldr	r1, [pc, #580]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006146:	4313      	orrs	r3, r2
 8006148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006158:	4b8c      	ldr	r3, [pc, #560]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800615a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006166:	4989      	ldr	r1, [pc, #548]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006168:	4313      	orrs	r3, r2
 800616a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800617a:	4b84      	ldr	r3, [pc, #528]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800617c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006180:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006188:	4980      	ldr	r1, [pc, #512]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800618a:	4313      	orrs	r3, r2
 800618c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800619c:	4b7b      	ldr	r3, [pc, #492]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800619e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a2:	f023 0203 	bic.w	r2, r3, #3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061aa:	4978      	ldr	r1, [pc, #480]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061be:	4b73      	ldr	r3, [pc, #460]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c4:	f023 020c 	bic.w	r2, r3, #12
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061cc:	496f      	ldr	r1, [pc, #444]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00a      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061e0:	4b6a      	ldr	r3, [pc, #424]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ee:	4967      	ldr	r1, [pc, #412]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006202:	4b62      	ldr	r3, [pc, #392]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006208:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006210:	495e      	ldr	r1, [pc, #376]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006212:	4313      	orrs	r3, r2
 8006214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00a      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006224:	4b59      	ldr	r3, [pc, #356]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006232:	4956      	ldr	r1, [pc, #344]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006234:	4313      	orrs	r3, r2
 8006236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006246:	4b51      	ldr	r3, [pc, #324]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006254:	494d      	ldr	r1, [pc, #308]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006256:	4313      	orrs	r3, r2
 8006258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00a      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006268:	4b48      	ldr	r3, [pc, #288]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800626a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006276:	4945      	ldr	r1, [pc, #276]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006278:	4313      	orrs	r3, r2
 800627a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800628a:	4b40      	ldr	r3, [pc, #256]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800628c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006290:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006298:	493c      	ldr	r1, [pc, #240]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800629a:	4313      	orrs	r3, r2
 800629c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062ac:	4b37      	ldr	r3, [pc, #220]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ba:	4934      	ldr	r1, [pc, #208]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d011      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80062ce:	4b2f      	ldr	r3, [pc, #188]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062dc:	492b      	ldr	r1, [pc, #172]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062ec:	d101      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80062ee:	2301      	movs	r3, #1
 80062f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0308 	and.w	r3, r3, #8
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80062fe:	2301      	movs	r3, #1
 8006300:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800630e:	4b1f      	ldr	r3, [pc, #124]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006314:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631c:	491b      	ldr	r1, [pc, #108]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800631e:	4313      	orrs	r3, r2
 8006320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006330:	4b16      	ldr	r3, [pc, #88]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006336:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006340:	4912      	ldr	r1, [pc, #72]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006342:	4313      	orrs	r3, r2
 8006344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006354:	4b0d      	ldr	r3, [pc, #52]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006364:	4909      	ldr	r1, [pc, #36]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00f      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006378:	4b04      	ldr	r3, [pc, #16]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800637a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800637e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006388:	e002      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800638a:	bf00      	nop
 800638c:	40023800 	.word	0x40023800
 8006390:	4985      	ldr	r1, [pc, #532]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006392:	4313      	orrs	r3, r2
 8006394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00b      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80063a4:	4b80      	ldr	r3, [pc, #512]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80063a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063b4:	497c      	ldr	r1, [pc, #496]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d005      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063ca:	f040 80d6 	bne.w	800657a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80063ce:	4b76      	ldr	r3, [pc, #472]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a75      	ldr	r2, [pc, #468]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80063d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063da:	f7fb fd9b 	bl	8001f14 <HAL_GetTick>
 80063de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063e0:	e008      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80063e2:	f7fb fd97 	bl	8001f14 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b64      	cmp	r3, #100	; 0x64
 80063ee:	d901      	bls.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e194      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063f4:	4b6c      	ldr	r3, [pc, #432]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1f0      	bne.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d021      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006410:	2b00      	cmp	r3, #0
 8006412:	d11d      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006414:	4b64      	ldr	r3, [pc, #400]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800641a:	0c1b      	lsrs	r3, r3, #16
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006422:	4b61      	ldr	r3, [pc, #388]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006428:	0e1b      	lsrs	r3, r3, #24
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	019a      	lsls	r2, r3, #6
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	041b      	lsls	r3, r3, #16
 800643a:	431a      	orrs	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	061b      	lsls	r3, r3, #24
 8006440:	431a      	orrs	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	071b      	lsls	r3, r3, #28
 8006448:	4957      	ldr	r1, [pc, #348]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800644a:	4313      	orrs	r3, r2
 800644c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d004      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006464:	d00a      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800646e:	2b00      	cmp	r3, #0
 8006470:	d02e      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800647a:	d129      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800647c:	4b4a      	ldr	r3, [pc, #296]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800647e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006482:	0c1b      	lsrs	r3, r3, #16
 8006484:	f003 0303 	and.w	r3, r3, #3
 8006488:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800648a:	4b47      	ldr	r3, [pc, #284]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800648c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006490:	0f1b      	lsrs	r3, r3, #28
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	019a      	lsls	r2, r3, #6
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	041b      	lsls	r3, r3, #16
 80064a2:	431a      	orrs	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	061b      	lsls	r3, r3, #24
 80064aa:	431a      	orrs	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	071b      	lsls	r3, r3, #28
 80064b0:	493d      	ldr	r1, [pc, #244]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80064b8:	4b3b      	ldr	r3, [pc, #236]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80064ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064be:	f023 021f 	bic.w	r2, r3, #31
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	3b01      	subs	r3, #1
 80064c8:	4937      	ldr	r1, [pc, #220]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d01d      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064dc:	4b32      	ldr	r3, [pc, #200]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80064de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e2:	0e1b      	lsrs	r3, r3, #24
 80064e4:	f003 030f 	and.w	r3, r3, #15
 80064e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80064ea:	4b2f      	ldr	r3, [pc, #188]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80064ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064f0:	0f1b      	lsrs	r3, r3, #28
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	019a      	lsls	r2, r3, #6
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	041b      	lsls	r3, r3, #16
 8006504:	431a      	orrs	r2, r3
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	061b      	lsls	r3, r3, #24
 800650a:	431a      	orrs	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	071b      	lsls	r3, r3, #28
 8006510:	4925      	ldr	r1, [pc, #148]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d011      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	019a      	lsls	r2, r3, #6
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	041b      	lsls	r3, r3, #16
 8006530:	431a      	orrs	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	061b      	lsls	r3, r3, #24
 8006538:	431a      	orrs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	071b      	lsls	r3, r3, #28
 8006540:	4919      	ldr	r1, [pc, #100]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006548:	4b17      	ldr	r3, [pc, #92]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a16      	ldr	r2, [pc, #88]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800654e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006554:	f7fb fcde 	bl	8001f14 <HAL_GetTick>
 8006558:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800655a:	e008      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800655c:	f7fb fcda 	bl	8001f14 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b64      	cmp	r3, #100	; 0x64
 8006568:	d901      	bls.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e0d7      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800656e:	4b0e      	ldr	r3, [pc, #56]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f0      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	2b01      	cmp	r3, #1
 800657e:	f040 80cd 	bne.w	800671c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006582:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a08      	ldr	r2, [pc, #32]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800658c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800658e:	f7fb fcc1 	bl	8001f14 <HAL_GetTick>
 8006592:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006594:	e00a      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006596:	f7fb fcbd 	bl	8001f14 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b64      	cmp	r3, #100	; 0x64
 80065a2:	d903      	bls.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e0ba      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80065a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065ac:	4b5e      	ldr	r3, [pc, #376]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065b8:	d0ed      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d009      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d02e      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d12a      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80065e2:	4b51      	ldr	r3, [pc, #324]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80065e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e8:	0c1b      	lsrs	r3, r3, #16
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80065f0:	4b4d      	ldr	r3, [pc, #308]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80065f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f6:	0f1b      	lsrs	r3, r3, #28
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	019a      	lsls	r2, r3, #6
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	041b      	lsls	r3, r3, #16
 8006608:	431a      	orrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	061b      	lsls	r3, r3, #24
 8006610:	431a      	orrs	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	071b      	lsls	r3, r3, #28
 8006616:	4944      	ldr	r1, [pc, #272]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800661e:	4b42      	ldr	r3, [pc, #264]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006624:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662c:	3b01      	subs	r3, #1
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	493d      	ldr	r1, [pc, #244]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006632:	4313      	orrs	r3, r2
 8006634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d022      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800664c:	d11d      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800664e:	4b36      	ldr	r3, [pc, #216]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006654:	0e1b      	lsrs	r3, r3, #24
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800665c:	4b32      	ldr	r3, [pc, #200]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800665e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006662:	0f1b      	lsrs	r3, r3, #28
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	019a      	lsls	r2, r3, #6
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	041b      	lsls	r3, r3, #16
 8006676:	431a      	orrs	r2, r3
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	061b      	lsls	r3, r3, #24
 800667c:	431a      	orrs	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	071b      	lsls	r3, r3, #28
 8006682:	4929      	ldr	r1, [pc, #164]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006684:	4313      	orrs	r3, r2
 8006686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0308 	and.w	r3, r3, #8
 8006692:	2b00      	cmp	r3, #0
 8006694:	d028      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006696:	4b24      	ldr	r3, [pc, #144]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669c:	0e1b      	lsrs	r3, r3, #24
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80066a4:	4b20      	ldr	r3, [pc, #128]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80066a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066aa:	0c1b      	lsrs	r3, r3, #16
 80066ac:	f003 0303 	and.w	r3, r3, #3
 80066b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	019a      	lsls	r2, r3, #6
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	041b      	lsls	r3, r3, #16
 80066bc:	431a      	orrs	r2, r3
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	061b      	lsls	r3, r3, #24
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	071b      	lsls	r3, r3, #28
 80066ca:	4917      	ldr	r1, [pc, #92]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80066d2:	4b15      	ldr	r3, [pc, #84]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80066d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	4911      	ldr	r1, [pc, #68]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80066e8:	4b0f      	ldr	r3, [pc, #60]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a0e      	ldr	r2, [pc, #56]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80066ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066f4:	f7fb fc0e 	bl	8001f14 <HAL_GetTick>
 80066f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066fa:	e008      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066fc:	f7fb fc0a 	bl	8001f14 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b64      	cmp	r3, #100	; 0x64
 8006708:	d901      	bls.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e007      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800670e:	4b06      	ldr	r3, [pc, #24]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800671a:	d1ef      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3720      	adds	r7, #32
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	40023800 	.word	0x40023800

0800672c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e025      	b.n	800678c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d106      	bne.n	800675a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 fdcb 	bl	80082f0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2202      	movs	r2, #2
 800675e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3304      	adds	r3, #4
 800676a:	4619      	mov	r1, r3
 800676c:	4610      	mov	r0, r2
 800676e:	f000 fac1 	bl	8006cf4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6818      	ldr	r0, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	461a      	mov	r2, r3
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	f000 fb2b 	bl	8006dd8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d101      	bne.n	80067b0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80067ac:	2302      	movs	r3, #2
 80067ae:	e018      	b.n	80067e2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fb89 	bl	8006ed8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d104      	bne.n	80067d8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2205      	movs	r2, #5
 80067d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80067d6:	e003      	b.n	80067e0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d101      	bne.n	8006804 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006800:	2302      	movs	r3, #2
 8006802:	e00e      	b.n	8006822 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	4618      	mov	r0, r3
 8006814:	f000 fb81 	bl	8006f1a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b082      	sub	sp, #8
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e01d      	b.n	8006878 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d106      	bne.n	8006856 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f815 	bl	8006880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3304      	adds	r3, #4
 8006866:	4619      	mov	r1, r3
 8006868:	4610      	mov	r0, r2
 800686a:	f000 f985 	bl	8006b78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	4b0c      	ldr	r3, [pc, #48]	; (80068e4 <HAL_TIM_Base_Start_IT+0x50>)
 80068b4:	4013      	ands	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b06      	cmp	r3, #6
 80068bc:	d00b      	beq.n	80068d6 <HAL_TIM_Base_Start_IT+0x42>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c4:	d007      	beq.n	80068d6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f042 0201 	orr.w	r2, r2, #1
 80068d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	00010007 	.word	0x00010007

080068e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d122      	bne.n	8006944 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f003 0302 	and.w	r3, r3, #2
 8006908:	2b02      	cmp	r3, #2
 800690a:	d11b      	bne.n	8006944 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f06f 0202 	mvn.w	r2, #2
 8006914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f905 	bl	8006b3a <HAL_TIM_IC_CaptureCallback>
 8006930:	e005      	b.n	800693e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f8f7 	bl	8006b26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f908 	bl	8006b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 0304 	and.w	r3, r3, #4
 800694e:	2b04      	cmp	r3, #4
 8006950:	d122      	bne.n	8006998 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b04      	cmp	r3, #4
 800695e:	d11b      	bne.n	8006998 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0204 	mvn.w	r2, #4
 8006968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2202      	movs	r2, #2
 800696e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f8db 	bl	8006b3a <HAL_TIM_IC_CaptureCallback>
 8006984:	e005      	b.n	8006992 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f8cd 	bl	8006b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f8de 	bl	8006b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f003 0308 	and.w	r3, r3, #8
 80069a2:	2b08      	cmp	r3, #8
 80069a4:	d122      	bne.n	80069ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f003 0308 	and.w	r3, r3, #8
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d11b      	bne.n	80069ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f06f 0208 	mvn.w	r2, #8
 80069bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2204      	movs	r2, #4
 80069c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	f003 0303 	and.w	r3, r3, #3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f8b1 	bl	8006b3a <HAL_TIM_IC_CaptureCallback>
 80069d8:	e005      	b.n	80069e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f8a3 	bl	8006b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f8b4 	bl	8006b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f003 0310 	and.w	r3, r3, #16
 80069f6:	2b10      	cmp	r3, #16
 80069f8:	d122      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f003 0310 	and.w	r3, r3, #16
 8006a04:	2b10      	cmp	r3, #16
 8006a06:	d11b      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f06f 0210 	mvn.w	r2, #16
 8006a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2208      	movs	r2, #8
 8006a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f887 	bl	8006b3a <HAL_TIM_IC_CaptureCallback>
 8006a2c:	e005      	b.n	8006a3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f879 	bl	8006b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f88a 	bl	8006b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d10e      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d107      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f06f 0201 	mvn.w	r2, #1
 8006a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 f99e 	bl	8007da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a76:	2b80      	cmp	r3, #128	; 0x80
 8006a78:	d10e      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a84:	2b80      	cmp	r3, #128	; 0x80
 8006a86:	d107      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f91a 	bl	8006ccc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa6:	d10e      	bne.n	8006ac6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab2:	2b80      	cmp	r3, #128	; 0x80
 8006ab4:	d107      	bne.n	8006ac6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f90d 	bl	8006ce0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad0:	2b40      	cmp	r3, #64	; 0x40
 8006ad2:	d10e      	bne.n	8006af2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ade:	2b40      	cmp	r3, #64	; 0x40
 8006ae0:	d107      	bne.n	8006af2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f838 	bl	8006b62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d10e      	bne.n	8006b1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d107      	bne.n	8006b1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f06f 0220 	mvn.w	r2, #32
 8006b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f8cd 	bl	8006cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b1e:	bf00      	nop
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b2e:	bf00      	nop
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b42:	bf00      	nop
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b6a:	bf00      	nop
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
	...

08006b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a40      	ldr	r2, [pc, #256]	; (8006c8c <TIM_Base_SetConfig+0x114>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d013      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b96:	d00f      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a3d      	ldr	r2, [pc, #244]	; (8006c90 <TIM_Base_SetConfig+0x118>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00b      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a3c      	ldr	r2, [pc, #240]	; (8006c94 <TIM_Base_SetConfig+0x11c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d007      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a3b      	ldr	r2, [pc, #236]	; (8006c98 <TIM_Base_SetConfig+0x120>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d003      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a3a      	ldr	r2, [pc, #232]	; (8006c9c <TIM_Base_SetConfig+0x124>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d108      	bne.n	8006bca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a2f      	ldr	r2, [pc, #188]	; (8006c8c <TIM_Base_SetConfig+0x114>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d02b      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd8:	d027      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a2c      	ldr	r2, [pc, #176]	; (8006c90 <TIM_Base_SetConfig+0x118>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d023      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a2b      	ldr	r2, [pc, #172]	; (8006c94 <TIM_Base_SetConfig+0x11c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01f      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a2a      	ldr	r2, [pc, #168]	; (8006c98 <TIM_Base_SetConfig+0x120>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d01b      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a29      	ldr	r2, [pc, #164]	; (8006c9c <TIM_Base_SetConfig+0x124>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d017      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a28      	ldr	r2, [pc, #160]	; (8006ca0 <TIM_Base_SetConfig+0x128>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d013      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a27      	ldr	r2, [pc, #156]	; (8006ca4 <TIM_Base_SetConfig+0x12c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00f      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a26      	ldr	r2, [pc, #152]	; (8006ca8 <TIM_Base_SetConfig+0x130>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00b      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a25      	ldr	r2, [pc, #148]	; (8006cac <TIM_Base_SetConfig+0x134>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d007      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a24      	ldr	r2, [pc, #144]	; (8006cb0 <TIM_Base_SetConfig+0x138>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a23      	ldr	r2, [pc, #140]	; (8006cb4 <TIM_Base_SetConfig+0x13c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d108      	bne.n	8006c3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a0a      	ldr	r2, [pc, #40]	; (8006c8c <TIM_Base_SetConfig+0x114>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d003      	beq.n	8006c70 <TIM_Base_SetConfig+0xf8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a0c      	ldr	r2, [pc, #48]	; (8006c9c <TIM_Base_SetConfig+0x124>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d103      	bne.n	8006c78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	615a      	str	r2, [r3, #20]
}
 8006c7e:	bf00      	nop
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	40010000 	.word	0x40010000
 8006c90:	40000400 	.word	0x40000400
 8006c94:	40000800 	.word	0x40000800
 8006c98:	40000c00 	.word	0x40000c00
 8006c9c:	40010400 	.word	0x40010400
 8006ca0:	40014000 	.word	0x40014000
 8006ca4:	40014400 	.word	0x40014400
 8006ca8:	40014800 	.word	0x40014800
 8006cac:	40001800 	.word	0x40001800
 8006cb0:	40001c00 	.word	0x40001c00
 8006cb4:	40002000 	.word	0x40002000

08006cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d027      	beq.n	8006d5e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4b2f      	ldr	r3, [pc, #188]	; (8006dd4 <FMC_SDRAM_Init+0xe0>)
 8006d18:	4013      	ands	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d24:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8006d2a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8006d30:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8006d36:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8006d3c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8006d42:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8006d48:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006d4e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	e032      	b.n	8006dc4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d6a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006d74:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006d7a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	4b12      	ldr	r3, [pc, #72]	; (8006dd4 <FMC_SDRAM_Init+0xe0>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006d98:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8006d9e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8006da4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8006daa:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8006db0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	ffff8000 	.word	0xffff8000

08006dd8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d02e      	beq.n	8006e50 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006dfe:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006e0e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006e18:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006e22:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006e2c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006e36:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006e40:	4313      	orrs	r3, r2
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	609a      	str	r2, [r3, #8]
 8006e4e:	e039      	b.n	8006ec4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	4b1e      	ldr	r3, [pc, #120]	; (8006ed4 <FMC_SDRAM_Timing_Init+0xfc>)
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006e82:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006e92:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006e9c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006ea6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	371c      	adds	r7, #28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	ff0f0fff 	.word	0xff0f0fff

08006ed8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006ef0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8006efa:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	695a      	ldr	r2, [r3, #20]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8006f40:	b480      	push	{r7}
 8006f42:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006f44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006f48:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8006f4c:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <SCB_EnableICache+0x3c>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8006f54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006f58:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8006f5c:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <SCB_EnableICache+0x3c>)
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	4a06      	ldr	r2, [pc, #24]	; (8006f7c <SCB_EnableICache+0x3c>)
 8006f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f66:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006f68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006f6c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8006f70:	bf00      	nop
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	e000ed00 	.word	0xe000ed00

08006f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8006f84:	f7ff ffdc 	bl	8006f40 <SCB_EnableICache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006f88:	f7fa ff9a 	bl	8001ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006f8c:	f000 f83e 	bl	800700c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006f90:	f000 fb96 	bl	80076c0 <MX_GPIO_Init>
  MX_CRC_Init();
 8006f94:	f000 f8d6 	bl	8007144 <MX_CRC_Init>
  MX_DMA2D_Init();
 8006f98:	f000 f8f6 	bl	8007188 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8006f9c:	f000 f92c 	bl	80071f8 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8006fa0:	f000 fb40 	bl	8007624 <MX_FMC_Init>
  MX_LTDC_Init();
 8006fa4:	f000 fa5c 	bl	8007460 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8006fa8:	f000 fb10 	bl	80075cc <MX_QUADSPI_Init>
  MX_I2C1_Init();
 8006fac:	f000 fa18 	bl	80073e0 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8006fb0:	f7fa f81f 	bl	8000ff2 <BSP_LCD_Init>
  BSP_TS_Init(800,480);
 8006fb4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006fb8:	f44f 7048 	mov.w	r0, #800	; 0x320
 8006fbc:	f7fa ff20 	bl	8001e00 <BSP_TS_Init>

  BSP_LCD_LayerDefaultInit(0, 0xC0000000);
 8006fc0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	f7fa f9b1 	bl	800132c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8006fca:	2000      	movs	r0, #0
 8006fcc:	f7fa fa0e 	bl	80013ec <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8006fd0:	f7fa fb98 	bl	8001704 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8006fd4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8006fd8:	f7fa fa64 	bl	80014a4 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8006fdc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8006fe0:	f7fa fa2c 	bl	800143c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8006fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe8:	f7fa fa10 	bl	800140c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font24);
 8006fec:	4805      	ldr	r0, [pc, #20]	; (8007004 <main+0x84>)
 8006fee:	f7fa fa3f 	bl	8001470 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(10, 300,"Hello", CENTER_MODE);
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	4a04      	ldr	r2, [pc, #16]	; (8007008 <main+0x88>)
 8006ff6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006ffa:	200a      	movs	r0, #10
 8006ffc:	f7fa fabe 	bl	800157c <BSP_LCD_DisplayStringAt>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007000:	e7fe      	b.n	8007000 <main+0x80>
 8007002:	bf00      	nop
 8007004:	20000028 	.word	0x20000028
 8007008:	08008564 	.word	0x08008564

0800700c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b0b8      	sub	sp, #224	; 0xe0
 8007010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007012:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007016:	2234      	movs	r2, #52	; 0x34
 8007018:	2100      	movs	r1, #0
 800701a:	4618      	mov	r0, r3
 800701c:	f001 fa8e 	bl	800853c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007020:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007024:	2200      	movs	r2, #0
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	605a      	str	r2, [r3, #4]
 800702a:	609a      	str	r2, [r3, #8]
 800702c:	60da      	str	r2, [r3, #12]
 800702e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007030:	f107 0308 	add.w	r3, r7, #8
 8007034:	2290      	movs	r2, #144	; 0x90
 8007036:	2100      	movs	r1, #0
 8007038:	4618      	mov	r0, r3
 800703a:	f001 fa7f 	bl	800853c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800703e:	4b3f      	ldr	r3, [pc, #252]	; (800713c <SystemClock_Config+0x130>)
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	4a3e      	ldr	r2, [pc, #248]	; (800713c <SystemClock_Config+0x130>)
 8007044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007048:	6413      	str	r3, [r2, #64]	; 0x40
 800704a:	4b3c      	ldr	r3, [pc, #240]	; (800713c <SystemClock_Config+0x130>)
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007052:	607b      	str	r3, [r7, #4]
 8007054:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007056:	4b3a      	ldr	r3, [pc, #232]	; (8007140 <SystemClock_Config+0x134>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a39      	ldr	r2, [pc, #228]	; (8007140 <SystemClock_Config+0x134>)
 800705c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	4b37      	ldr	r3, [pc, #220]	; (8007140 <SystemClock_Config+0x134>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800706e:	2301      	movs	r3, #1
 8007070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800707c:	2302      	movs	r3, #2
 800707e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007082:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007086:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800708a:	2319      	movs	r3, #25
 800708c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8007090:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8007094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007098:	2302      	movs	r3, #2
 800709a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800709e:	2304      	movs	r3, #4
 80070a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80070a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fe fabb 	bl	8005624 <HAL_RCC_OscConfig>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80070b4:	f000 fe8a 	bl	8007dcc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80070b8:	f7fe f994 	bl	80053e4 <HAL_PWREx_EnableOverDrive>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80070c2:	f000 fe83 	bl	8007dcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80070c6:	230f      	movs	r3, #15
 80070c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80070cc:	2302      	movs	r3, #2
 80070ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80070d2:	2300      	movs	r3, #0
 80070d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80070d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80070dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80070e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80070e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80070ec:	2107      	movs	r1, #7
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe fd0a 	bl	8005b08 <HAL_RCC_ClockConfig>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80070fa:	f000 fe67 	bl	8007dcc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C1;
 80070fe:	f244 0308 	movw	r3, #16392	; 0x4008
 8007102:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8007104:	23c0      	movs	r3, #192	; 0xc0
 8007106:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8007108:	2302      	movs	r3, #2
 800710a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800710c:	2303      	movs	r3, #3
 800710e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8007110:	2300      	movs	r3, #0
 8007112:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8007114:	2301      	movs	r3, #1
 8007116:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8007118:	2300      	movs	r3, #0
 800711a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800711c:	2300      	movs	r3, #0
 800711e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007120:	f107 0308 	add.w	r3, r7, #8
 8007124:	4618      	mov	r0, r3
 8007126:	f7fe fedb 	bl	8005ee0 <HAL_RCCEx_PeriphCLKConfig>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8007130:	f000 fe4c 	bl	8007dcc <Error_Handler>
  }
}
 8007134:	bf00      	nop
 8007136:	37e0      	adds	r7, #224	; 0xe0
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	40023800 	.word	0x40023800
 8007140:	40007000 	.word	0x40007000

08007144 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007148:	4b0d      	ldr	r3, [pc, #52]	; (8007180 <MX_CRC_Init+0x3c>)
 800714a:	4a0e      	ldr	r2, [pc, #56]	; (8007184 <MX_CRC_Init+0x40>)
 800714c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800714e:	4b0c      	ldr	r3, [pc, #48]	; (8007180 <MX_CRC_Init+0x3c>)
 8007150:	2200      	movs	r2, #0
 8007152:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8007154:	4b0a      	ldr	r3, [pc, #40]	; (8007180 <MX_CRC_Init+0x3c>)
 8007156:	2200      	movs	r2, #0
 8007158:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800715a:	4b09      	ldr	r3, [pc, #36]	; (8007180 <MX_CRC_Init+0x3c>)
 800715c:	2200      	movs	r2, #0
 800715e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8007160:	4b07      	ldr	r3, [pc, #28]	; (8007180 <MX_CRC_Init+0x3c>)
 8007162:	2200      	movs	r2, #0
 8007164:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8007166:	4b06      	ldr	r3, [pc, #24]	; (8007180 <MX_CRC_Init+0x3c>)
 8007168:	2201      	movs	r2, #1
 800716a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800716c:	4804      	ldr	r0, [pc, #16]	; (8007180 <MX_CRC_Init+0x3c>)
 800716e:	f7fa ffe1 	bl	8002134 <HAL_CRC_Init>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8007178:	f000 fe28 	bl	8007dcc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800717c:	bf00      	nop
 800717e:	bd80      	pop	{r7, pc}
 8007180:	20000400 	.word	0x20000400
 8007184:	40023000 	.word	0x40023000

08007188 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800718c:	4b18      	ldr	r3, [pc, #96]	; (80071f0 <MX_DMA2D_Init+0x68>)
 800718e:	4a19      	ldr	r2, [pc, #100]	; (80071f4 <MX_DMA2D_Init+0x6c>)
 8007190:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8007192:	4b17      	ldr	r3, [pc, #92]	; (80071f0 <MX_DMA2D_Init+0x68>)
 8007194:	2200      	movs	r2, #0
 8007196:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8007198:	4b15      	ldr	r3, [pc, #84]	; (80071f0 <MX_DMA2D_Init+0x68>)
 800719a:	2200      	movs	r2, #0
 800719c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800719e:	4b14      	ldr	r3, [pc, #80]	; (80071f0 <MX_DMA2D_Init+0x68>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80071a4:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <MX_DMA2D_Init+0x68>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80071aa:	4b11      	ldr	r3, [pc, #68]	; (80071f0 <MX_DMA2D_Init+0x68>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80071b0:	4b0f      	ldr	r3, [pc, #60]	; (80071f0 <MX_DMA2D_Init+0x68>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80071b6:	4b0e      	ldr	r3, [pc, #56]	; (80071f0 <MX_DMA2D_Init+0x68>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80071bc:	4b0c      	ldr	r3, [pc, #48]	; (80071f0 <MX_DMA2D_Init+0x68>)
 80071be:	2200      	movs	r2, #0
 80071c0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80071c2:	4b0b      	ldr	r3, [pc, #44]	; (80071f0 <MX_DMA2D_Init+0x68>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80071c8:	4809      	ldr	r0, [pc, #36]	; (80071f0 <MX_DMA2D_Init+0x68>)
 80071ca:	f7fb fa59 	bl	8002680 <HAL_DMA2D_Init>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 80071d4:	f000 fdfa 	bl	8007dcc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80071d8:	2101      	movs	r1, #1
 80071da:	4805      	ldr	r0, [pc, #20]	; (80071f0 <MX_DMA2D_Init+0x68>)
 80071dc:	f7fb fbbe 	bl	800295c <HAL_DMA2D_ConfigLayer>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 80071e6:	f000 fdf1 	bl	8007dcc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80071ea:	bf00      	nop
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	200004e8 	.word	0x200004e8
 80071f4:	4002b000 	.word	0x4002b000

080071f8 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b0aa      	sub	sp, #168	; 0xa8
 80071fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80071fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	605a      	str	r2, [r3, #4]
 8007208:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800720a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800720e:	2224      	movs	r2, #36	; 0x24
 8007210:	2100      	movs	r1, #0
 8007212:	4618      	mov	r0, r3
 8007214:	f001 f992 	bl	800853c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8007218:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	605a      	str	r2, [r3, #4]
 8007222:	609a      	str	r2, [r3, #8]
 8007224:	60da      	str	r2, [r3, #12]
 8007226:	611a      	str	r2, [r3, #16]
 8007228:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800722a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800722e:	2234      	movs	r2, #52	; 0x34
 8007230:	2100      	movs	r1, #0
 8007232:	4618      	mov	r0, r3
 8007234:	f001 f982 	bl	800853c <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8007238:	463b      	mov	r3, r7
 800723a:	222c      	movs	r2, #44	; 0x2c
 800723c:	2100      	movs	r1, #0
 800723e:	4618      	mov	r0, r3
 8007240:	f001 f97c 	bl	800853c <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8007244:	4b64      	ldr	r3, [pc, #400]	; (80073d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007246:	4a65      	ldr	r2, [pc, #404]	; (80073dc <MX_DSIHOST_DSI_Init+0x1e4>)
 8007248:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800724a:	4b63      	ldr	r3, [pc, #396]	; (80073d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800724c:	2200      	movs	r2, #0
 800724e:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8007250:	4b61      	ldr	r3, [pc, #388]	; (80073d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007252:	2204      	movs	r2, #4
 8007254:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8007256:	4b60      	ldr	r3, [pc, #384]	; (80073d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007258:	2200      	movs	r2, #0
 800725a:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 800725c:	2314      	movs	r3, #20
 800725e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8007262:	2301      	movs	r3, #1
 8007264:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8007268:	2300      	movs	r3, #0
 800726a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800726e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007272:	4619      	mov	r1, r3
 8007274:	4858      	ldr	r0, [pc, #352]	; (80073d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007276:	f7fb fcf3 	bl	8002c60 <HAL_DSI_Init>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8007280:	f000 fda4 	bl	8007dcc <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8007284:	2301      	movs	r3, #1
 8007286:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8007288:	2300      	movs	r3, #0
 800728a:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800728c:	2300      	movs	r3, #0
 800728e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80072a4:	2300      	movs	r3, #0
 80072a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80072b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80072ba:	4619      	mov	r1, r3
 80072bc:	4846      	ldr	r0, [pc, #280]	; (80073d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 80072be:	f7fc fb0b 	bl	80038d8 <HAL_DSI_ConfigHostTimeouts>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 80072c8:	f000 fd80 	bl	8007dcc <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80072cc:	231c      	movs	r3, #28
 80072ce:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 80072d0:	2321      	movs	r3, #33	; 0x21
 80072d2:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 80072d4:	230f      	movs	r3, #15
 80072d6:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 80072d8:	2319      	movs	r3, #25
 80072da:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80072dc:	2300      	movs	r3, #0
 80072de:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80072e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80072e8:	4619      	mov	r1, r3
 80072ea:	483b      	ldr	r0, [pc, #236]	; (80073d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 80072ec:	f7fc fa8a 	bl	8003804 <HAL_DSI_ConfigPhyTimer>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 80072f6:	f000 fd69 	bl	8007dcc <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80072fa:	2104      	movs	r1, #4
 80072fc:	4836      	ldr	r0, [pc, #216]	; (80073d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 80072fe:	f7fc fa59 	bl	80037b4 <HAL_DSI_ConfigFlowControl>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8007308:	f000 fd60 	bl	8007dcc <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800730c:	f242 7110 	movw	r1, #10000	; 0x2710
 8007310:	4831      	ldr	r0, [pc, #196]	; (80073d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007312:	f7fc fc9f 	bl	8003c54 <HAL_DSI_SetLowPowerRXFilter>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 800731c:	f000 fd56 	bl	8007dcc <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8007320:	2100      	movs	r1, #0
 8007322:	482d      	ldr	r0, [pc, #180]	; (80073d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007324:	f7fb fe2a 	bl	8002f7c <HAL_DSI_ConfigErrorMonitor>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800732e:	f000 fd4d 	bl	8007dcc <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8007332:	2300      	movs	r3, #0
 8007334:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8007336:	2300      	movs	r3, #0
 8007338:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 800733a:	2300      	movs	r3, #0
 800733c:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800733e:	2300      	movs	r3, #0
 8007340:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8007342:	2300      	movs	r3, #0
 8007344:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8007346:	2300      	movs	r3, #0
 8007348:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 800734a:	2300      	movs	r3, #0
 800734c:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 800734e:	2300      	movs	r3, #0
 8007350:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8007352:	2300      	movs	r3, #0
 8007354:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8007356:	2300      	movs	r3, #0
 8007358:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800735a:	2300      	movs	r3, #0
 800735c:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 800735e:	2300      	movs	r3, #0
 8007360:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8007362:	2302      	movs	r3, #2
 8007364:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8007366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800736a:	4619      	mov	r1, r3
 800736c:	481a      	ldr	r0, [pc, #104]	; (80073d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800736e:	f7fc f9c3 	bl	80036f8 <HAL_DSI_ConfigCommand>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 8007378:	f000 fd28 	bl	8007dcc <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800737c:	2300      	movs	r3, #0
 800737e:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8007380:	2305      	movs	r3, #5
 8007382:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 800;
 8007384:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007388:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800738a:	2310      	movs	r3, #16
 800738c:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800738e:	2300      	movs	r3, #0
 8007390:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8007392:	2304      	movs	r3, #4
 8007394:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8007396:	2302      	movs	r3, #2
 8007398:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800739a:	2300      	movs	r3, #0
 800739c:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800739e:	2300      	movs	r3, #0
 80073a0:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 80073a2:	2340      	movs	r3, #64	; 0x40
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 80073a6:	2300      	movs	r3, #0
 80073a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80073aa:	463b      	mov	r3, r7
 80073ac:	4619      	mov	r1, r3
 80073ae:	480a      	ldr	r0, [pc, #40]	; (80073d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 80073b0:	f7fc f8c8 	bl	8003544 <HAL_DSI_ConfigAdaptedCommandMode>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 80073ba:	f000 fd07 	bl	8007dcc <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80073be:	2100      	movs	r1, #0
 80073c0:	4805      	ldr	r0, [pc, #20]	; (80073d8 <MX_DSIHOST_DSI_Init+0x1e0>)
 80073c2:	f7fb fe97 	bl	80030f4 <HAL_DSI_SetGenericVCID>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 80073cc:	f000 fcfe 	bl	8007dcc <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 80073d0:	bf00      	nop
 80073d2:	37a8      	adds	r7, #168	; 0xa8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	20000424 	.word	0x20000424
 80073dc:	40016c00 	.word	0x40016c00

080073e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80073e4:	4b1b      	ldr	r3, [pc, #108]	; (8007454 <MX_I2C1_Init+0x74>)
 80073e6:	4a1c      	ldr	r2, [pc, #112]	; (8007458 <MX_I2C1_Init+0x78>)
 80073e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80073ea:	4b1a      	ldr	r3, [pc, #104]	; (8007454 <MX_I2C1_Init+0x74>)
 80073ec:	4a1b      	ldr	r2, [pc, #108]	; (800745c <MX_I2C1_Init+0x7c>)
 80073ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80073f0:	4b18      	ldr	r3, [pc, #96]	; (8007454 <MX_I2C1_Init+0x74>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80073f6:	4b17      	ldr	r3, [pc, #92]	; (8007454 <MX_I2C1_Init+0x74>)
 80073f8:	2201      	movs	r2, #1
 80073fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80073fc:	4b15      	ldr	r3, [pc, #84]	; (8007454 <MX_I2C1_Init+0x74>)
 80073fe:	2200      	movs	r2, #0
 8007400:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007402:	4b14      	ldr	r3, [pc, #80]	; (8007454 <MX_I2C1_Init+0x74>)
 8007404:	2200      	movs	r2, #0
 8007406:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007408:	4b12      	ldr	r3, [pc, #72]	; (8007454 <MX_I2C1_Init+0x74>)
 800740a:	2200      	movs	r2, #0
 800740c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800740e:	4b11      	ldr	r3, [pc, #68]	; (8007454 <MX_I2C1_Init+0x74>)
 8007410:	2200      	movs	r2, #0
 8007412:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007414:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <MX_I2C1_Init+0x74>)
 8007416:	2200      	movs	r2, #0
 8007418:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800741a:	480e      	ldr	r0, [pc, #56]	; (8007454 <MX_I2C1_Init+0x74>)
 800741c:	f7fc ff3a 	bl	8004294 <HAL_I2C_Init>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007426:	f000 fcd1 	bl	8007dcc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800742a:	2100      	movs	r1, #0
 800742c:	4809      	ldr	r0, [pc, #36]	; (8007454 <MX_I2C1_Init+0x74>)
 800742e:	f7fd fc49 	bl	8004cc4 <HAL_I2CEx_ConfigAnalogFilter>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007438:	f000 fcc8 	bl	8007dcc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800743c:	2100      	movs	r1, #0
 800743e:	4805      	ldr	r0, [pc, #20]	; (8007454 <MX_I2C1_Init+0x74>)
 8007440:	f7fd fc8b 	bl	8004d5a <HAL_I2CEx_ConfigDigitalFilter>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d001      	beq.n	800744e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800744a:	f000 fcbf 	bl	8007dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800744e:	bf00      	nop
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	200003b4 	.word	0x200003b4
 8007458:	40005400 	.word	0x40005400
 800745c:	20404768 	.word	0x20404768

08007460 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b09a      	sub	sp, #104	; 0x68
 8007464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8007466:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800746a:	2234      	movs	r2, #52	; 0x34
 800746c:	2100      	movs	r1, #0
 800746e:	4618      	mov	r0, r3
 8007470:	f001 f864 	bl	800853c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8007474:	463b      	mov	r3, r7
 8007476:	2234      	movs	r2, #52	; 0x34
 8007478:	2100      	movs	r1, #0
 800747a:	4618      	mov	r0, r3
 800747c:	f001 f85e 	bl	800853c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8007480:	4b50      	ldr	r3, [pc, #320]	; (80075c4 <MX_LTDC_Init+0x164>)
 8007482:	4a51      	ldr	r2, [pc, #324]	; (80075c8 <MX_LTDC_Init+0x168>)
 8007484:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8007486:	4b4f      	ldr	r3, [pc, #316]	; (80075c4 <MX_LTDC_Init+0x164>)
 8007488:	2200      	movs	r2, #0
 800748a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800748c:	4b4d      	ldr	r3, [pc, #308]	; (80075c4 <MX_LTDC_Init+0x164>)
 800748e:	2200      	movs	r2, #0
 8007490:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8007492:	4b4c      	ldr	r3, [pc, #304]	; (80075c4 <MX_LTDC_Init+0x164>)
 8007494:	2200      	movs	r2, #0
 8007496:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007498:	4b4a      	ldr	r3, [pc, #296]	; (80075c4 <MX_LTDC_Init+0x164>)
 800749a:	2200      	movs	r2, #0
 800749c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800749e:	4b49      	ldr	r3, [pc, #292]	; (80075c4 <MX_LTDC_Init+0x164>)
 80074a0:	2207      	movs	r2, #7
 80074a2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80074a4:	4b47      	ldr	r3, [pc, #284]	; (80075c4 <MX_LTDC_Init+0x164>)
 80074a6:	2203      	movs	r2, #3
 80074a8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80074aa:	4b46      	ldr	r3, [pc, #280]	; (80075c4 <MX_LTDC_Init+0x164>)
 80074ac:	220e      	movs	r2, #14
 80074ae:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80074b0:	4b44      	ldr	r3, [pc, #272]	; (80075c4 <MX_LTDC_Init+0x164>)
 80074b2:	2205      	movs	r2, #5
 80074b4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80074b6:	4b43      	ldr	r3, [pc, #268]	; (80075c4 <MX_LTDC_Init+0x164>)
 80074b8:	f240 228e 	movw	r2, #654	; 0x28e
 80074bc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80074be:	4b41      	ldr	r3, [pc, #260]	; (80075c4 <MX_LTDC_Init+0x164>)
 80074c0:	f240 12e5 	movw	r2, #485	; 0x1e5
 80074c4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80074c6:	4b3f      	ldr	r3, [pc, #252]	; (80075c4 <MX_LTDC_Init+0x164>)
 80074c8:	f44f 7225 	mov.w	r2, #660	; 0x294
 80074cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80074ce:	4b3d      	ldr	r3, [pc, #244]	; (80075c4 <MX_LTDC_Init+0x164>)
 80074d0:	f240 12e7 	movw	r2, #487	; 0x1e7
 80074d4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80074d6:	4b3b      	ldr	r3, [pc, #236]	; (80075c4 <MX_LTDC_Init+0x164>)
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80074de:	4b39      	ldr	r3, [pc, #228]	; (80075c4 <MX_LTDC_Init+0x164>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80074e6:	4b37      	ldr	r3, [pc, #220]	; (80075c4 <MX_LTDC_Init+0x164>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80074ee:	4835      	ldr	r0, [pc, #212]	; (80075c4 <MX_LTDC_Init+0x164>)
 80074f0:	f7fd fc80 	bl	8004df4 <HAL_LTDC_Init>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80074fa:	f000 fc67 	bl	8007dcc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 800;
 8007502:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007506:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8007508:	2300      	movs	r3, #0
 800750a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 480;
 800750c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007510:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8007512:	2300      	movs	r3, #0
 8007514:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8007516:	2300      	movs	r3, #0
 8007518:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 255;
 800751a:	23ff      	movs	r3, #255	; 0xff
 800751c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800751e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007522:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8007524:	2305      	movs	r3, #5
 8007526:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800753a:	2300      	movs	r3, #0
 800753c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8007540:	2300      	movs	r3, #0
 8007542:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8007546:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800754a:	2200      	movs	r2, #0
 800754c:	4619      	mov	r1, r3
 800754e:	481d      	ldr	r0, [pc, #116]	; (80075c4 <MX_LTDC_Init+0x164>)
 8007550:	f7fd fd20 	bl	8004f94 <HAL_LTDC_ConfigLayer>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <MX_LTDC_Init+0xfe>
  {
    Error_Handler();
 800755a:	f000 fc37 	bl	8007dcc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 800;
 8007562:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007566:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8007568:	2300      	movs	r3, #0
 800756a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 480;
 800756c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007570:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8007572:	2300      	movs	r3, #0
 8007574:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8007576:	2300      	movs	r3, #0
 8007578:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 255;
 800757a:	23ff      	movs	r3, #255	; 0xff
 800757c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800757e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007582:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8007584:	2305      	movs	r3, #5
 8007586:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8007588:	2300      	movs	r3, #0
 800758a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8007594:	2300      	movs	r3, #0
 8007596:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800759a:	2300      	movs	r3, #0
 800759c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80075a6:	463b      	mov	r3, r7
 80075a8:	2201      	movs	r2, #1
 80075aa:	4619      	mov	r1, r3
 80075ac:	4805      	ldr	r0, [pc, #20]	; (80075c4 <MX_LTDC_Init+0x164>)
 80075ae:	f7fd fcf1 	bl	8004f94 <HAL_LTDC_ConfigLayer>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <MX_LTDC_Init+0x15c>
  {
    Error_Handler();
 80075b8:	f000 fc08 	bl	8007dcc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80075bc:	bf00      	nop
 80075be:	3768      	adds	r7, #104	; 0x68
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	20000440 	.word	0x20000440
 80075c8:	40016800 	.word	0x40016800

080075cc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80075d0:	4b12      	ldr	r3, [pc, #72]	; (800761c <MX_QUADSPI_Init+0x50>)
 80075d2:	4a13      	ldr	r2, [pc, #76]	; (8007620 <MX_QUADSPI_Init+0x54>)
 80075d4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80075d6:	4b11      	ldr	r3, [pc, #68]	; (800761c <MX_QUADSPI_Init+0x50>)
 80075d8:	22ff      	movs	r2, #255	; 0xff
 80075da:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80075dc:	4b0f      	ldr	r3, [pc, #60]	; (800761c <MX_QUADSPI_Init+0x50>)
 80075de:	2201      	movs	r2, #1
 80075e0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80075e2:	4b0e      	ldr	r3, [pc, #56]	; (800761c <MX_QUADSPI_Init+0x50>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80075e8:	4b0c      	ldr	r3, [pc, #48]	; (800761c <MX_QUADSPI_Init+0x50>)
 80075ea:	2201      	movs	r2, #1
 80075ec:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80075ee:	4b0b      	ldr	r3, [pc, #44]	; (800761c <MX_QUADSPI_Init+0x50>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80075f4:	4b09      	ldr	r3, [pc, #36]	; (800761c <MX_QUADSPI_Init+0x50>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80075fa:	4b08      	ldr	r3, [pc, #32]	; (800761c <MX_QUADSPI_Init+0x50>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8007600:	4b06      	ldr	r3, [pc, #24]	; (800761c <MX_QUADSPI_Init+0x50>)
 8007602:	2200      	movs	r2, #0
 8007604:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8007606:	4805      	ldr	r0, [pc, #20]	; (800761c <MX_QUADSPI_Init+0x50>)
 8007608:	f7fd ff3c 	bl	8005484 <HAL_QSPI_Init>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8007612:	f000 fbdb 	bl	8007dcc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8007616:	bf00      	nop
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	20000574 	.word	0x20000574
 8007620:	a0001000 	.word	0xa0001000

08007624 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800762a:	1d3b      	adds	r3, r7, #4
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	605a      	str	r2, [r3, #4]
 8007632:	609a      	str	r2, [r3, #8]
 8007634:	60da      	str	r2, [r3, #12]
 8007636:	611a      	str	r2, [r3, #16]
 8007638:	615a      	str	r2, [r3, #20]
 800763a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800763c:	4b1e      	ldr	r3, [pc, #120]	; (80076b8 <MX_FMC_Init+0x94>)
 800763e:	4a1f      	ldr	r2, [pc, #124]	; (80076bc <MX_FMC_Init+0x98>)
 8007640:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8007642:	4b1d      	ldr	r3, [pc, #116]	; (80076b8 <MX_FMC_Init+0x94>)
 8007644:	2200      	movs	r2, #0
 8007646:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8007648:	4b1b      	ldr	r3, [pc, #108]	; (80076b8 <MX_FMC_Init+0x94>)
 800764a:	2200      	movs	r2, #0
 800764c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800764e:	4b1a      	ldr	r3, [pc, #104]	; (80076b8 <MX_FMC_Init+0x94>)
 8007650:	2208      	movs	r2, #8
 8007652:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8007654:	4b18      	ldr	r3, [pc, #96]	; (80076b8 <MX_FMC_Init+0x94>)
 8007656:	2210      	movs	r2, #16
 8007658:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800765a:	4b17      	ldr	r3, [pc, #92]	; (80076b8 <MX_FMC_Init+0x94>)
 800765c:	2240      	movs	r2, #64	; 0x40
 800765e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8007660:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <MX_FMC_Init+0x94>)
 8007662:	2280      	movs	r2, #128	; 0x80
 8007664:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007666:	4b14      	ldr	r3, [pc, #80]	; (80076b8 <MX_FMC_Init+0x94>)
 8007668:	2200      	movs	r2, #0
 800766a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800766c:	4b12      	ldr	r3, [pc, #72]	; (80076b8 <MX_FMC_Init+0x94>)
 800766e:	2200      	movs	r2, #0
 8007670:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8007672:	4b11      	ldr	r3, [pc, #68]	; (80076b8 <MX_FMC_Init+0x94>)
 8007674:	2200      	movs	r2, #0
 8007676:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8007678:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <MX_FMC_Init+0x94>)
 800767a:	2200      	movs	r2, #0
 800767c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800767e:	2310      	movs	r3, #16
 8007680:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8007682:	2310      	movs	r3, #16
 8007684:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8007686:	2310      	movs	r3, #16
 8007688:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800768a:	2310      	movs	r3, #16
 800768c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800768e:	2310      	movs	r3, #16
 8007690:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8007692:	2310      	movs	r3, #16
 8007694:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8007696:	2310      	movs	r3, #16
 8007698:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800769a:	1d3b      	adds	r3, r7, #4
 800769c:	4619      	mov	r1, r3
 800769e:	4806      	ldr	r0, [pc, #24]	; (80076b8 <MX_FMC_Init+0x94>)
 80076a0:	f7ff f844 	bl	800672c <HAL_SDRAM_Init>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80076aa:	f000 fb8f 	bl	8007dcc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80076ae:	bf00      	nop
 80076b0:	3720      	adds	r7, #32
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20000540 	.word	0x20000540
 80076bc:	a0000140 	.word	0xa0000140

080076c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b090      	sub	sp, #64	; 0x40
 80076c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	605a      	str	r2, [r3, #4]
 80076d0:	609a      	str	r2, [r3, #8]
 80076d2:	60da      	str	r2, [r3, #12]
 80076d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80076d6:	4bac      	ldr	r3, [pc, #688]	; (8007988 <MX_GPIO_Init+0x2c8>)
 80076d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076da:	4aab      	ldr	r2, [pc, #684]	; (8007988 <MX_GPIO_Init+0x2c8>)
 80076dc:	f043 0310 	orr.w	r3, r3, #16
 80076e0:	6313      	str	r3, [r2, #48]	; 0x30
 80076e2:	4ba9      	ldr	r3, [pc, #676]	; (8007988 <MX_GPIO_Init+0x2c8>)
 80076e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e6:	f003 0310 	and.w	r3, r3, #16
 80076ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80076ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80076ee:	4ba6      	ldr	r3, [pc, #664]	; (8007988 <MX_GPIO_Init+0x2c8>)
 80076f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f2:	4aa5      	ldr	r2, [pc, #660]	; (8007988 <MX_GPIO_Init+0x2c8>)
 80076f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076f8:	6313      	str	r3, [r2, #48]	; 0x30
 80076fa:	4ba3      	ldr	r3, [pc, #652]	; (8007988 <MX_GPIO_Init+0x2c8>)
 80076fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007702:	627b      	str	r3, [r7, #36]	; 0x24
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007706:	4ba0      	ldr	r3, [pc, #640]	; (8007988 <MX_GPIO_Init+0x2c8>)
 8007708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770a:	4a9f      	ldr	r2, [pc, #636]	; (8007988 <MX_GPIO_Init+0x2c8>)
 800770c:	f043 0302 	orr.w	r3, r3, #2
 8007710:	6313      	str	r3, [r2, #48]	; 0x30
 8007712:	4b9d      	ldr	r3, [pc, #628]	; (8007988 <MX_GPIO_Init+0x2c8>)
 8007714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	623b      	str	r3, [r7, #32]
 800771c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800771e:	4b9a      	ldr	r3, [pc, #616]	; (8007988 <MX_GPIO_Init+0x2c8>)
 8007720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007722:	4a99      	ldr	r2, [pc, #612]	; (8007988 <MX_GPIO_Init+0x2c8>)
 8007724:	f043 0308 	orr.w	r3, r3, #8
 8007728:	6313      	str	r3, [r2, #48]	; 0x30
 800772a:	4b97      	ldr	r3, [pc, #604]	; (8007988 <MX_GPIO_Init+0x2c8>)
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	61fb      	str	r3, [r7, #28]
 8007734:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007736:	4b94      	ldr	r3, [pc, #592]	; (8007988 <MX_GPIO_Init+0x2c8>)
 8007738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773a:	4a93      	ldr	r2, [pc, #588]	; (8007988 <MX_GPIO_Init+0x2c8>)
 800773c:	f043 0304 	orr.w	r3, r3, #4
 8007740:	6313      	str	r3, [r2, #48]	; 0x30
 8007742:	4b91      	ldr	r3, [pc, #580]	; (8007988 <MX_GPIO_Init+0x2c8>)
 8007744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	61bb      	str	r3, [r7, #24]
 800774c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800774e:	4b8e      	ldr	r3, [pc, #568]	; (8007988 <MX_GPIO_Init+0x2c8>)
 8007750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007752:	4a8d      	ldr	r2, [pc, #564]	; (8007988 <MX_GPIO_Init+0x2c8>)
 8007754:	f043 0301 	orr.w	r3, r3, #1
 8007758:	6313      	str	r3, [r2, #48]	; 0x30
 800775a:	4b8b      	ldr	r3, [pc, #556]	; (8007988 <MX_GPIO_Init+0x2c8>)
 800775c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007766:	4b88      	ldr	r3, [pc, #544]	; (8007988 <MX_GPIO_Init+0x2c8>)
 8007768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776a:	4a87      	ldr	r2, [pc, #540]	; (8007988 <MX_GPIO_Init+0x2c8>)
 800776c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007770:	6313      	str	r3, [r2, #48]	; 0x30
 8007772:	4b85      	ldr	r3, [pc, #532]	; (8007988 <MX_GPIO_Init+0x2c8>)
 8007774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800777a:	613b      	str	r3, [r7, #16]
 800777c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800777e:	4b82      	ldr	r3, [pc, #520]	; (8007988 <MX_GPIO_Init+0x2c8>)
 8007780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007782:	4a81      	ldr	r2, [pc, #516]	; (8007988 <MX_GPIO_Init+0x2c8>)
 8007784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007788:	6313      	str	r3, [r2, #48]	; 0x30
 800778a:	4b7f      	ldr	r3, [pc, #508]	; (8007988 <MX_GPIO_Init+0x2c8>)
 800778c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8007796:	4b7c      	ldr	r3, [pc, #496]	; (8007988 <MX_GPIO_Init+0x2c8>)
 8007798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779a:	4a7b      	ldr	r2, [pc, #492]	; (8007988 <MX_GPIO_Init+0x2c8>)
 800779c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077a0:	6313      	str	r3, [r2, #48]	; 0x30
 80077a2:	4b79      	ldr	r3, [pc, #484]	; (8007988 <MX_GPIO_Init+0x2c8>)
 80077a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077aa:	60bb      	str	r3, [r7, #8]
 80077ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80077ae:	4b76      	ldr	r3, [pc, #472]	; (8007988 <MX_GPIO_Init+0x2c8>)
 80077b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b2:	4a75      	ldr	r2, [pc, #468]	; (8007988 <MX_GPIO_Init+0x2c8>)
 80077b4:	f043 0320 	orr.w	r3, r3, #32
 80077b8:	6313      	str	r3, [r2, #48]	; 0x30
 80077ba:	4b73      	ldr	r3, [pc, #460]	; (8007988 <MX_GPIO_Init+0x2c8>)
 80077bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077be:	f003 0320 	and.w	r3, r3, #32
 80077c2:	607b      	str	r3, [r7, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80077c6:	4b70      	ldr	r3, [pc, #448]	; (8007988 <MX_GPIO_Init+0x2c8>)
 80077c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ca:	4a6f      	ldr	r2, [pc, #444]	; (8007988 <MX_GPIO_Init+0x2c8>)
 80077cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d0:	6313      	str	r3, [r2, #48]	; 0x30
 80077d2:	4b6d      	ldr	r3, [pc, #436]	; (8007988 <MX_GPIO_Init+0x2c8>)
 80077d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077da:	603b      	str	r3, [r7, #0]
 80077dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_SCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 80077de:	2378      	movs	r3, #120	; 0x78
 80077e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077e2:	2302      	movs	r3, #2
 80077e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077ea:	2300      	movs	r3, #0
 80077ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80077ee:	2306      	movs	r3, #6
 80077f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80077f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077f6:	4619      	mov	r1, r3
 80077f8:	4864      	ldr	r0, [pc, #400]	; (800798c <MX_GPIO_Init+0x2cc>)
 80077fa:	f7fc fa59 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80077fe:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8007802:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007804:	2302      	movs	r3, #2
 8007806:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007808:	2300      	movs	r3, #0
 800780a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800780c:	2303      	movs	r3, #3
 800780e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007810:	230b      	movs	r3, #11
 8007812:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007818:	4619      	mov	r1, r3
 800781a:	485d      	ldr	r0, [pc, #372]	; (8007990 <MX_GPIO_Init+0x2d0>)
 800781c:	f7fc fa48 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8007820:	f643 4323 	movw	r3, #15395	; 0x3c23
 8007824:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007826:	2302      	movs	r3, #2
 8007828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800782a:	2300      	movs	r3, #0
 800782c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800782e:	2303      	movs	r3, #3
 8007830:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8007832:	230a      	movs	r3, #10
 8007834:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800783a:	4619      	mov	r1, r3
 800783c:	4855      	ldr	r0, [pc, #340]	; (8007994 <MX_GPIO_Init+0x2d4>)
 800783e:	f7fc fa37 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D3_Pin uSD_D2_Pin */
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8007842:	2318      	movs	r3, #24
 8007844:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007846:	2302      	movs	r3, #2
 8007848:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800784a:	2300      	movs	r3, #0
 800784c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800784e:	2303      	movs	r3, #3
 8007850:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8007852:	230a      	movs	r3, #10
 8007854:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800785a:	4619      	mov	r1, r3
 800785c:	484d      	ldr	r0, [pc, #308]	; (8007994 <MX_GPIO_Init+0x2d4>)
 800785e:	f7fc fa27 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_CMD_Pin uSD_CLK_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8007862:	23c0      	movs	r3, #192	; 0xc0
 8007864:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007866:	2302      	movs	r3, #2
 8007868:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800786a:	2300      	movs	r3, #0
 800786c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800786e:	2303      	movs	r3, #3
 8007870:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8007872:	230b      	movs	r3, #11
 8007874:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800787a:	4619      	mov	r1, r3
 800787c:	4846      	ldr	r0, [pc, #280]	; (8007998 <MX_GPIO_Init+0x2d8>)
 800787e:	f7fc fa17 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RX_Pin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8007882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007886:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007888:	2302      	movs	r3, #2
 800788a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800788c:	2300      	movs	r3, #0
 800788e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007890:	2303      	movs	r3, #3
 8007892:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007894:	2308      	movs	r3, #8
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8007898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800789c:	4619      	mov	r1, r3
 800789e:	483f      	ldr	r0, [pc, #252]	; (800799c <MX_GPIO_Init+0x2dc>)
 80078a0:	f7fc fa06 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_Pin */
  GPIO_InitStruct.Pin = CEC_Pin;
 80078a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078aa:	2312      	movs	r3, #18
 80078ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078b2:	2300      	movs	r3, #0
 80078b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 80078b6:	2304      	movs	r3, #4
 80078b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 80078ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078be:	4619      	mov	r1, r3
 80078c0:	4837      	ldr	r0, [pc, #220]	; (80079a0 <MX_GPIO_Init+0x2e0>)
 80078c2:	f7fc f9f5 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SDA_Pin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 80078c6:	2380      	movs	r3, #128	; 0x80
 80078c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078ca:	2312      	movs	r3, #18
 80078cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80078ce:	2301      	movs	r3, #1
 80078d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078d2:	2303      	movs	r3, #3
 80078d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 80078d6:	230b      	movs	r3, #11
 80078d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 80078da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078de:	4619      	mov	r1, r3
 80078e0:	482c      	ldr	r0, [pc, #176]	; (8007994 <MX_GPIO_Init+0x2d4>)
 80078e2:	f7fc f9e5 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_USER1_Pin Audio_INT_Pin WIFI_RST_Pin DSI_RESET_Pin 
                           ARD_D8_Pin LD_USER2_Pin ARD_D7_Pin ARD_D4_Pin 
                           ARD_D2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|DSI_RESET_Pin 
 80078e6:	f24f 033b 	movw	r3, #61499	; 0xf03b
 80078ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARD_D8_Pin|LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin 
                          |ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078ec:	2300      	movs	r3, #0
 80078ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80078f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078f8:	4619      	mov	r1, r3
 80078fa:	482a      	ldr	r0, [pc, #168]	; (80079a4 <MX_GPIO_Init+0x2e4>)
 80078fc:	f7fc f9d8 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM_DATIN5_Pin DFSDM_DATIN1_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 8007900:	f640 0308 	movw	r3, #2056	; 0x808
 8007904:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007906:	2302      	movs	r3, #2
 8007908:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800790a:	2300      	movs	r3, #0
 800790c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800790e:	2300      	movs	r3, #0
 8007910:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8007912:	2303      	movs	r3, #3
 8007914:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800791a:	4619      	mov	r1, r3
 800791c:	481f      	ldr	r0, [pc, #124]	; (800799c <MX_GPIO_Init+0x2dc>)
 800791e:	f7fc f9c7 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_SCK_Pin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8007922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007926:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007928:	2302      	movs	r3, #2
 800792a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792c:	2300      	movs	r3, #0
 800792e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007930:	2300      	movs	r3, #0
 8007932:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007934:	2305      	movs	r3, #5
 8007936:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8007938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800793c:	4619      	mov	r1, r3
 800793e:	4818      	ldr	r0, [pc, #96]	; (80079a0 <MX_GPIO_Init+0x2e0>)
 8007940:	f7fc f9b6 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8007944:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 8007948:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800794a:	2300      	movs	r3, #0
 800794c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800794e:	2300      	movs	r3, #0
 8007950:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007956:	4619      	mov	r1, r3
 8007958:	4813      	ldr	r0, [pc, #76]	; (80079a8 <MX_GPIO_Init+0x2e8>)
 800795a:	f7fc f9a9 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin 
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin 
 800795e:	23f8      	movs	r3, #248	; 0xf8
 8007960:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007962:	2300      	movs	r3, #0
 8007964:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007966:	2300      	movs	r3, #0
 8007968:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800796a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800796e:	4619      	mov	r1, r3
 8007970:	480e      	ldr	r0, [pc, #56]	; (80079ac <MX_GPIO_Init+0x2ec>)
 8007972:	f7fc f99d 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8007976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800797a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800797c:	2302      	movs	r3, #2
 800797e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007980:	2300      	movs	r3, #0
 8007982:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007984:	2300      	movs	r3, #0
 8007986:	e013      	b.n	80079b0 <MX_GPIO_Init+0x2f0>
 8007988:	40023800 	.word	0x40023800
 800798c:	40021000 	.word	0x40021000
 8007990:	40021800 	.word	0x40021800
 8007994:	40020400 	.word	0x40020400
 8007998:	40020c00 	.word	0x40020c00
 800799c:	40020800 	.word	0x40020800
 80079a0:	40020000 	.word	0x40020000
 80079a4:	40022400 	.word	0x40022400
 80079a8:	40022000 	.word	0x40022000
 80079ac:	40022800 	.word	0x40022800
 80079b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 80079b2:	2307      	movs	r3, #7
 80079b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 80079b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079ba:	4619      	mov	r1, r3
 80079bc:	48ba      	ldr	r0, [pc, #744]	; (8007ca8 <MX_GPIO_Init+0x5e8>)
 80079be:	f7fc f977 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D1_Pin uSD_D0_Pin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 80079c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80079c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079c8:	2302      	movs	r3, #2
 80079ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079cc:	2300      	movs	r3, #0
 80079ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079d0:	2303      	movs	r3, #3
 80079d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80079d4:	230b      	movs	r3, #11
 80079d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80079d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079dc:	4619      	mov	r1, r3
 80079de:	48b2      	ldr	r0, [pc, #712]	; (8007ca8 <MX_GPIO_Init+0x5e8>)
 80079e0:	f7fc f966 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 80079e4:	2330      	movs	r3, #48	; 0x30
 80079e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079e8:	2300      	movs	r3, #0
 80079ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ec:	2300      	movs	r3, #0
 80079ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80079f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079f4:	4619      	mov	r1, r3
 80079f6:	48ad      	ldr	r0, [pc, #692]	; (8007cac <MX_GPIO_Init+0x5ec>)
 80079f8:	f7fc f95a 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 80079fc:	2308      	movs	r3, #8
 80079fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a00:	2302      	movs	r3, #2
 8007a02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a04:	2300      	movs	r3, #0
 8007a06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8007a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a14:	4619      	mov	r1, r3
 8007a16:	48a5      	ldr	r0, [pc, #660]	; (8007cac <MX_GPIO_Init+0x5ec>)
 8007a18:	f7fc f94a 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8007a1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a22:	2302      	movs	r3, #2
 8007a24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a26:	2300      	movs	r3, #0
 8007a28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007a2e:	2305      	movs	r3, #5
 8007a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8007a32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a36:	4619      	mov	r1, r3
 8007a38:	489d      	ldr	r0, [pc, #628]	; (8007cb0 <MX_GPIO_Init+0x5f0>)
 8007a3a:	f7fc f939 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_TX_Pin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8007a3e:	2304      	movs	r3, #4
 8007a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a42:	2302      	movs	r3, #2
 8007a44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007a4e:	2308      	movs	r3, #8
 8007a50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8007a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a56:	4619      	mov	r1, r3
 8007a58:	4894      	ldr	r0, [pc, #592]	; (8007cac <MX_GPIO_Init+0x5ec>)
 8007a5a:	f7fc f929 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8007a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a64:	2302      	movs	r3, #2
 8007a66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007a70:	2307      	movs	r3, #7
 8007a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8007a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a78:	4619      	mov	r1, r3
 8007a7a:	488d      	ldr	r0, [pc, #564]	; (8007cb0 <MX_GPIO_Init+0x5f0>)
 8007a7c:	f7fc f918 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8007a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a86:	2302      	movs	r3, #2
 8007a88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007a92:	2307      	movs	r3, #7
 8007a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8007a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	4884      	ldr	r0, [pc, #528]	; (8007cb0 <MX_GPIO_Init+0x5f0>)
 8007a9e:	f7fc f907 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8007aa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aac:	2300      	movs	r3, #0
 8007aae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8007ab4:	230a      	movs	r3, #10
 8007ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8007ab8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007abc:	4619      	mov	r1, r3
 8007abe:	487d      	ldr	r0, [pc, #500]	; (8007cb4 <MX_GPIO_Init+0x5f4>)
 8007ac0:	f7fc f8f6 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8007ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aca:	2302      	movs	r3, #2
 8007acc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8007ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4873      	ldr	r0, [pc, #460]	; (8007cb0 <MX_GPIO_Init+0x5f0>)
 8007ae2:	f7fc f8e5 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8007ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007aec:	4b72      	ldr	r3, [pc, #456]	; (8007cb8 <MX_GPIO_Init+0x5f8>)
 8007aee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007af0:	2300      	movs	r3, #0
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8007af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007af8:	4619      	mov	r1, r3
 8007afa:	486e      	ldr	r0, [pc, #440]	; (8007cb4 <MX_GPIO_Init+0x5f4>)
 8007afc:	f7fc f8d8 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8007b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b06:	2302      	movs	r3, #2
 8007b08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007b12:	2302      	movs	r3, #2
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8007b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4867      	ldr	r0, [pc, #412]	; (8007cbc <MX_GPIO_Init+0x5fc>)
 8007b1e:	f7fc f8c7 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_RX_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8007b22:	23c0      	movs	r3, #192	; 0xc0
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b26:	2302      	movs	r3, #2
 8007b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007b32:	2308      	movs	r3, #8
 8007b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	485f      	ldr	r0, [pc, #380]	; (8007cbc <MX_GPIO_Init+0x5fc>)
 8007b3e:	f7fc f8b7 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8007b42:	2310      	movs	r3, #16
 8007b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b46:	2302      	movs	r3, #2
 8007b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8007b52:	230a      	movs	r3, #10
 8007b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8007b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	4858      	ldr	r0, [pc, #352]	; (8007cc0 <MX_GPIO_Init+0x600>)
 8007b5e:	f7fc f8a7 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_MCLKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8007b62:	2380      	movs	r3, #128	; 0x80
 8007b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b66:	2302      	movs	r3, #2
 8007b68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007b72:	2306      	movs	r3, #6
 8007b74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8007b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	484a      	ldr	r0, [pc, #296]	; (8007ca8 <MX_GPIO_Init+0x5e8>)
 8007b7e:	f7fc f897 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8007b82:	2348      	movs	r3, #72	; 0x48
 8007b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b86:	2300      	movs	r3, #0
 8007b88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b92:	4619      	mov	r1, r3
 8007b94:	4844      	ldr	r0, [pc, #272]	; (8007ca8 <MX_GPIO_Init+0x5e8>)
 8007b96:	f7fc f88b 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8007b9a:	2380      	movs	r3, #128	; 0x80
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007baa:	2303      	movs	r3, #3
 8007bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8007bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4843      	ldr	r0, [pc, #268]	; (8007cc4 <MX_GPIO_Init+0x604>)
 8007bb6:	f7fc f87b 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8007bba:	2340      	movs	r3, #64	; 0x40
 8007bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8007bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	483b      	ldr	r0, [pc, #236]	; (8007cc4 <MX_GPIO_Init+0x604>)
 8007bd6:	f7fc f86b 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8007bda:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8007bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007be0:	2303      	movs	r3, #3
 8007be2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007be4:	2300      	movs	r3, #0
 8007be6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007bec:	4619      	mov	r1, r3
 8007bee:	4835      	ldr	r0, [pc, #212]	; (8007cc4 <MX_GPIO_Init+0x604>)
 8007bf0:	f7fc f85e 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_STP_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c00:	2303      	movs	r3, #3
 8007c02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8007c04:	230a      	movs	r3, #10
 8007c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8007c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	482b      	ldr	r0, [pc, #172]	; (8007cbc <MX_GPIO_Init+0x5fc>)
 8007c10:	f7fc f84e 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007c14:	2332      	movs	r3, #50	; 0x32
 8007c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c18:	2302      	movs	r3, #2
 8007c1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c20:	2303      	movs	r3, #3
 8007c22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007c24:	230b      	movs	r3, #11
 8007c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4823      	ldr	r0, [pc, #140]	; (8007cbc <MX_GPIO_Init+0x5fc>)
 8007c30:	f7fc f83e 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 8007c34:	2304      	movs	r3, #4
 8007c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8007c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c44:	4619      	mov	r1, r3
 8007c46:	481d      	ldr	r0, [pc, #116]	; (8007cbc <MX_GPIO_Init+0x5fc>)
 8007c48:	f7fc f832 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SCL_Pin */
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8007c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007c52:	2312      	movs	r3, #18
 8007c54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c56:	2301      	movs	r3, #1
 8007c58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8007c5e:	2304      	movs	r3, #4
 8007c60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8007c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c66:	4619      	mov	r1, r3
 8007c68:	4810      	ldr	r0, [pc, #64]	; (8007cac <MX_GPIO_Init+0x5ec>)
 8007c6a:	f7fc f821 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007c6e:	2386      	movs	r3, #134	; 0x86
 8007c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c72:	2302      	movs	r3, #2
 8007c74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007c7e:	230b      	movs	r3, #11
 8007c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c86:	4619      	mov	r1, r3
 8007c88:	4809      	ldr	r0, [pc, #36]	; (8007cb0 <MX_GPIO_Init+0x5f0>)
 8007c8a:	f7fc f811 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007c92:	4b0d      	ldr	r3, [pc, #52]	; (8007cc8 <MX_GPIO_Init+0x608>)
 8007c94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8007c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	4803      	ldr	r0, [pc, #12]	; (8007cb0 <MX_GPIO_Init+0x5f0>)
 8007ca2:	f7fc f805 	bl	8003cb0 <HAL_GPIO_Init>
 8007ca6:	e011      	b.n	8007ccc <MX_GPIO_Init+0x60c>
 8007ca8:	40021800 	.word	0x40021800
 8007cac:	40020c00 	.word	0x40020c00
 8007cb0:	40020000 	.word	0x40020000
 8007cb4:	40022000 	.word	0x40022000
 8007cb8:	10120000 	.word	0x10120000
 8007cbc:	40020800 	.word	0x40020800
 8007cc0:	40021c00 	.word	0x40021c00
 8007cc4:	40021400 	.word	0x40021400
 8007cc8:	10110000 	.word	0x10110000

  /*Configure GPIO pins : ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8007ccc:	2350      	movs	r3, #80	; 0x50
 8007cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007cdc:	4619      	mov	r1, r3
 8007cde:	482e      	ldr	r0, [pc, #184]	; (8007d98 <MX_GPIO_Init+0x6d8>)
 8007ce0:	f7fb ffe6 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_TX_Pin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8007ce4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cea:	2302      	movs	r3, #2
 8007cec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8007cf6:	230a      	movs	r3, #10
 8007cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8007cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007cfe:	4619      	mov	r1, r3
 8007d00:	4826      	ldr	r0, [pc, #152]	; (8007d9c <MX_GPIO_Init+0x6dc>)
 8007d02:	f7fb ffd5 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8007d06:	2380      	movs	r3, #128	; 0x80
 8007d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8007d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d16:	4619      	mov	r1, r3
 8007d18:	4821      	ldr	r0, [pc, #132]	; (8007da0 <MX_GPIO_Init+0x6e0>)
 8007d1a:	f7fb ffc9 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8007d1e:	2328      	movs	r3, #40	; 0x28
 8007d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d22:	2302      	movs	r3, #2
 8007d24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d26:	2300      	movs	r3, #0
 8007d28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8007d2e:	230a      	movs	r3, #10
 8007d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d36:	4619      	mov	r1, r3
 8007d38:	4817      	ldr	r0, [pc, #92]	; (8007d98 <MX_GPIO_Init+0x6d8>)
 8007d3a:	f7fb ffb9 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8007d3e:	2340      	movs	r3, #64	; 0x40
 8007d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d42:	2302      	movs	r3, #2
 8007d44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8007d4e:	2309      	movs	r3, #9
 8007d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8007d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d56:	4619      	mov	r1, r3
 8007d58:	4811      	ldr	r0, [pc, #68]	; (8007da0 <MX_GPIO_Init+0x6e0>)
 8007d5a:	f7fb ffa9 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8007d5e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d64:	2302      	movs	r3, #2
 8007d66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007d70:	2305      	movs	r3, #5
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d78:	4619      	mov	r1, r3
 8007d7a:	480a      	ldr	r0, [pc, #40]	; (8007da4 <MX_GPIO_Init+0x6e4>)
 8007d7c:	f7fb ff98 	bl	8003cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8007d80:	2200      	movs	r2, #0
 8007d82:	2100      	movs	r1, #0
 8007d84:	2006      	movs	r0, #6
 8007d86:	f7fa f9ab 	bl	80020e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8007d8a:	2006      	movs	r0, #6
 8007d8c:	f7fa f9c4 	bl	8002118 <HAL_NVIC_EnableIRQ>

}
 8007d90:	bf00      	nop
 8007d92:	3740      	adds	r7, #64	; 0x40
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	40020000 	.word	0x40020000
 8007d9c:	40020c00 	.word	0x40020c00
 8007da0:	40021c00 	.word	0x40021c00
 8007da4:	40020400 	.word	0x40020400

08007da8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a04      	ldr	r2, [pc, #16]	; (8007dc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d101      	bne.n	8007dbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007dba:	f7fa f897 	bl	8001eec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	40001000 	.word	0x40001000

08007dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007dd0:	bf00      	nop
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
	...

08007ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007de2:	4b0f      	ldr	r3, [pc, #60]	; (8007e20 <HAL_MspInit+0x44>)
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	4a0e      	ldr	r2, [pc, #56]	; (8007e20 <HAL_MspInit+0x44>)
 8007de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dec:	6413      	str	r3, [r2, #64]	; 0x40
 8007dee:	4b0c      	ldr	r3, [pc, #48]	; (8007e20 <HAL_MspInit+0x44>)
 8007df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007df6:	607b      	str	r3, [r7, #4]
 8007df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dfa:	4b09      	ldr	r3, [pc, #36]	; (8007e20 <HAL_MspInit+0x44>)
 8007dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfe:	4a08      	ldr	r2, [pc, #32]	; (8007e20 <HAL_MspInit+0x44>)
 8007e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e04:	6453      	str	r3, [r2, #68]	; 0x44
 8007e06:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <HAL_MspInit+0x44>)
 8007e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e0e:	603b      	str	r3, [r7, #0]
 8007e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e12:	bf00      	nop
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	40023800 	.word	0x40023800

08007e24 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a0a      	ldr	r2, [pc, #40]	; (8007e5c <HAL_CRC_MspInit+0x38>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d10b      	bne.n	8007e4e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007e36:	4b0a      	ldr	r3, [pc, #40]	; (8007e60 <HAL_CRC_MspInit+0x3c>)
 8007e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3a:	4a09      	ldr	r2, [pc, #36]	; (8007e60 <HAL_CRC_MspInit+0x3c>)
 8007e3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e40:	6313      	str	r3, [r2, #48]	; 0x30
 8007e42:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <HAL_CRC_MspInit+0x3c>)
 8007e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007e4e:	bf00      	nop
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	40023000 	.word	0x40023000
 8007e60:	40023800 	.word	0x40023800

08007e64 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a0a      	ldr	r2, [pc, #40]	; (8007e9c <HAL_DMA2D_MspInit+0x38>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d10b      	bne.n	8007e8e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8007e76:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <HAL_DMA2D_MspInit+0x3c>)
 8007e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7a:	4a09      	ldr	r2, [pc, #36]	; (8007ea0 <HAL_DMA2D_MspInit+0x3c>)
 8007e7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e80:	6313      	str	r3, [r2, #48]	; 0x30
 8007e82:	4b07      	ldr	r3, [pc, #28]	; (8007ea0 <HAL_DMA2D_MspInit+0x3c>)
 8007e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8007e8e:	bf00      	nop
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	4002b000 	.word	0x4002b000
 8007ea0:	40023800 	.word	0x40023800

08007ea4 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b08a      	sub	sp, #40	; 0x28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007eac:	f107 0314 	add.w	r3, r7, #20
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	605a      	str	r2, [r3, #4]
 8007eb6:	609a      	str	r2, [r3, #8]
 8007eb8:	60da      	str	r2, [r3, #12]
 8007eba:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a17      	ldr	r2, [pc, #92]	; (8007f20 <HAL_DSI_MspInit+0x7c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d127      	bne.n	8007f16 <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8007ec6:	4b17      	ldr	r3, [pc, #92]	; (8007f24 <HAL_DSI_MspInit+0x80>)
 8007ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eca:	4a16      	ldr	r2, [pc, #88]	; (8007f24 <HAL_DSI_MspInit+0x80>)
 8007ecc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8007ed2:	4b14      	ldr	r3, [pc, #80]	; (8007f24 <HAL_DSI_MspInit+0x80>)
 8007ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eda:	613b      	str	r3, [r7, #16]
 8007edc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007ede:	4b11      	ldr	r3, [pc, #68]	; (8007f24 <HAL_DSI_MspInit+0x80>)
 8007ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee2:	4a10      	ldr	r2, [pc, #64]	; (8007f24 <HAL_DSI_MspInit+0x80>)
 8007ee4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8007eea:	4b0e      	ldr	r3, [pc, #56]	; (8007f24 <HAL_DSI_MspInit+0x80>)
 8007eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 8007ef6:	2304      	movs	r3, #4
 8007ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007efa:	2302      	movs	r3, #2
 8007efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007efe:	2300      	movs	r3, #0
 8007f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f02:	2300      	movs	r3, #0
 8007f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8007f06:	230d      	movs	r3, #13
 8007f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8007f0a:	f107 0314 	add.w	r3, r7, #20
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4805      	ldr	r0, [pc, #20]	; (8007f28 <HAL_DSI_MspInit+0x84>)
 8007f12:	f7fb fecd 	bl	8003cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8007f16:	bf00      	nop
 8007f18:	3728      	adds	r7, #40	; 0x28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	40016c00 	.word	0x40016c00
 8007f24:	40023800 	.word	0x40023800
 8007f28:	40022400 	.word	0x40022400

08007f2c <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a08      	ldr	r2, [pc, #32]	; (8007f5c <HAL_DSI_MspDeInit+0x30>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d109      	bne.n	8007f52 <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8007f3e:	4b08      	ldr	r3, [pc, #32]	; (8007f60 <HAL_DSI_MspDeInit+0x34>)
 8007f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f42:	4a07      	ldr	r2, [pc, #28]	; (8007f60 <HAL_DSI_MspDeInit+0x34>)
 8007f44:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8007f48:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(DSIHOST_TE_GPIO_Port, DSIHOST_TE_Pin);
 8007f4a:	2104      	movs	r1, #4
 8007f4c:	4805      	ldr	r0, [pc, #20]	; (8007f64 <HAL_DSI_MspDeInit+0x38>)
 8007f4e:	f7fc f859 	bl	8004004 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 8007f52:	bf00      	nop
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	40016c00 	.word	0x40016c00
 8007f60:	40023800 	.word	0x40023800
 8007f64:	40022400 	.word	0x40022400

08007f68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b08a      	sub	sp, #40	; 0x28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f70:	f107 0314 	add.w	r3, r7, #20
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	605a      	str	r2, [r3, #4]
 8007f7a:	609a      	str	r2, [r3, #8]
 8007f7c:	60da      	str	r2, [r3, #12]
 8007f7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a17      	ldr	r2, [pc, #92]	; (8007fe4 <HAL_I2C_MspInit+0x7c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d128      	bne.n	8007fdc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f8a:	4b17      	ldr	r3, [pc, #92]	; (8007fe8 <HAL_I2C_MspInit+0x80>)
 8007f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8e:	4a16      	ldr	r2, [pc, #88]	; (8007fe8 <HAL_I2C_MspInit+0x80>)
 8007f90:	f043 0302 	orr.w	r3, r3, #2
 8007f94:	6313      	str	r3, [r2, #48]	; 0x30
 8007f96:	4b14      	ldr	r3, [pc, #80]	; (8007fe8 <HAL_I2C_MspInit+0x80>)
 8007f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	613b      	str	r3, [r7, #16]
 8007fa0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8007fa2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007fa8:	2312      	movs	r3, #18
 8007faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007fac:	2301      	movs	r3, #1
 8007fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007fb4:	2304      	movs	r3, #4
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fb8:	f107 0314 	add.w	r3, r7, #20
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	480b      	ldr	r0, [pc, #44]	; (8007fec <HAL_I2C_MspInit+0x84>)
 8007fc0:	f7fb fe76 	bl	8003cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007fc4:	4b08      	ldr	r3, [pc, #32]	; (8007fe8 <HAL_I2C_MspInit+0x80>)
 8007fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc8:	4a07      	ldr	r2, [pc, #28]	; (8007fe8 <HAL_I2C_MspInit+0x80>)
 8007fca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fce:	6413      	str	r3, [r2, #64]	; 0x40
 8007fd0:	4b05      	ldr	r3, [pc, #20]	; (8007fe8 <HAL_I2C_MspInit+0x80>)
 8007fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fd8:	60fb      	str	r3, [r7, #12]
 8007fda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007fdc:	bf00      	nop
 8007fde:	3728      	adds	r7, #40	; 0x28
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	40005400 	.word	0x40005400
 8007fe8:	40023800 	.word	0x40023800
 8007fec:	40020400 	.word	0x40020400

08007ff0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a08      	ldr	r2, [pc, #32]	; (8008020 <HAL_I2C_MspDeInit+0x30>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d10a      	bne.n	8008018 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008002:	4b08      	ldr	r3, [pc, #32]	; (8008024 <HAL_I2C_MspDeInit+0x34>)
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	4a07      	ldr	r2, [pc, #28]	; (8008024 <HAL_I2C_MspDeInit+0x34>)
 8008008:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800800c:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 800800e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8008012:	4805      	ldr	r0, [pc, #20]	; (8008028 <HAL_I2C_MspDeInit+0x38>)
 8008014:	f7fb fff6 	bl	8004004 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008018:	bf00      	nop
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	40005400 	.word	0x40005400
 8008024:	40023800 	.word	0x40023800
 8008028:	40020400 	.word	0x40020400

0800802c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a0a      	ldr	r2, [pc, #40]	; (8008064 <HAL_LTDC_MspInit+0x38>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d10b      	bne.n	8008056 <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800803e:	4b0a      	ldr	r3, [pc, #40]	; (8008068 <HAL_LTDC_MspInit+0x3c>)
 8008040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008042:	4a09      	ldr	r2, [pc, #36]	; (8008068 <HAL_LTDC_MspInit+0x3c>)
 8008044:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008048:	6453      	str	r3, [r2, #68]	; 0x44
 800804a:	4b07      	ldr	r3, [pc, #28]	; (8008068 <HAL_LTDC_MspInit+0x3c>)
 800804c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8008056:	bf00      	nop
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	40016800 	.word	0x40016800
 8008068:	40023800 	.word	0x40023800

0800806c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08c      	sub	sp, #48	; 0x30
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008074:	f107 031c 	add.w	r3, r7, #28
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	605a      	str	r2, [r3, #4]
 800807e:	609a      	str	r2, [r3, #8]
 8008080:	60da      	str	r2, [r3, #12]
 8008082:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a4a      	ldr	r2, [pc, #296]	; (80081b4 <HAL_QSPI_MspInit+0x148>)
 800808a:	4293      	cmp	r3, r2
 800808c:	f040 808e 	bne.w	80081ac <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8008090:	4b49      	ldr	r3, [pc, #292]	; (80081b8 <HAL_QSPI_MspInit+0x14c>)
 8008092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008094:	4a48      	ldr	r2, [pc, #288]	; (80081b8 <HAL_QSPI_MspInit+0x14c>)
 8008096:	f043 0302 	orr.w	r3, r3, #2
 800809a:	6393      	str	r3, [r2, #56]	; 0x38
 800809c:	4b46      	ldr	r3, [pc, #280]	; (80081b8 <HAL_QSPI_MspInit+0x14c>)
 800809e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a0:	f003 0302 	and.w	r3, r3, #2
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80080a8:	4b43      	ldr	r3, [pc, #268]	; (80081b8 <HAL_QSPI_MspInit+0x14c>)
 80080aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ac:	4a42      	ldr	r2, [pc, #264]	; (80081b8 <HAL_QSPI_MspInit+0x14c>)
 80080ae:	f043 0310 	orr.w	r3, r3, #16
 80080b2:	6313      	str	r3, [r2, #48]	; 0x30
 80080b4:	4b40      	ldr	r3, [pc, #256]	; (80081b8 <HAL_QSPI_MspInit+0x14c>)
 80080b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b8:	f003 0310 	and.w	r3, r3, #16
 80080bc:	617b      	str	r3, [r7, #20]
 80080be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080c0:	4b3d      	ldr	r3, [pc, #244]	; (80081b8 <HAL_QSPI_MspInit+0x14c>)
 80080c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c4:	4a3c      	ldr	r2, [pc, #240]	; (80081b8 <HAL_QSPI_MspInit+0x14c>)
 80080c6:	f043 0302 	orr.w	r3, r3, #2
 80080ca:	6313      	str	r3, [r2, #48]	; 0x30
 80080cc:	4b3a      	ldr	r3, [pc, #232]	; (80081b8 <HAL_QSPI_MspInit+0x14c>)
 80080ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d0:	f003 0302 	and.w	r3, r3, #2
 80080d4:	613b      	str	r3, [r7, #16]
 80080d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080d8:	4b37      	ldr	r3, [pc, #220]	; (80081b8 <HAL_QSPI_MspInit+0x14c>)
 80080da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080dc:	4a36      	ldr	r2, [pc, #216]	; (80081b8 <HAL_QSPI_MspInit+0x14c>)
 80080de:	f043 0304 	orr.w	r3, r3, #4
 80080e2:	6313      	str	r3, [r2, #48]	; 0x30
 80080e4:	4b34      	ldr	r3, [pc, #208]	; (80081b8 <HAL_QSPI_MspInit+0x14c>)
 80080e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e8:	f003 0304 	and.w	r3, r3, #4
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80080f0:	4b31      	ldr	r3, [pc, #196]	; (80081b8 <HAL_QSPI_MspInit+0x14c>)
 80080f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f4:	4a30      	ldr	r2, [pc, #192]	; (80081b8 <HAL_QSPI_MspInit+0x14c>)
 80080f6:	f043 0308 	orr.w	r3, r3, #8
 80080fa:	6313      	str	r3, [r2, #48]	; 0x30
 80080fc:	4b2e      	ldr	r3, [pc, #184]	; (80081b8 <HAL_QSPI_MspInit+0x14c>)
 80080fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008100:	f003 0308 	and.w	r3, r3, #8
 8008104:	60bb      	str	r3, [r7, #8]
 8008106:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8008108:	2304      	movs	r3, #4
 800810a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800810c:	2302      	movs	r3, #2
 800810e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008110:	2300      	movs	r3, #0
 8008112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008114:	2303      	movs	r3, #3
 8008116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8008118:	2309      	movs	r3, #9
 800811a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800811c:	f107 031c 	add.w	r3, r7, #28
 8008120:	4619      	mov	r1, r3
 8008122:	4826      	ldr	r0, [pc, #152]	; (80081bc <HAL_QSPI_MspInit+0x150>)
 8008124:	f7fb fdc4 	bl	8003cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8008128:	2340      	movs	r3, #64	; 0x40
 800812a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800812c:	2302      	movs	r3, #2
 800812e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008130:	2300      	movs	r3, #0
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008134:	2303      	movs	r3, #3
 8008136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8008138:	230a      	movs	r3, #10
 800813a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800813c:	f107 031c 	add.w	r3, r7, #28
 8008140:	4619      	mov	r1, r3
 8008142:	481f      	ldr	r0, [pc, #124]	; (80081c0 <HAL_QSPI_MspInit+0x154>)
 8008144:	f7fb fdb4 	bl	8003cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8008148:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800814c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800814e:	2302      	movs	r3, #2
 8008150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008152:	2300      	movs	r3, #0
 8008154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008156:	2303      	movs	r3, #3
 8008158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800815a:	2309      	movs	r3, #9
 800815c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800815e:	f107 031c 	add.w	r3, r7, #28
 8008162:	4619      	mov	r1, r3
 8008164:	4817      	ldr	r0, [pc, #92]	; (80081c4 <HAL_QSPI_MspInit+0x158>)
 8008166:	f7fb fda3 	bl	8003cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800816a:	2304      	movs	r3, #4
 800816c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800816e:	2302      	movs	r3, #2
 8008170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008172:	2300      	movs	r3, #0
 8008174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008176:	2303      	movs	r3, #3
 8008178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800817a:	2309      	movs	r3, #9
 800817c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800817e:	f107 031c 	add.w	r3, r7, #28
 8008182:	4619      	mov	r1, r3
 8008184:	480e      	ldr	r0, [pc, #56]	; (80081c0 <HAL_QSPI_MspInit+0x154>)
 8008186:	f7fb fd93 	bl	8003cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D3_Pin;
 800818a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800818e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008190:	2302      	movs	r3, #2
 8008192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008194:	2300      	movs	r3, #0
 8008196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008198:	2303      	movs	r3, #3
 800819a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800819c:	2309      	movs	r3, #9
 800819e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 80081a0:	f107 031c 	add.w	r3, r7, #28
 80081a4:	4619      	mov	r1, r3
 80081a6:	4808      	ldr	r0, [pc, #32]	; (80081c8 <HAL_QSPI_MspInit+0x15c>)
 80081a8:	f7fb fd82 	bl	8003cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80081ac:	bf00      	nop
 80081ae:	3730      	adds	r7, #48	; 0x30
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	a0001000 	.word	0xa0001000
 80081b8:	40023800 	.word	0x40023800
 80081bc:	40021000 	.word	0x40021000
 80081c0:	40020400 	.word	0x40020400
 80081c4:	40020800 	.word	0x40020800
 80081c8:	40020c00 	.word	0x40020c00

080081cc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80081d2:	1d3b      	adds	r3, r7, #4
 80081d4:	2200      	movs	r2, #0
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	605a      	str	r2, [r3, #4]
 80081da:	609a      	str	r2, [r3, #8]
 80081dc:	60da      	str	r2, [r3, #12]
 80081de:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80081e0:	4b3b      	ldr	r3, [pc, #236]	; (80082d0 <HAL_FMC_MspInit+0x104>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d16f      	bne.n	80082c8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80081e8:	4b39      	ldr	r3, [pc, #228]	; (80082d0 <HAL_FMC_MspInit+0x104>)
 80081ea:	2201      	movs	r2, #1
 80081ec:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80081ee:	4b39      	ldr	r3, [pc, #228]	; (80082d4 <HAL_FMC_MspInit+0x108>)
 80081f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f2:	4a38      	ldr	r2, [pc, #224]	; (80082d4 <HAL_FMC_MspInit+0x108>)
 80081f4:	f043 0301 	orr.w	r3, r3, #1
 80081f8:	6393      	str	r3, [r2, #56]	; 0x38
 80081fa:	4b36      	ldr	r3, [pc, #216]	; (80082d4 <HAL_FMC_MspInit+0x108>)
 80081fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	603b      	str	r3, [r7, #0]
 8008204:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8008206:	f64f 7383 	movw	r3, #65411	; 0xff83
 800820a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800820c:	2302      	movs	r3, #2
 800820e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008210:	2300      	movs	r3, #0
 8008212:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008214:	2303      	movs	r3, #3
 8008216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008218:	230c      	movs	r3, #12
 800821a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800821c:	1d3b      	adds	r3, r7, #4
 800821e:	4619      	mov	r1, r3
 8008220:	482d      	ldr	r0, [pc, #180]	; (80082d8 <HAL_FMC_MspInit+0x10c>)
 8008222:	f7fb fd45 	bl	8003cb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 8008226:	f248 1337 	movw	r3, #33079	; 0x8137
 800822a:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800822c:	2302      	movs	r3, #2
 800822e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008230:	2300      	movs	r3, #0
 8008232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008234:	2303      	movs	r3, #3
 8008236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008238:	230c      	movs	r3, #12
 800823a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800823c:	1d3b      	adds	r3, r7, #4
 800823e:	4619      	mov	r1, r3
 8008240:	4826      	ldr	r0, [pc, #152]	; (80082dc <HAL_FMC_MspInit+0x110>)
 8008242:	f7fb fd35 	bl	8003cb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8008246:	f24c 7303 	movw	r3, #50947	; 0xc703
 800824a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800824c:	2302      	movs	r3, #2
 800824e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008250:	2300      	movs	r3, #0
 8008252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008254:	2303      	movs	r3, #3
 8008256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008258:	230c      	movs	r3, #12
 800825a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800825c:	1d3b      	adds	r3, r7, #4
 800825e:	4619      	mov	r1, r3
 8008260:	481f      	ldr	r0, [pc, #124]	; (80082e0 <HAL_FMC_MspInit+0x114>)
 8008262:	f7fb fd25 	bl	8003cb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 8008266:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800826a:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin 
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800826c:	2302      	movs	r3, #2
 800826e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008270:	2300      	movs	r3, #0
 8008272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008274:	2303      	movs	r3, #3
 8008276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008278:	230c      	movs	r3, #12
 800827a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800827c:	1d3b      	adds	r3, r7, #4
 800827e:	4619      	mov	r1, r3
 8008280:	4818      	ldr	r0, [pc, #96]	; (80082e4 <HAL_FMC_MspInit+0x118>)
 8008282:	f7fb fd15 	bl	8003cb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8008286:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800828a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800828c:	2302      	movs	r3, #2
 800828e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008294:	2303      	movs	r3, #3
 8008296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008298:	230c      	movs	r3, #12
 800829a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800829c:	1d3b      	adds	r3, r7, #4
 800829e:	4619      	mov	r1, r3
 80082a0:	4811      	ldr	r0, [pc, #68]	; (80082e8 <HAL_FMC_MspInit+0x11c>)
 80082a2:	f7fb fd05 	bl	8003cb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 80082a6:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80082aa:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin 
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ac:	2302      	movs	r3, #2
 80082ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082b4:	2303      	movs	r3, #3
 80082b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80082b8:	230c      	movs	r3, #12
 80082ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80082bc:	1d3b      	adds	r3, r7, #4
 80082be:	4619      	mov	r1, r3
 80082c0:	480a      	ldr	r0, [pc, #40]	; (80082ec <HAL_FMC_MspInit+0x120>)
 80082c2:	f7fb fcf5 	bl	8003cb0 <HAL_GPIO_Init>
 80082c6:	e000      	b.n	80082ca <HAL_FMC_MspInit+0xfe>
    return;
 80082c8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	2000025c 	.word	0x2000025c
 80082d4:	40023800 	.word	0x40023800
 80082d8:	40021000 	.word	0x40021000
 80082dc:	40021800 	.word	0x40021800
 80082e0:	40020c00 	.word	0x40020c00
 80082e4:	40022000 	.word	0x40022000
 80082e8:	40021400 	.word	0x40021400
 80082ec:	40021c00 	.word	0x40021c00

080082f0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80082f8:	f7ff ff68 	bl	80081cc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08c      	sub	sp, #48	; 0x30
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800830c:	2300      	movs	r3, #0
 800830e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8008314:	2200      	movs	r2, #0
 8008316:	6879      	ldr	r1, [r7, #4]
 8008318:	2036      	movs	r0, #54	; 0x36
 800831a:	f7f9 fee1 	bl	80020e0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800831e:	2036      	movs	r0, #54	; 0x36
 8008320:	f7f9 fefa 	bl	8002118 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008324:	4b1f      	ldr	r3, [pc, #124]	; (80083a4 <HAL_InitTick+0xa0>)
 8008326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008328:	4a1e      	ldr	r2, [pc, #120]	; (80083a4 <HAL_InitTick+0xa0>)
 800832a:	f043 0310 	orr.w	r3, r3, #16
 800832e:	6413      	str	r3, [r2, #64]	; 0x40
 8008330:	4b1c      	ldr	r3, [pc, #112]	; (80083a4 <HAL_InitTick+0xa0>)
 8008332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008334:	f003 0310 	and.w	r3, r3, #16
 8008338:	60fb      	str	r3, [r7, #12]
 800833a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800833c:	f107 0210 	add.w	r2, r7, #16
 8008340:	f107 0314 	add.w	r3, r7, #20
 8008344:	4611      	mov	r1, r2
 8008346:	4618      	mov	r0, r3
 8008348:	f7fd fd98 	bl	8005e7c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800834c:	f7fd fd82 	bl	8005e54 <HAL_RCC_GetPCLK1Freq>
 8008350:	4603      	mov	r3, r0
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008358:	4a13      	ldr	r2, [pc, #76]	; (80083a8 <HAL_InitTick+0xa4>)
 800835a:	fba2 2303 	umull	r2, r3, r2, r3
 800835e:	0c9b      	lsrs	r3, r3, #18
 8008360:	3b01      	subs	r3, #1
 8008362:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008364:	4b11      	ldr	r3, [pc, #68]	; (80083ac <HAL_InitTick+0xa8>)
 8008366:	4a12      	ldr	r2, [pc, #72]	; (80083b0 <HAL_InitTick+0xac>)
 8008368:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800836a:	4b10      	ldr	r3, [pc, #64]	; (80083ac <HAL_InitTick+0xa8>)
 800836c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008370:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008372:	4a0e      	ldr	r2, [pc, #56]	; (80083ac <HAL_InitTick+0xa8>)
 8008374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008376:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008378:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <HAL_InitTick+0xa8>)
 800837a:	2200      	movs	r2, #0
 800837c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800837e:	4b0b      	ldr	r3, [pc, #44]	; (80083ac <HAL_InitTick+0xa8>)
 8008380:	2200      	movs	r2, #0
 8008382:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8008384:	4809      	ldr	r0, [pc, #36]	; (80083ac <HAL_InitTick+0xa8>)
 8008386:	f7fe fa50 	bl	800682a <HAL_TIM_Base_Init>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d104      	bne.n	800839a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8008390:	4806      	ldr	r0, [pc, #24]	; (80083ac <HAL_InitTick+0xa8>)
 8008392:	f7fe fa7f 	bl	8006894 <HAL_TIM_Base_Start_IT>
 8008396:	4603      	mov	r3, r0
 8008398:	e000      	b.n	800839c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
}
 800839c:	4618      	mov	r0, r3
 800839e:	3730      	adds	r7, #48	; 0x30
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	40023800 	.word	0x40023800
 80083a8:	431bde83 	.word	0x431bde83
 80083ac:	200005c0 	.word	0x200005c0
 80083b0:	40001000 	.word	0x40001000

080083b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80083b4:	b480      	push	{r7}
 80083b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80083b8:	bf00      	nop
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80083c2:	b480      	push	{r7}
 80083c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80083c6:	e7fe      	b.n	80083c6 <HardFault_Handler+0x4>

080083c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80083cc:	e7fe      	b.n	80083cc <MemManage_Handler+0x4>

080083ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80083ce:	b480      	push	{r7}
 80083d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80083d2:	e7fe      	b.n	80083d2 <BusFault_Handler+0x4>

080083d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80083d4:	b480      	push	{r7}
 80083d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80083d8:	e7fe      	b.n	80083d8 <UsageFault_Handler+0x4>

080083da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80083da:	b480      	push	{r7}
 80083dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80083de:	bf00      	nop
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083ec:	bf00      	nop
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80083f6:	b480      	push	{r7}
 80083f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80083fa:	bf00      	nop
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008408:	bf00      	nop
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008416:	2001      	movs	r0, #1
 8008418:	f7fb ff18 	bl	800424c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800841c:	bf00      	nop
 800841e:	bd80      	pop	{r7, pc}

08008420 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008424:	4802      	ldr	r0, [pc, #8]	; (8008430 <TIM6_DAC_IRQHandler+0x10>)
 8008426:	f7fe fa5f 	bl	80068e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800842a:	bf00      	nop
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	200005c0 	.word	0x200005c0

08008434 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008434:	b480      	push	{r7}
 8008436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008438:	4b15      	ldr	r3, [pc, #84]	; (8008490 <SystemInit+0x5c>)
 800843a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800843e:	4a14      	ldr	r2, [pc, #80]	; (8008490 <SystemInit+0x5c>)
 8008440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008448:	4b12      	ldr	r3, [pc, #72]	; (8008494 <SystemInit+0x60>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a11      	ldr	r2, [pc, #68]	; (8008494 <SystemInit+0x60>)
 800844e:	f043 0301 	orr.w	r3, r3, #1
 8008452:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008454:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <SystemInit+0x60>)
 8008456:	2200      	movs	r2, #0
 8008458:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800845a:	4b0e      	ldr	r3, [pc, #56]	; (8008494 <SystemInit+0x60>)
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	490d      	ldr	r1, [pc, #52]	; (8008494 <SystemInit+0x60>)
 8008460:	4b0d      	ldr	r3, [pc, #52]	; (8008498 <SystemInit+0x64>)
 8008462:	4013      	ands	r3, r2
 8008464:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008466:	4b0b      	ldr	r3, [pc, #44]	; (8008494 <SystemInit+0x60>)
 8008468:	4a0c      	ldr	r2, [pc, #48]	; (800849c <SystemInit+0x68>)
 800846a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800846c:	4b09      	ldr	r3, [pc, #36]	; (8008494 <SystemInit+0x60>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a08      	ldr	r2, [pc, #32]	; (8008494 <SystemInit+0x60>)
 8008472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008476:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008478:	4b06      	ldr	r3, [pc, #24]	; (8008494 <SystemInit+0x60>)
 800847a:	2200      	movs	r2, #0
 800847c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800847e:	4b04      	ldr	r3, [pc, #16]	; (8008490 <SystemInit+0x5c>)
 8008480:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008484:	609a      	str	r2, [r3, #8]
#endif
}
 8008486:	bf00      	nop
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	e000ed00 	.word	0xe000ed00
 8008494:	40023800 	.word	0x40023800
 8008498:	fef6ffff 	.word	0xfef6ffff
 800849c:	24003010 	.word	0x24003010

080084a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80084a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80084d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80084a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80084a6:	e003      	b.n	80084b0 <LoopCopyDataInit>

080084a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80084a8:	4b0c      	ldr	r3, [pc, #48]	; (80084dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80084aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80084ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80084ae:	3104      	adds	r1, #4

080084b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80084b0:	480b      	ldr	r0, [pc, #44]	; (80084e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80084b2:	4b0c      	ldr	r3, [pc, #48]	; (80084e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80084b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80084b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80084b8:	d3f6      	bcc.n	80084a8 <CopyDataInit>
  ldr  r2, =_sbss
 80084ba:	4a0b      	ldr	r2, [pc, #44]	; (80084e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80084bc:	e002      	b.n	80084c4 <LoopFillZerobss>

080084be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80084be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80084c0:	f842 3b04 	str.w	r3, [r2], #4

080084c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80084c4:	4b09      	ldr	r3, [pc, #36]	; (80084ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80084c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80084c8:	d3f9      	bcc.n	80084be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80084ca:	f7ff ffb3 	bl	8008434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80084ce:	f000 f811 	bl	80084f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80084d2:	f7fe fd55 	bl	8006f80 <main>
  bx  lr    
 80084d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80084d8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80084dc:	0800a268 	.word	0x0800a268
  ldr  r0, =_sdata
 80084e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80084e4:	20000040 	.word	0x20000040
  ldr  r2, =_sbss
 80084e8:	20000040 	.word	0x20000040
  ldr  r3, = _ebss
 80084ec:	20000600 	.word	0x20000600

080084f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80084f0:	e7fe      	b.n	80084f0 <ADC_IRQHandler>
	...

080084f4 <__libc_init_array>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	4e0d      	ldr	r6, [pc, #52]	; (800852c <__libc_init_array+0x38>)
 80084f8:	4c0d      	ldr	r4, [pc, #52]	; (8008530 <__libc_init_array+0x3c>)
 80084fa:	1ba4      	subs	r4, r4, r6
 80084fc:	10a4      	asrs	r4, r4, #2
 80084fe:	2500      	movs	r5, #0
 8008500:	42a5      	cmp	r5, r4
 8008502:	d109      	bne.n	8008518 <__libc_init_array+0x24>
 8008504:	4e0b      	ldr	r6, [pc, #44]	; (8008534 <__libc_init_array+0x40>)
 8008506:	4c0c      	ldr	r4, [pc, #48]	; (8008538 <__libc_init_array+0x44>)
 8008508:	f000 f820 	bl	800854c <_init>
 800850c:	1ba4      	subs	r4, r4, r6
 800850e:	10a4      	asrs	r4, r4, #2
 8008510:	2500      	movs	r5, #0
 8008512:	42a5      	cmp	r5, r4
 8008514:	d105      	bne.n	8008522 <__libc_init_array+0x2e>
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800851c:	4798      	blx	r3
 800851e:	3501      	adds	r5, #1
 8008520:	e7ee      	b.n	8008500 <__libc_init_array+0xc>
 8008522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008526:	4798      	blx	r3
 8008528:	3501      	adds	r5, #1
 800852a:	e7f2      	b.n	8008512 <__libc_init_array+0x1e>
 800852c:	0800a260 	.word	0x0800a260
 8008530:	0800a260 	.word	0x0800a260
 8008534:	0800a260 	.word	0x0800a260
 8008538:	0800a264 	.word	0x0800a264

0800853c <memset>:
 800853c:	4402      	add	r2, r0
 800853e:	4603      	mov	r3, r0
 8008540:	4293      	cmp	r3, r2
 8008542:	d100      	bne.n	8008546 <memset+0xa>
 8008544:	4770      	bx	lr
 8008546:	f803 1b01 	strb.w	r1, [r3], #1
 800854a:	e7f9      	b.n	8008540 <memset+0x4>

0800854c <_init>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	bf00      	nop
 8008550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008552:	bc08      	pop	{r3}
 8008554:	469e      	mov	lr, r3
 8008556:	4770      	bx	lr

08008558 <_fini>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr
